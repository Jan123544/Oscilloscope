
osci.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cec  08004cec  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004cec  08004cec  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cec  08004cec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000068  08004d5c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08004d5c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b5d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000306b  00000000  00000000  00035bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00038c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019af5  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b737  00000000  00000000  000540bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008736d  00000000  00000000  0005f7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000e6bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c58 	.word	0x08004c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004c58 	.word	0x08004c58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_d2uiz>:
 8000650:	004a      	lsls	r2, r1, #1
 8000652:	d211      	bcs.n	8000678 <__aeabi_d2uiz+0x28>
 8000654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000658:	d211      	bcs.n	800067e <__aeabi_d2uiz+0x2e>
 800065a:	d50d      	bpl.n	8000678 <__aeabi_d2uiz+0x28>
 800065c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000664:	d40e      	bmi.n	8000684 <__aeabi_d2uiz+0x34>
 8000666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800066e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000672:	fa23 f002 	lsr.w	r0, r3, r2
 8000676:	4770      	bx	lr
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	4770      	bx	lr
 800067e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000682:	d102      	bne.n	800068a <__aeabi_d2uiz+0x3a>
 8000684:	f04f 30ff 	mov.w	r0, #4294967295
 8000688:	4770      	bx	lr
 800068a:	f04f 0000 	mov.w	r0, #0
 800068e:	4770      	bx	lr

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007a2:	b490      	push	{r4, r7}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3330      	adds	r3, #48	; 0x30
 80007b2:	4619      	mov	r1, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80007ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007be:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	fa92 f2a2 	rbit	r2, r2
 80007c6:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	40d3      	lsrs	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80007d8:	6822      	ldr	r2, [r4, #0]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	f003 031f 	and.w	r3, r3, #31
 80007e0:	211f      	movs	r1, #31
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	401a      	ands	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	f003 031f 	and.w	r3, r3, #31
 80007f6:	f1c3 031a 	rsb	r3, r3, #26
 80007fa:	fa21 f303 	lsr.w	r3, r1, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bc90      	pop	{r4, r7}
 800080a:	4770      	bx	lr

0800080c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800080c:	b490      	push	{r4, r7}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3314      	adds	r3, #20
 800081c:	4619      	mov	r1, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	fa92 f2a2 	rbit	r2, r2
 8000830:	613a      	str	r2, [r7, #16]
  return result;
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	fab2 f282 	clz	r2, r2
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	40d3      	lsrs	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000842:	6822      	ldr	r2, [r4, #0]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800084a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800084e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000850:	69f9      	ldr	r1, [r7, #28]
 8000852:	fa91 f1a1 	rbit	r1, r1
 8000856:	61b9      	str	r1, [r7, #24]
  return result;
 8000858:	69b9      	ldr	r1, [r7, #24]
 800085a:	fab1 f181 	clz	r1, r1
 800085e:	b2c9      	uxtb	r1, r1
 8000860:	40cb      	lsrs	r3, r1
 8000862:	2107      	movs	r1, #7
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	401a      	ands	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000872:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000876:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800087a:	fa91 f1a1 	rbit	r1, r1
 800087e:	6239      	str	r1, [r7, #32]
  return result;
 8000880:	6a39      	ldr	r1, [r7, #32]
 8000882:	fab1 f181 	clz	r1, r1
 8000886:	b2c9      	uxtb	r1, r1
 8000888:	40cb      	lsrs	r3, r1
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bc90      	pop	{r4, r7}
 800089c:	4770      	bx	lr
	...

080008a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008b6:	400b      	ands	r3, r1
 80008b8:	43db      	mvns	r3, r3
 80008ba:	401a      	ands	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f003 0318 	and.w	r3, r3, #24
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008c4:	40d9      	lsrs	r1, r3
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	4019      	ands	r1, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008cc:	400b      	ands	r3, r1
 80008ce:	431a      	orrs	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	0007fffe 	.word	0x0007fffe

080008e8 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f023 0204 	bic.w	r2, r3, #4
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f023 0208 	bic.w	r2, r3, #8
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	605a      	str	r2, [r3, #4]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_ADC_DisableIT_EOSMP>:
  * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f023 0202 	bic.w	r2, r3, #2
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LL_DMA_SetDataTransferDirection+0x48>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000968:	f023 0310 	bic.w	r3, r3, #16
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	3a01      	subs	r2, #1
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <LL_DMA_SetDataTransferDirection+0x48>)
 8000972:	5c8a      	ldrb	r2, [r1, r2]
 8000974:	4611      	mov	r1, r2
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	440a      	add	r2, r1
 800097a:	4611      	mov	r1, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4313      	orrs	r3, r2
 8000980:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	08004cb4 	.word	0x08004cb4

08000994 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <LL_DMA_SetMode+0x44>)
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f023 0220 	bic.w	r2, r3, #32
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <LL_DMA_SetMode+0x44>)
 80009ba:	5ccb      	ldrb	r3, [r1, r3]
 80009bc:	4619      	mov	r1, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	440b      	add	r3, r1
 80009c2:	4619      	mov	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	08004cb4 	.word	0x08004cb4

080009dc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <LL_DMA_SetPeriphIncMode+0x44>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	461a      	mov	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <LL_DMA_SetPeriphIncMode+0x44>)
 8000a02:	5ccb      	ldrb	r3, [r1, r3]
 8000a04:	4619      	mov	r1, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	440b      	add	r3, r1
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	08004cb4 	.word	0x08004cb4

08000a24 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <LL_DMA_SetMemoryIncMode+0x44>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <LL_DMA_SetMemoryIncMode+0x44>)
 8000a4a:	5ccb      	ldrb	r3, [r1, r3]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	440b      	add	r3, r1
 8000a52:	4619      	mov	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	08004cb4 	.word	0x08004cb4

08000a6c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <LL_DMA_SetPeriphSize+0x44>)
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	461a      	mov	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4413      	add	r3, r2
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <LL_DMA_SetPeriphSize+0x44>)
 8000a92:	5ccb      	ldrb	r3, [r1, r3]
 8000a94:	4619      	mov	r1, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	440b      	add	r3, r1
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	08004cb4 	.word	0x08004cb4

08000ab4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <LL_DMA_SetMemorySize+0x44>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <LL_DMA_SetMemorySize+0x44>)
 8000ada:	5ccb      	ldrb	r3, [r1, r3]
 8000adc:	4619      	mov	r1, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	08004cb4 	.word	0x08004cb4

08000afc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4413      	add	r3, r2
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000b22:	5ccb      	ldrb	r3, [r1, r3]
 8000b24:	4619      	mov	r1, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	440b      	add	r3, r1
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	08004cb4 	.word	0x08004cb4

08000b44 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000

08000b74 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000b7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000bb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000bba:	f7ff ffc3 	bl	8000b44 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000bbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bc2:	f7ff ffbf 	bl	8000b44 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PA0   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f003 fb00 	bl	80041de <LL_GPIO_Init>

  /* ADC1 DMA Init */
  
  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2101      	movs	r1, #1
 8000be2:	4840      	ldr	r0, [pc, #256]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000be4:	f7ff feb0 	bl	8000948 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 8000be8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000bec:	2101      	movs	r1, #1
 8000bee:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000bf0:	f7ff ff84 	bl	8000afc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000bfa:	f7ff fecb 	bl	8000994 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	4838      	ldr	r0, [pc, #224]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000c04:	f7ff feea 	bl	80009dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4835      	ldr	r0, [pc, #212]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000c0e:	f7ff ff09 	bl	8000a24 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c16:	2101      	movs	r1, #1
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000c1a:	f7ff ff27 	bl	8000a6c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c22:	2101      	movs	r1, #1
 8000c24:	482f      	ldr	r0, [pc, #188]	; (8000ce4 <MX_ADC1_Init+0x170>)
 8000c26:	f7ff ff45 	bl	8000ab4 <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c2a:	f7ff fd31 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fd81 	bl	800073c <NVIC_EncodePriority>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2012      	movs	r0, #18
 8000c40:	f7ff fd52 	bl	80006e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c44:	2012      	movs	r0, #18
 8000c46:	f7ff fd31 	bl	80006ac <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c60:	f003 f948 	bl	8003ef4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000c74:	2301      	movs	r3, #1
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c88:	f003 f95a 	bl	8003f40 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8000c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c90:	f7ff fe2a 	bl	80008e8 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000c94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000c98:	f7ff fe36 	bl	8000908 <LL_ADC_DisableIT_EOS>
  LL_ADC_DisableIT_EOSMP(ADC1);
 8000c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ca0:	f7ff fe42 	bl	8000928 <LL_ADC_DisableIT_EOSMP>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_ADC1_Init+0x174>)
 8000cb4:	f003 f8de 	bl	8003e74 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <MX_ADC1_Init+0x178>)
 8000cba:	2106      	movs	r1, #6
 8000cbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cc0:	f7ff fd6f 	bl	80007a2 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4909      	ldr	r1, [pc, #36]	; (8000cec <MX_ADC1_Init+0x178>)
 8000cc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ccc:	f7ff fd9e 	bl	800080c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000cd0:	227f      	movs	r2, #127	; 0x7f
 8000cd2:	4906      	ldr	r1, [pc, #24]	; (8000cec <MX_ADC1_Init+0x178>)
 8000cd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cd8:	f7ff fde2 	bl	80008a0 <LL_ADC_SetChannelSingleDiff>

}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	; 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	50000300 	.word	0x50000300
 8000cec:	04300002 	.word	0x04300002

08000cf0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b090      	sub	sp, #64	; 0x40
 8000cf4:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000cf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000d24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d28:	f7ff ff0c 	bl	8000b44 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d30:	f7ff ff08 	bl	8000b44 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PA4   ------> ADC2_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d34:	2310      	movs	r3, #16
 8000d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f003 fa49 	bl	80041de <LL_GPIO_Init>

  /* ADC2 DMA Init */
  
  /* ADC2 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4837      	ldr	r0, [pc, #220]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d52:	f7ff fdf9 	bl	8000948 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_VERYHIGH);
 8000d56:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4834      	ldr	r0, [pc, #208]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d5e:	f7ff fecd 	bl	8000afc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2102      	movs	r1, #2
 8000d66:	4832      	ldr	r0, [pc, #200]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d68:	f7ff fe14 	bl	8000994 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2102      	movs	r1, #2
 8000d70:	482f      	ldr	r0, [pc, #188]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d72:	f7ff fe33 	bl	80009dc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	2102      	movs	r1, #2
 8000d7a:	482d      	ldr	r0, [pc, #180]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d7c:	f7ff fe52 	bl	8000a24 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 8000d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d84:	2102      	movs	r1, #2
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d88:	f7ff fe70 	bl	8000a6c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 8000d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d90:	2102      	movs	r1, #2
 8000d92:	4827      	ldr	r0, [pc, #156]	; (8000e30 <MX_ADC2_Init+0x140>)
 8000d94:	f7ff fe8e 	bl	8000ab4 <LL_DMA_SetMemorySize>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d98:	f7ff fc7a 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fcca 	bl	800073c <NVIC_EncodePriority>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4619      	mov	r1, r3
 8000dac:	2012      	movs	r0, #18
 8000dae:	f7ff fc9b 	bl	80006e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8000db2:	2012      	movs	r0, #18
 8000db4:	f7ff fc7a 	bl	80006ac <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000dcc:	f003 f892 	bl	8003ef4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000df2:	f003 f8a5 	bl	8003f40 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC2);
 8000df6:	480f      	ldr	r0, [pc, #60]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000df8:	f7ff fd76 	bl	80008e8 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC2);
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000dfe:	f7ff fd83 	bl	8000908 <LL_ADC_DisableIT_EOS>
  LL_ADC_DisableIT_EOSMP(ADC2);
 8000e02:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000e04:	f7ff fd90 	bl	8000928 <LL_ADC_DisableIT_EOSMP>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <MX_ADC2_Init+0x148>)
 8000e0a:	2106      	movs	r1, #6
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000e0e:	f7ff fcc8 	bl	80007a2 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4908      	ldr	r1, [pc, #32]	; (8000e38 <MX_ADC2_Init+0x148>)
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000e18:	f7ff fcf8 	bl	800080c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000e1c:	227f      	movs	r2, #127	; 0x7f
 8000e1e:	4906      	ldr	r1, [pc, #24]	; (8000e38 <MX_ADC2_Init+0x148>)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_ADC2_Init+0x144>)
 8000e22:	f7ff fd3d 	bl	80008a0 <LL_ADC_SetChannelSingleDiff>

}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020000 	.word	0x40020000
 8000e34:	50000100 	.word	0x50000100
 8000e38:	04300002 	.word	0x04300002

08000e3c <__NVIC_GetPriorityGrouping>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <LL_AHB1_GRP1_EnableClock>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000

08000f80 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff ffe3 	bl	8000f50 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f8a:	f7ff ff57 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffa7 	bl	8000ee8 <NVIC_EncodePriority>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f7ff ff78 	bl	8000e94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa4:	200b      	movs	r0, #11
 8000fa6:	f7ff ff57 	bl	8000e58 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000faa:	f7ff ff47 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff97 	bl	8000ee8 <NVIC_EncodePriority>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	200c      	movs	r0, #12
 8000fc0:	f7ff ff68 	bl	8000e94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fc4:	200c      	movs	r0, #12
 8000fc6:	f7ff ff47 	bl	8000e58 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fca:	f7ff ff37 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff87 	bl	8000ee8 <NVIC_EncodePriority>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2010      	movs	r0, #16
 8000fe0:	f7ff ff58 	bl	8000e94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f7ff ff37 	bl	8000e58 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fea:	f7ff ff27 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff77 	bl	8000ee8 <NVIC_EncodePriority>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2011      	movs	r0, #17
 8001000:	f7ff ff48 	bl	8000e94 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001004:	2011      	movs	r0, #17
 8001006:	f7ff ff27 	bl	8000e58 <__NVIC_EnableIRQ>

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <LL_AHB1_GRP1_EnableClock>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001026:	695a      	ldr	r2, [r3, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4013      	ands	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000

08001040 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001072:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001076:	f7ff ffcb 	bl	8001010 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800107a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800107e:	f7ff ffc7 	bl	8001010 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 8001082:	21c0      	movs	r1, #192	; 0xc0
 8001084:	480a      	ldr	r0, [pc, #40]	; (80010b0 <MX_GPIO_Init+0x54>)
 8001086:	f7ff ffdb 	bl	8001040 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800108a:	23c0      	movs	r3, #192	; 0xc0
 800108c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800108e:	2301      	movs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_GPIO_Init+0x54>)
 80010a4:	f003 f89b 	bl	80041de <LL_GPIO_Init>

}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	48000400 	.word	0x48000400

080010b4 <__NVIC_SetPriorityGrouping>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <LL_RCC_HSI_Enable+0x1c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <LL_RCC_HSI_Enable+0x1c>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <LL_RCC_HSI_IsReady+0x20>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b02      	cmp	r3, #2
 800112a:	bf0c      	ite	eq
 800112c:	2301      	moveq	r3, #1
 800112e:	2300      	movne	r3, #0
 8001130:	b2db      	uxtb	r3, r3
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000

08001140 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4904      	ldr	r1, [pc, #16]	; (8001168 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <LL_RCC_SetSysClkSource+0x24>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f023 0203 	bic.w	r2, r3, #3
 800117c:	4904      	ldr	r1, [pc, #16]	; (8001190 <LL_RCC_SetSysClkSource+0x24>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000

08001194 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LL_RCC_GetSysClkSource+0x18>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 030c 	and.w	r3, r3, #12
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c0:	4904      	ldr	r1, [pc, #16]	; (80011d4 <LL_RCC_SetAHBPrescaler+0x24>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000

080011d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011e8:	4904      	ldr	r1, [pc, #16]	; (80011fc <LL_RCC_SetAPB1Prescaler+0x24>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000

08001200 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <LL_RCC_SetAPB2Prescaler+0x24>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001210:	4904      	ldr	r1, [pc, #16]	; (8001224 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000

08001228 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <LL_RCC_SetTIMClockSource+0x34>)
 8001232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	0edb      	lsrs	r3, r3, #27
 8001238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800124a:	4904      	ldr	r1, [pc, #16]	; (800125c <LL_RCC_SetTIMClockSource+0x34>)
 800124c:	4313      	orrs	r3, r2
 800124e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  MODIFY_REG(RCC->CFGR2, (ADCxSource >> 16U), (ADCxSource & 0x0000FFFFU));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <LL_RCC_SetADCClockSource+0x24>)
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001270:	4904      	ldr	r1, [pc, #16]	; (8001284 <LL_RCC_SetADCClockSource+0x24>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_ADCPRE34 */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000

08001288 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_RCC_PLL_Enable+0x1c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <LL_RCC_PLL_Enable+0x1c>)
 8001292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <LL_RCC_PLL_IsReady+0x24>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	430b      	orrs	r3, r1
 80012ec:	4909      	ldr	r1, [pc, #36]	; (8001314 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	f023 020f 	bic.w	r2, r3, #15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	4904      	ldr	r1, [pc, #16]	; (8001314 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001302:	4313      	orrs	r3, r2
 8001304:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LL_APB1_GRP1_EnableClock+0x2c>)
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <LL_APB2_GRP1_EnableClock+0x2c>)
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000

08001378 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <LL_FLASH_SetLatency+0x24>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 0207 	bic.w	r2, r3, #7
 8001388:	4904      	ldr	r1, [pc, #16]	; (800139c <LL_FLASH_SetLatency+0x24>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40022000 	.word	0x40022000

080013a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <LL_FLASH_GetLatency+0x18>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d106      	bne.n	80013d8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80013d6:	e005      	b.n	80013e4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <LL_GPIO_SetOutputPin>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	619a      	str	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff ff96 	bl	8001348 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800141c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001420:	f7ff ff7a 	bl	8001318 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f7ff fe45 	bl	80010b4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f833 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142e:	f7ff fe15 	bl	800105c <MX_GPIO_Init>
  MX_DMA_Init();
 8001432:	f7ff fda5 	bl	8000f80 <MX_DMA_Init>
  MX_ADC1_Init();
 8001436:	f7ff fb9d 	bl	8000b74 <MX_ADC1_Init>
  MX_ADC2_Init();
 800143a:	f7ff fc59 	bl	8000cf0 <MX_ADC2_Init>
  MX_TIM1_Init();
 800143e:	f002 fa31 	bl	80038a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001442:	f002 fa85 	bl	8003950 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001446:	f002 fc29 	bl	8003c9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_7);
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <main+0x7c>)
 800144e:	f7ff ffd1 	bl	80013f4 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <main+0x7c>)
 8001456:	f7ff ffcd 	bl	80013f4 <LL_GPIO_SetOutputPin>

  Osci_Application* app = osci_init();
 800145a:	f000 f86d 	bl	8001538 <osci_init>
 800145e:	6078      	str	r0, [r7, #4]
  app_IT_reference = app;
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <main+0x80>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  osci_transceiver_update(&app->transceiver);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fccf 	bl	8002e0c <osci_transceiver_update>
	  osci_channel_update(&app->xChannelStateMachine);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fba3 	bl	8001bc0 <osci_channel_update>
	  osci_channel_update(&app->yChannelStateMachine);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001480:	3310      	adds	r3, #16
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fb9c 	bl	8001bc0 <osci_channel_update>
	  osci_transceiver_update(&app->transceiver);
 8001488:	e7ed      	b.n	8001466 <main+0x56>
 800148a:	bf00      	nop
 800148c:	48000400 	.word	0x48000400
 8001490:	200000a8 	.word	0x200000a8

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff ff6d 	bl	8001378 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 800149e:	f7ff ff7f 	bl	80013a0 <LL_FLASH_GetLatency>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80014a8:	f000 f83e 	bl	8001528 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80014ac:	f7ff fe26 	bl	80010fc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80014b0:	bf00      	nop
 80014b2:	f7ff fe33 	bl	800111c <LL_RCC_HSI_IsReady>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d1fa      	bne.n	80014b2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80014bc:	2010      	movs	r0, #16
 80014be:	f7ff fe3f 	bl	8001140 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_8);
 80014c2:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff ff02 	bl	80012d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80014cc:	f7ff fedc 	bl	8001288 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80014d0:	bf00      	nop
 80014d2:	f7ff fee9 	bl	80012a8 <LL_RCC_PLL_IsReady>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d1fa      	bne.n	80014d2 <SystemClock_Config+0x3e>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fe67 	bl	80011b0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fe78 	bl	80011d8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fe89 	bl	8001200 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7ff fe3c 	bl	800116c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80014f4:	bf00      	nop
 80014f6:	f7ff fe4d 	bl	8001194 <LL_RCC_GetSysClkSource>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d1fa      	bne.n	80014f6 <SystemClock_Config+0x62>
  {
  
  }
  LL_Init1msTick(32000000);
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <SystemClock_Config+0x90>)
 8001502:	f003 fa23 	bl	800494c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001506:	2004      	movs	r0, #4
 8001508:	f7ff ff58 	bl	80013bc <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(32000000);
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <SystemClock_Config+0x90>)
 800150e:	f003 fa4f 	bl	80049b0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fe88 	bl	8001228 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
 8001518:	f44f 7080 	mov.w	r0, #256	; 0x100
 800151c:	f7ff fea0 	bl	8001260 <LL_RCC_SetADCClockSource>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	01e84800 	.word	0x01e84800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <osci_init>:
#include "osci_data_structures.h"
#include "osci_transceiver.h"
#include "osci_channel_state_machine.h"
#include "osci_callback.h"

Osci_Application* osci_init(){
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af08      	add	r7, sp, #32

	Osci_Application* app = calloc(sizeof *app, 1);
 800153e:	2101      	movs	r1, #1
 8001540:	f641 1064 	movw	r0, #6500	; 0x1964
 8001544:	f003 fa44 	bl	80049d0 <calloc>
 8001548:	4603      	mov	r3, r0
 800154a:	607b      	str	r3, [r7, #4]
	osci_transceiver_init(&app->transceiver, USART2, DMA1, LL_DMA_CHANNEL_6, LL_DMA_CHANNEL_7, &app->xChannelStateMachine, &app->yChannelStateMachine);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f603 02bc 	addw	r2, r3, #2236	; 0x8bc
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800155a:	3310      	adds	r3, #16
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	9201      	str	r2, [sp, #4]
 8001560:	2307      	movs	r3, #7
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2306      	movs	r3, #6
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <osci_init+0xa0>)
 8001568:	491c      	ldr	r1, [pc, #112]	; (80015dc <osci_init+0xa4>)
 800156a:	f001 fc0f 	bl	8002d8c <osci_transceiver_init>
	osci_channel_init(&app->xChannelStateMachine, TIM1, DMA1, LL_DMA_CHANNEL_1, ADC1, LL_ADC_AWD1, osci_channel_monitoring_callback_x, osci_channel_measuring_callback_x, osci_channel_measurement_complete_callback_x, osci_channel_awd_threshold_callback_x, &app->transceiver);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f603 00bc 	addw	r0, r3, #2236	; 0x8bc
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	9306      	str	r3, [sp, #24]
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <osci_init+0xa8>)
 800157a:	9305      	str	r3, [sp, #20]
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <osci_init+0xac>)
 800157e:	9304      	str	r3, [sp, #16]
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <osci_init+0xb0>)
 8001582:	9303      	str	r3, [sp, #12]
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <osci_init+0xb4>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <osci_init+0xb8>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2301      	movs	r3, #1
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <osci_init+0xa0>)
 8001596:	4917      	ldr	r1, [pc, #92]	; (80015f4 <osci_init+0xbc>)
 8001598:	f000 fa86 	bl	8001aa8 <osci_channel_init>
	osci_channel_init(&app->yChannelStateMachine, TIM2, DMA1, LL_DMA_CHANNEL_2, ADC2, LL_ADC_AWD2, osci_channel_monitoring_callback_y, osci_channel_measuring_callback_y, osci_channel_measurement_complete_callback_y, osci_channel_awd_threshold_callback_y, &app->transceiver);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f503 5088 	add.w	r0, r3, #4352	; 0x1100
 80015a2:	3010      	adds	r0, #16
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	9306      	str	r3, [sp, #24]
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <osci_init+0xc0>)
 80015aa:	9305      	str	r3, [sp, #20]
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <osci_init+0xc4>)
 80015ae:	9304      	str	r3, [sp, #16]
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <osci_init+0xc8>)
 80015b2:	9303      	str	r3, [sp, #12]
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <osci_init+0xcc>)
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <osci_init+0xd0>)
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <osci_init+0xd4>)
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2302      	movs	r3, #2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <osci_init+0xa0>)
 80015c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015c8:	f000 fa6e 	bl	8001aa8 <osci_channel_init>

	return app;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40004400 	.word	0x40004400
 80015e0:	08001e63 	.word	0x08001e63
 80015e4:	08001d43 	.word	0x08001d43
 80015e8:	08001cff 	.word	0x08001cff
 80015ec:	08001cd3 	.word	0x08001cd3
 80015f0:	7dc00000 	.word	0x7dc00000
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	08001e8b 	.word	0x08001e8b
 80015fc:	08001e19 	.word	0x08001e19
 8001600:	08001db5 	.word	0x08001db5
 8001604:	08001d85 	.word	0x08001d85
 8001608:	0017fffe 	.word	0x0017fffe
 800160c:	50000100 	.word	0x50000100

08001610 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8001610:	b490      	push	{r4, r7}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, __ADC_MASK_SHIFT(AWDy, ADC_AWD_CRX_REGOFFSET_MASK)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	330c      	adds	r3, #12
 8001620:	4618      	mov	r0, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001628:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800162c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	fa92 f2a2 	rbit	r2, r2
 8001634:	613a      	str	r2, [r7, #16]
  return result;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	fa23 f102 	lsr.w	r1, r3, r2
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0202 	and.w	r2, r3, #2
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4403      	add	r3, r0
 8001656:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8001658:	6822      	ldr	r2, [r4, #0]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <LL_ADC_SetAnalogWDMonitChannels+0x68>)
 800165e:	400b      	ands	r3, r1
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	400b      	ands	r3, r1
 800166a:	4313      	orrs	r3, r2
 800166c:	6023      	str	r3, [r4, #0]
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bc90      	pop	{r4, r7}
 8001676:	4770      	bx	lr
 8001678:	7dc7fffe 	.word	0x7dc7fffe

0800167c <LL_ADC_SetAnalogWDThresholds>:
{
 800167c:	b490      	push	{r4, r7}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, __ADC_MASK_SHIFT(AWDy, ADC_AWD_TRX_REGOFFSET_MASK));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3320      	adds	r3, #32
 800168e:	4619      	mov	r1, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001696:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800169a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	fa92 f2a2 	rbit	r2, r2
 80016a2:	613a      	str	r2, [r7, #16]
  return result;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	40d3      	lsrs	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	fa93 f3a3 	rbit	r3, r3
 80016c6:	61bb      	str	r3, [r7, #24]
  return result;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	408b      	lsls	r3, r1
 80016d6:	4313      	orrs	r3, r2
 80016d8:	6023      	str	r3, [r4, #0]
}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc90      	pop	{r4, r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_Enable>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_REG_StopConversion>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800171c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001720:	f043 0210 	orr.w	r2, r3, #16
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_REG_IsConversionOngoing>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b04      	cmp	r3, #4
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_ADC_ClearFlag_AWD1>:
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	601a      	str	r2, [r3, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_ClearFlag_AWD2>:
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_EnableIT_AWD1>:
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	605a      	str	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_EnableIT_AWD2>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	605a      	str	r2, [r3, #4]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_DisableIT_EOC>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 0204 	bic.w	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	605a      	str	r2, [r3, #4]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_DisableIT_EOS>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 0208 	bic.w	r2, r3, #8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	605a      	str	r2, [r3, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_DisableIT_EOSMP>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 0202 	bic.w	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <osci_adc_init>:
 */

#include "osci_channel_state_machine.h"
#include "osci_adc.h"

void osci_adc_init(Osci_ChannelStateMachine* csm){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	LL_ADC_Enable(csm->adc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff51 	bl	80016e4 <LL_ADC_Enable>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <osci_adc_stop>:

void osci_adc_stop(Osci_ChannelStateMachine* csm){
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StopConversion(csm->adc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff58 	bl	800170c <LL_ADC_REG_StopConversion>
	while(LL_ADC_REG_IsConversionOngoing(csm->adc)) {;};
 800185c:	bf00      	nop
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff66 	bl	8001734 <LL_ADC_REG_IsConversionOngoing>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f7      	bne.n	800185e <osci_adc_stop+0x14>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <osci_adc_reconfigure_for_monitoring>:

void osci_adc_reconfigure_for_monitoring(Osci_ChannelStateMachine* csm){
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	csm->adc->CFGR &= ~0x1; // Disable DMA requests
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	60da      	str	r2, [r3, #12]

	LL_ADC_DisableIT_EOS(csm->adc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ffab 	bl	80017f0 <LL_ADC_DisableIT_EOS>
	LL_ADC_DisableIT_EOC(csm->adc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff96 	bl	80017d0 <LL_ADC_DisableIT_EOC>
	LL_ADC_DisableIT_EOSMP(csm->adc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffb1 	bl	8001810 <LL_ADC_DisableIT_EOSMP>



	switch(csm->awd){
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <osci_adc_reconfigure_for_monitoring+0xfc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d01f      	beq.n	80018f8 <osci_adc_reconfigure_for_monitoring+0x80>
 80018b8:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <osci_adc_reconfigure_for_monitoring+0x100>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d000      	beq.n	80018c0 <osci_adc_reconfigure_for_monitoring+0x48>
			LL_ADC_SetAnalogWDThresholds(csm->adc, csm->awd, LL_ADC_AWD_THRESHOLD_HIGH, floor(csm->params.triggerLevel/16.0f));
			LL_ADC_ClearFlag_AWD2(csm->adc);
			LL_ADC_EnableIT_AWD2(csm->adc);
			break;
	}
}
 80018be:	e054      	b.n	800196a <osci_adc_reconfigure_for_monitoring+0xf2>
			LL_ADC_SetAnalogWDMonitChannels(csm->adc, csm->awd, LL_ADC_AWD_ALL_CHANNELS_REG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a2c      	ldr	r2, [pc, #176]	; (800197c <osci_adc_reconfigure_for_monitoring+0x104>)
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff fea0 	bl	8001610 <LL_ADC_SetAnalogWDMonitChannels>
			LL_ADC_SetAnalogWDThresholds(csm->adc, csm->awd, LL_ADC_AWD_THRESHOLD_HIGH, csm->params.triggerLevel);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	4a28      	ldr	r2, [pc, #160]	; (8001980 <osci_adc_reconfigure_for_monitoring+0x108>)
 80018de:	f7ff fecd 	bl	800167c <LL_ADC_SetAnalogWDThresholds>
			LL_ADC_ClearFlag_AWD1(csm->adc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff37 	bl	800175a <LL_ADC_ClearFlag_AWD1>
			LL_ADC_EnableIT_AWD1(csm->adc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff4d 	bl	8001790 <LL_ADC_EnableIT_AWD1>
			break;
 80018f6:	e038      	b.n	800196a <osci_adc_reconfigure_for_monitoring+0xf2>
			csm->adc->AWD2CR |= 0x2; // Enable monitoring of channel 1 of adc
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	f042 0202 	orr.w	r2, r2, #2
 8001908:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			LL_ADC_SetAnalogWDThresholds(csm->adc, csm->awd, LL_ADC_AWD_THRESHOLD_HIGH, floor(csm->params.triggerLevel/16.0f));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001920:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001924:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001928:	ee16 0a90 	vmov	r0, s13
 800192c:	f7fe fdb0 	bl	8000490 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ec43 2b10 	vmov	d0, r2, r3
 8001938:	f003 f90a 	bl	8004b50 <floor>
 800193c:	ec53 2b10 	vmov	r2, r3, d0
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7fe fe84 	bl	8000650 <__aeabi_d2uiz>
 8001948:	4603      	mov	r3, r0
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <osci_adc_reconfigure_for_monitoring+0x108>)
 800194c:	4629      	mov	r1, r5
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fe94 	bl	800167c <LL_ADC_SetAnalogWDThresholds>
			LL_ADC_ClearFlag_AWD2(csm->adc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff0b 	bl	8001774 <LL_ADC_ClearFlag_AWD2>
			LL_ADC_EnableIT_AWD2(csm->adc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff24 	bl	80017b0 <LL_ADC_EnableIT_AWD2>
			break;
 8001968:	bf00      	nop
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	0017fffe 	.word	0x0017fffe
 8001978:	7dc00000 	.word	0x7dc00000
 800197c:	0087fffe 	.word	0x0087fffe
 8001980:	0fff0000 	.word	0x0fff0000

08001984 <osci_adc_reconfigure_for_measuring>:

void osci_adc_reconfigure_for_measuring(Osci_ChannelStateMachine* csm){
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	csm->adc->CFGR |= 0x1; // Enable DMA requests
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	60da      	str	r2, [r3, #12]
			break;
		case LL_ADC_AWD2:
			LL_ADC_DisableIT_AWD2(csm->adc);
			break;
	}*/
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <osci_adc_set_awd_callback>:

void osci_adc_set_awd_callback(Osci_ChannelStateMachine* csm){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	switch(csm->awd){
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <osci_adc_set_awd_callback+0x40>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <osci_adc_set_awd_callback+0x26>
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <osci_adc_set_awd_callback+0x44>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d000      	beq.n	80019c2 <osci_adc_set_awd_callback+0x1a>
			break;
		case LL_ADC_AWD2:
			osci_adc_awd2_callback = csm->awd_threshold_callback;
			break;
	}
}
 80019c0:	e00b      	b.n	80019da <osci_adc_set_awd_callback+0x32>
			osci_adc_awd1_callback = csm->awd_threshold_callback;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <osci_adc_set_awd_callback+0x48>)
 80019ca:	6013      	str	r3, [r2, #0]
			break;
 80019cc:	e005      	b.n	80019da <osci_adc_set_awd_callback+0x32>
			osci_adc_awd2_callback = csm->awd_threshold_callback;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 3848 	ldr.w	r3, [r3, #2120]	; 0x848
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <osci_adc_set_awd_callback+0x4c>)
 80019d6:	6013      	str	r3, [r2, #0]
			break;
 80019d8:	bf00      	nop
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	0017fffe 	.word	0x0017fffe
 80019ec:	7dc00000 	.word	0x7dc00000
 80019f0:	200000a4 	.word	0x200000a4
 80019f4:	200000ac 	.word	0x200000ac

080019f8 <osci_callback_set_monitoring_callbacks>:
#include "osci_callback.h"
#include "osci_adc.h"
#include "osci_channel_state_machine.h"


void osci_callback_set_monitoring_callbacks(Osci_ChannelStateMachine* csm){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	osci_timer_set_update_callback(csm, csm->monitoring_callback);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 ff41 	bl	8002890 <osci_timer_set_update_callback>
	osci_adc_set_awd_callback(csm);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffca 	bl	80019a8 <osci_adc_set_awd_callback>
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <osci_callback_set_measuring_callbacks>:

void osci_callback_set_measuring_callbacks(Osci_ChannelStateMachine* csm){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	osci_timer_set_update_callback(csm, csm->measuring_callback);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 ff2f 	bl	8002890 <osci_timer_set_update_callback>
	osci_dma_set_TC_callback(csm);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fe54 	bl	80026e0 <osci_dma_set_TC_callback>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <LL_ADC_REG_StartConversion>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	605a      	str	r2, [r3, #4]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <osci_channel_init>:
 *  Created on: 24. 12. 2019
 *      Author: dot
 */
#include "osci_channel_state_machine.h"

void osci_channel_init(Osci_ChannelStateMachine* csm, TIM_TypeDef* timer, DMA_TypeDef* dma, uint32_t dmaChannel, ADC_TypeDef* adc, uint32_t awd, void (*monitoring_callback) (Osci_Application*), void (*measuring_callback) (Osci_Application*), void (*measurement_complete_callback) (Osci_Application*), void (*awd_threshold_callback) (Osci_Application*),Osci_Transceiver* transceiver){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
	// Assign pointers.
	csm->timer = timer;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	619a      	str	r2, [r3, #24]
	csm->adc = adc;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
	csm->awd = awd;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
	csm->dma = dma;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	61da      	str	r2, [r3, #28]
	csm->dmaChannel = dmaChannel;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
	csm->monitoring_callback = monitoring_callback;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a3a      	ldr	r2, [r7, #32]
 8001ad8:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
	csm->measuring_callback = measuring_callback;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f8c3 2840 	str.w	r2, [r3, #2112]	; 0x840
	csm->measurement_complete_callback = measurement_complete_callback;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae8:	f8c3 2844 	str.w	r2, [r3, #2116]	; 0x844
	csm->awd_threshold_callback = awd_threshold_callback;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af0:	f8c3 2848 	str.w	r2, [r3, #2120]	; 0x848
	csm->transceiver = transceiver;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af8:	f8c3 2850 	str.w	r2, [r3, #2128]	; 0x850

	// Set call-backs, which are dummies at this point, because enabling update event on timer generates an interrupt, so the call-backs must be non-null.
	osci_callback_set_monitoring_callbacks(csm);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff ff7b 	bl	80019f8 <osci_callback_set_monitoring_callbacks>
	// Initialize nested structures.
	osci_timer_init(csm);
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 feb1 	bl	800286a <osci_timer_init>
	osci_dma_channel_init(csm);
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fd7f 	bl	800260c <osci_dma_channel_init>
	osci_adc_init(csm);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fe8e 	bl	8001830 <osci_adc_init>

	// Make sure state machine starts in the proper state.
	osci_channel_shutdown(csm);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f808 	bl	8001b2a <osci_channel_shutdown>
	csm->state = OSCI_CHANNEL_STATE_SHUTDOWN;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <osci_channel_shutdown>:

void osci_channel_shutdown(Osci_ChannelStateMachine* csm){
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	//osci_timer_stop(csm);
	osci_adc_stop(csm);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fe89 	bl	800184a <osci_adc_stop>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <osci_channel_start_monitoring>:

void osci_channel_start_monitoring(Osci_ChannelStateMachine* csm){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	osci_channel_shutdown(csm);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffee 	bl	8001b2a <osci_channel_shutdown>
	osci_timer_reconfigure_for_monitoring(csm);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fe79 	bl	8002846 <osci_timer_reconfigure_for_monitoring>
	osci_adc_reconfigure_for_monitoring(csm);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fe8f 	bl	8001878 <osci_adc_reconfigure_for_monitoring>
	osci_dma_channel_reconfigure_for_monitoring(csm);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fdb0 	bl	80026c0 <osci_dma_channel_reconfigure_for_monitoring>
	osci_callback_set_monitoring_callbacks(csm);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff49 	bl	80019f8 <osci_callback_set_monitoring_callbacks>
	osci_timer_start(csm);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fe46 	bl	80027f8 <osci_timer_start>

	csm->state = OSCI_CHANNEL_STATE_MONITORING;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <osci_channel_start_measuring>:

void osci_channel_start_measuring(Osci_ChannelStateMachine* csm){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	osci_channel_shutdown(csm);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffd0 	bl	8001b2a <osci_channel_shutdown>
	osci_timer_reconfigure_for_measuring(csm);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fe47 	bl	800281e <osci_timer_reconfigure_for_measuring>
	osci_adc_reconfigure_for_measuring(csm);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fef7 	bl	8001984 <osci_adc_reconfigure_for_measuring>
	osci_dma_channel_reconfigure_for_measuring(csm);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fd60 	bl	800265c <osci_dma_channel_reconfigure_for_measuring>
	osci_callback_set_measuring_callbacks(csm);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff3d 	bl	8001a1c <osci_callback_set_measuring_callbacks>
	csm->measurements_left = NUM_SAMPLES;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
	osci_timer_start(csm);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fe24 	bl	80027f8 <osci_timer_start>

	csm->state = OSCI_CHANNEL_STATE_MEASURING;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <osci_channel_update>:
	csm->events.shutdown = FALSE;
	csm->events.start_measuring = FALSE;
	csm->events.start_monitoring = FALSE;
}

void osci_channel_update(Osci_ChannelStateMachine* csm){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	switch(csm->state){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d021      	beq.n	8001c16 <osci_channel_update+0x56>
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d302      	bcc.n	8001bdc <osci_channel_update+0x1c>
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d047      	beq.n	8001c6a <osci_channel_update+0xaa>
 8001bda:	e077      	b.n	8001ccc <osci_channel_update+0x10c>
		case OSCI_CHANNEL_STATE_SHUTDOWN:
			// Clear invalid event flags
			csm->events.measurement_complete = FALSE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
			csm->events.shutdown = FALSE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c
			csm->events.start_measuring = FALSE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 284e 	strb.w	r2, [r3, #2126]	; 0x84e

			// Check for transitions
			if(csm->events.start_monitoring) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 384d 	ldrb.w	r3, [r3, #2125]	; 0x84d
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d061      	beq.n	8001cc2 <osci_channel_update+0x102>
				osci_channel_start_monitoring(csm);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff9e 	bl	8001b40 <osci_channel_start_monitoring>
				csm->state = OSCI_CHANNEL_STATE_MONITORING;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
				csm->events.start_monitoring = FALSE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
			}
			break;
 8001c14:	e055      	b.n	8001cc2 <osci_channel_update+0x102>
		case OSCI_CHANNEL_STATE_MONITORING:
			// Clear invalid event flags
			csm->events.measurement_complete = FALSE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
			csm->events.start_monitoring = FALSE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d

			// Check for transitions
			if(csm->events.shutdown) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 384c 	ldrb.w	r3, [r3, #2124]	; 0x84c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00b      	beq.n	8001c48 <osci_channel_update+0x88>
				osci_channel_shutdown(csm);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff7a 	bl	8001b2a <osci_channel_shutdown>
				csm->state = OSCI_CHANNEL_STATE_SHUTDOWN;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
				csm->events.shutdown = FALSE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c
				return;
 8001c46:	e041      	b.n	8001ccc <osci_channel_update+0x10c>
			}
			if(csm->events.start_measuring) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 384e 	ldrb.w	r3, [r3, #2126]	; 0x84e
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d039      	beq.n	8001cc6 <osci_channel_update+0x106>
				osci_channel_start_measuring(csm);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff92 	bl	8001b7c <osci_channel_start_measuring>
				csm->state = OSCI_CHANNEL_STATE_MEASURING;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
				csm->events.start_measuring = FALSE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 284e 	strb.w	r2, [r3, #2126]	; 0x84e
				return;
 8001c68:	e030      	b.n	8001ccc <osci_channel_update+0x10c>
			}
			break;
		case OSCI_CHANNEL_STATE_MEASURING:
			// Clear invalid event flags
			csm->events.start_measuring = FALSE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 284e 	strb.w	r2, [r3, #2126]	; 0x84e
			csm->events.start_monitoring = FALSE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d

			// Check for transitions
			if(csm->events.shutdown) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 384c 	ldrb.w	r3, [r3, #2124]	; 0x84c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <osci_channel_update+0xd4>
				osci_channel_shutdown(csm);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff50 	bl	8001b2a <osci_channel_shutdown>
				csm->state = OSCI_CHANNEL_STATE_SHUTDOWN;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
				return;
 8001c92:	e01b      	b.n	8001ccc <osci_channel_update+0x10c>
			}
			if(csm->events.measurement_complete) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 384f 	ldrb.w	r3, [r3, #2127]	; 0x84f
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <osci_channel_update+0x10a>
				osci_channel_shutdown(csm);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff43 	bl	8001b2a <osci_channel_shutdown>
				csm->state = OSCI_CHANNEL_STATE_SHUTDOWN;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
				csm->transceiver->events.send_requested = TRUE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 3850 	ldr.w	r3, [r3, #2128]	; 0x850
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
				csm->events.measurement_complete = FALSE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
				return;
 8001cc0:	e004      	b.n	8001ccc <osci_channel_update+0x10c>
			break;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <osci_channel_update+0x10c>
			break;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <osci_channel_update+0x10c>
			}
			break;
 8001cca:	bf00      	nop
	}
}
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <osci_channel_monitoring_callback_x>:

void osci_channel_monitoring_callback_x(Osci_Application* app){
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
	// Only applies in monitoring state
	if (app->xChannelStateMachine.state != OSCI_CHANNEL_STATE_MONITORING){
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001ce0:	3314      	adds	r3, #20
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <osci_channel_monitoring_callback_x+0x24>
		return;
	}

	LL_ADC_REG_StartConversion(app->xChannelStateMachine.adc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fea6 	bl	8001a40 <LL_ADC_REG_StartConversion>
 8001cf4:	e000      	b.n	8001cf8 <osci_channel_monitoring_callback_x+0x26>
		return;
 8001cf6:	bf00      	nop
}
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <osci_channel_measuring_callback_x>:

void osci_channel_measuring_callback_x(Osci_Application* app){
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	// Only applies in measuring state
	if (app->xChannelStateMachine.state != OSCI_CHANNEL_STATE_MEASURING){
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d112      	bne.n	8001d3a <osci_channel_measuring_callback_x+0x3c>
		return;
	}

	if(app->xChannelStateMachine.measurements_left > 0){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00e      	beq.n	8001d3c <osci_channel_measuring_callback_x+0x3e>
		LL_ADC_REG_StartConversion(app->xChannelStateMachine.adc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fe8b 	bl	8001a40 <LL_ADC_REG_StartConversion>
		app->xChannelStateMachine.measurements_left--;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001d38:	e000      	b.n	8001d3c <osci_channel_measuring_callback_x+0x3e>
		return;
 8001d3a:	bf00      	nop
	}else{
		//osci_timer_stop(&app->xChannelStateMachine);
	}
}
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <osci_channel_measurement_complete_callback_x>:

void osci_channel_measurement_complete_callback_x(Osci_Application* app){
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	// Only applies in measuring state
	if (app->xChannelStateMachine.state != OSCI_CHANNEL_STATE_MEASURING){
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001d50:	3314      	adds	r3, #20
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d111      	bne.n	8001d7c <osci_channel_measurement_complete_callback_x+0x3a>
		return;
	}

	app->xChannelStateMachine.measurement = app->xChannelStateMachine.measurementDMABuffer;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f602 40f4 	addw	r0, r2, #3316	; 0xcf4
 8001d60:	f603 03f4 	addw	r3, r3, #2292	; 0x8f4
 8001d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f002 fe63 	bl	8004a34 <memcpy>
	app->xChannelStateMachine.events.measurement_complete = TRUE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001d74:	330b      	adds	r3, #11
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	e000      	b.n	8001d7e <osci_channel_measurement_complete_callback_x+0x3c>
		return;
 8001d7c:	bf00      	nop
}
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <osci_channel_monitoring_callback_y>:

void osci_channel_monitoring_callback_y(Osci_Application* app){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	// Only applies in monitoring state
	if (app->yChannelStateMachine.state != OSCI_CHANNEL_STATE_MONITORING){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f503 53ca 	add.w	r3, r3, #6464	; 0x1940
 8001d92:	3308      	adds	r3, #8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <osci_channel_monitoring_callback_y+0x28>
		return;
	}

	LL_ADC_REG_StartConversion(app->yChannelStateMachine.adc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001da0:	3318      	adds	r3, #24
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fe4b 	bl	8001a40 <LL_ADC_REG_StartConversion>
 8001daa:	e000      	b.n	8001dae <osci_channel_monitoring_callback_y+0x2a>
		return;
 8001dac:	bf00      	nop
}
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <osci_channel_measuring_callback_y>:

void osci_channel_measuring_callback_y(Osci_Application* app){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	// Only applies in measuring state
	if (app->yChannelStateMachine.state != OSCI_CHANNEL_STATE_MEASURING){
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f503 53ca 	add.w	r3, r3, #6464	; 0x1940
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d122      	bne.n	8001e10 <osci_channel_measuring_callback_y+0x5c>
		return;
	}

	if(app->yChannelStateMachine.measurements_left > 0){
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <osci_channel_measuring_callback_y+0x4c>
		LL_ADC_REG_StartConversion(app->yChannelStateMachine.adc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001dde:	3318      	adds	r3, #24
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fe2c 	bl	8001a40 <LL_ADC_REG_StartConversion>
		app->yChannelStateMachine.measurements_left--;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e008      	b.n	8001e12 <osci_channel_measuring_callback_y+0x5e>
	}else{
		osci_timer_stop(&app->yChannelStateMachine);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e06:	3310      	adds	r3, #16
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fce8 	bl	80027de <osci_timer_stop>
 8001e0e:	e000      	b.n	8001e12 <osci_channel_measuring_callback_y+0x5e>
		return;
 8001e10:	bf00      	nop
	}
}
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <osci_channel_measurement_complete_callback_y>:

void osci_channel_measurement_complete_callback_y(Osci_Application* app){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	// Only applies in measuring state
	if (app->yChannelStateMachine.state != OSCI_CHANNEL_STATE_MEASURING){
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f503 53ca 	add.w	r3, r3, #6464	; 0x1940
 8001e26:	3308      	adds	r3, #8
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d115      	bne.n	8001e5a <osci_channel_measurement_complete_callback_y+0x42>
		return;
	}

	app->yChannelStateMachine.measurement = app->yChannelStateMachine.measurementDMABuffer;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f503 52aa 	add.w	r2, r3, #5440	; 0x1540
 8001e34:	3208      	adds	r2, #8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8001e3c:	3308      	adds	r3, #8
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e46:	461a      	mov	r2, r3
 8001e48:	f002 fdf4 	bl	8004a34 <memcpy>
	app->yChannelStateMachine.events.measurement_complete = TRUE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f503 53ca 	add.w	r3, r3, #6464	; 0x1940
 8001e52:	331f      	adds	r3, #31
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e000      	b.n	8001e5c <osci_channel_measurement_complete_callback_y+0x44>
		return;
 8001e5a:	bf00      	nop
}
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <osci_channel_awd_threshold_callback_x>:

void osci_channel_awd_threshold_callback_x(Osci_Application* app){
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
	LL_ADC_DisableIT_AWD1(app->xChannelStateMachine.adc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdf9 	bl	8001a68 <LL_ADC_DisableIT_AWD1>
	//osci_timer_stop(&app->xChannelStateMachine);
	app->xChannelStateMachine.events.start_measuring = TRUE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e7c:	330a      	adds	r3, #10
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <osci_channel_awd_threshold_callback_y>:

void osci_channel_awd_threshold_callback_y(Osci_Application* app){
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	LL_ADC_DisableIT_AWD2(app->yChannelStateMachine.adc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001e98:	3318      	adds	r3, #24
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fdf3 	bl	8001a88 <LL_ADC_DisableIT_AWD2>
	//osci_timer_stop(&app->yChannelStateMachine);
	app->yChannelStateMachine.events.start_measuring = TRUE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f503 53ca 	add.w	r3, r3, #6464	; 0x1940
 8001ea8:	331e      	adds	r3, #30
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <fill_ranges>:
 */
#include "osci_defines.h"
#include "osci_data_structures.h"
#include "osci_configurator.h"

void fill_ranges(Osci_Settings* settings, Osci_CalculatedParameters* new_parameters){
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	switch(settings->xVoltageRange){
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec8:	2b0a      	cmp	r3, #10
 8001eca:	d00a      	beq.n	8001ee2 <fill_ranges+0x2a>
 8001ecc:	2b14      	cmp	r3, #20
 8001ece:	d00f      	beq.n	8001ef0 <fill_ranges+0x38>
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d114      	bne.n	8001efe <fill_ranges+0x46>
		case 5:
			new_parameters->divider_max_volts_x = OSCI_MEASUREMENT_MAX_X_WITH_RANGE_5;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <fill_ranges+0x90>)
 8001ed8:	609a      	str	r2, [r3, #8]
			new_parameters->x_active_range = 5.0f;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <fill_ranges+0x90>)
 8001ede:	621a      	str	r2, [r3, #32]
			break;
 8001ee0:	e00d      	b.n	8001efe <fill_ranges+0x46>
		case 10:
			new_parameters->divider_max_volts_x = OSCI_MEASUREMENT_MAX_X_WITH_RANGE_10;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <fill_ranges+0x94>)
 8001ee6:	609a      	str	r2, [r3, #8]
			new_parameters->x_active_range = 10.0f;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <fill_ranges+0x94>)
 8001eec:	621a      	str	r2, [r3, #32]
			break;
 8001eee:	e006      	b.n	8001efe <fill_ranges+0x46>
		case 20:
			new_parameters->divider_max_volts_x = OSCI_MEASUREMENT_MAX_X_WITH_RANGE_20;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <fill_ranges+0x98>)
 8001ef4:	609a      	str	r2, [r3, #8]
			new_parameters->x_active_range = 20.0f;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <fill_ranges+0x98>)
 8001efa:	621a      	str	r2, [r3, #32]
			break;
 8001efc:	bf00      	nop
	}
	switch(settings->yVoltageRange){
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d00b      	beq.n	8001f20 <fill_ranges+0x68>
 8001f08:	2b14      	cmp	r3, #20
 8001f0a:	d010      	beq.n	8001f2e <fill_ranges+0x76>
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d000      	beq.n	8001f12 <fill_ranges+0x5a>
		case 20:
			new_parameters->divider_max_volts_y = OSCI_MEASUREMENT_MAX_Y_WITH_RANGE_20;
			new_parameters->y_active_range = 20.0f;
			break;
	}
}
 8001f10:	e014      	b.n	8001f3c <fill_ranges+0x84>
			new_parameters->divider_max_volts_y = OSCI_MEASUREMENT_MAX_Y_WITH_RANGE_5;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <fill_ranges+0x90>)
 8001f16:	60da      	str	r2, [r3, #12]
			new_parameters->y_active_range = 5.0f;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <fill_ranges+0x90>)
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f1e:	e00d      	b.n	8001f3c <fill_ranges+0x84>
			new_parameters->divider_max_volts_y = OSCI_MEASUREMENT_MAX_Y_WITH_RANGE_10;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <fill_ranges+0x94>)
 8001f24:	60da      	str	r2, [r3, #12]
			new_parameters->y_active_range = 10.0f;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <fill_ranges+0x94>)
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f2c:	e006      	b.n	8001f3c <fill_ranges+0x84>
			new_parameters->divider_max_volts_y = OSCI_MEASUREMENT_MAX_Y_WITH_RANGE_20;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <fill_ranges+0x98>)
 8001f32:	60da      	str	r2, [r3, #12]
			new_parameters->y_active_range = 20.0f;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <fill_ranges+0x98>)
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001f3a:	bf00      	nop
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40a00000 	.word	0x40a00000
 8001f4c:	41200000 	.word	0x41200000
 8001f50:	41a00000 	.word	0x41a00000

08001f54 <fill_sensitivity_and_offset>:
void fill_sensitivity_and_offset(Osci_Settings* settings, Osci_CalculatedParameters* new_parameters){
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
	new_parameters->levels_per_volt_x = OSCI_MEASUREMENT_MAX_LEVELS/new_parameters->x_active_range;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f64:	eddf 6a39 	vldr	s13, [pc, #228]	; 800204c <fill_sensitivity_and_offset+0xf8>
 8001f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	new_parameters->divider_bypass_scaling_x = new_parameters->x_active_range/new_parameters->divider_max_volts_x;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	edc3 7a00 	vstr	s15, [r3]
	new_parameters->sensitivity_conversion_x = OSCI_MEASUREMENT_MAX_LEVELS/(settings->xSensitivity*settings->xGraticuleDivisions*new_parameters->levels_per_volt_x);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001faa:	eddf 6a28 	vldr	s13, [pc, #160]	; 800204c <fill_sensitivity_and_offset+0xf8>
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	edc3 7a04 	vstr	s15, [r3, #16]
	new_parameters->offset_conversion_x = new_parameters->sensitivity_conversion_x*new_parameters->levels_per_volt_x;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	edc3 7a06 	vstr	s15, [r3, #24]

	new_parameters->levels_per_volt_y = OSCI_MEASUREMENT_MAX_LEVELS/new_parameters->y_active_range;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001fd4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800204c <fill_sensitivity_and_offset+0xf8>
 8001fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	new_parameters->divider_bypass_scaling_y = new_parameters->y_active_range/new_parameters->divider_max_volts_y;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	edc3 7a01 	vstr	s15, [r3, #4]
	new_parameters->sensitivity_conversion_y = OSCI_MEASUREMENT_MAX_LEVELS/(settings->ySensitivity*settings->yGraticuleDivisions*new_parameters->levels_per_volt_y);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800204c <fill_sensitivity_and_offset+0xf8>
 800201e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	edc3 7a05 	vstr	s15, [r3, #20]
	new_parameters->offset_conversion_y = new_parameters->sensitivity_conversion_y*new_parameters->levels_per_volt_y;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	ed93 7a05 	vldr	s14, [r3, #20]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	457ff000 	.word	0x457ff000

08002050 <fill_thresholds>:
void fill_thresholds(Osci_Settings* settings, Osci_CalculatedParameters* new_parameters){
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
	new_parameters->xThresholdInLevels = floor(new_parameters->levels_per_volt_x*settings->xtriggerLevel);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	edd3 7a06 	vldr	s15, [r3, #24]
 8002066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206a:	ee17 0a90 	vmov	r0, s15
 800206e:	f7fe fa0f 	bl	8000490 <__aeabi_f2d>
 8002072:	4603      	mov	r3, r0
 8002074:	460c      	mov	r4, r1
 8002076:	ec44 3b10 	vmov	d0, r3, r4
 800207a:	f002 fd69 	bl	8004b50 <floor>
 800207e:	ec54 3b10 	vmov	r3, r4, d0
 8002082:	4618      	mov	r0, r3
 8002084:	4621      	mov	r1, r4
 8002086:	f7fe fae3 	bl	8000650 <__aeabi_d2uiz>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
	new_parameters->yThresholdInLevels = floor(new_parameters->levels_per_volt_y*settings->ytriggerLevel);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	edd3 7a07 	vldr	s15, [r3, #28]
 800209c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a0:	ee17 0a90 	vmov	r0, s15
 80020a4:	f7fe f9f4 	bl	8000490 <__aeabi_f2d>
 80020a8:	4603      	mov	r3, r0
 80020aa:	460c      	mov	r4, r1
 80020ac:	ec44 3b10 	vmov	d0, r3, r4
 80020b0:	f002 fd4e 	bl	8004b50 <floor>
 80020b4:	ec54 3b10 	vmov	r3, r4, d0
 80020b8:	4618      	mov	r0, r3
 80020ba:	4621      	mov	r1, r4
 80020bc:	f7fe fac8 	bl	8000650 <__aeabi_d2uiz>
 80020c0:	4602      	mov	r2, r0
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}
	...

080020d0 <fill_times>:

void fill_times(Osci_Settings* settings, Osci_CalculatedParameters* new_parameters){
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	// Assumes 32MHZ timer clock
	new_parameters->xTimerSettings.arr = floor(32000000*settings->xTimePerDivision*settings->xGraticuleDivisions/(NUM_SAMPLES -1));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80021f0 <fill_times+0x120>
 80020e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80021f4 <fill_times+0x124>
 80020fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002102:	ee16 0a90 	vmov	r0, s13
 8002106:	f7fe f9c3 	bl	8000490 <__aeabi_f2d>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	ec44 3b10 	vmov	d0, r3, r4
 8002112:	f002 fd1d 	bl	8004b50 <floor>
 8002116:	ec54 3b10 	vmov	r3, r4, d0
 800211a:	4618      	mov	r0, r3
 800211c:	4621      	mov	r1, r4
 800211e:	f7fe fa97 	bl	8000650 <__aeabi_d2uiz>
 8002122:	4602      	mov	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
	new_parameters->yTimerSettings.arr = floor(32000000*settings->yTimePerDivision*settings->yGraticuleDivisions/(NUM_SAMPLES -1));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 7a05 	vldr	s15, [r3, #20]
 800212e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80021f0 <fill_times+0x120>
 8002132:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021f4 <fill_times+0x124>
 800214c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002150:	ee16 0a90 	vmov	r0, s13
 8002154:	f7fe f99c 	bl	8000490 <__aeabi_f2d>
 8002158:	4603      	mov	r3, r0
 800215a:	460c      	mov	r4, r1
 800215c:	ec44 3b10 	vmov	d0, r3, r4
 8002160:	f002 fcf6 	bl	8004b50 <floor>
 8002164:	ec54 3b10 	vmov	r3, r4, d0
 8002168:	4618      	mov	r0, r3
 800216a:	4621      	mov	r1, r4
 800216c:	f7fe fa70 	bl	8000650 <__aeabi_d2uiz>
 8002170:	4602      	mov	r2, r0
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44

	new_parameters->xTimerSettings.psc = 0;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
	new_parameters->yTimerSettings.psc = 0;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

	//Adjust prescaler so that arr < 2^16
	if(new_parameters->xTimerSettings.arr > 65535){
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218a:	d313      	bcc.n	80021b4 <fill_times+0xe4>
		new_parameters->xTimerSettings.psc = floor(new_parameters->xTimerSettings.arr/65536);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f95a 	bl	800044c <__aeabi_ui2d>
 8002198:	4603      	mov	r3, r0
 800219a:	460c      	mov	r4, r1
 800219c:	4618      	mov	r0, r3
 800219e:	4621      	mov	r1, r4
 80021a0:	f7fe fa56 	bl	8000650 <__aeabi_d2uiz>
 80021a4:	4602      	mov	r2, r0
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
		new_parameters->xTimerSettings.arr = new_parameters->xTimerSettings.arr%65536;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	if(new_parameters->yTimerSettings.arr > 65535){
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d313      	bcc.n	80021e6 <fill_times+0x116>
		new_parameters->yTimerSettings.psc = floor(new_parameters->yTimerSettings.arr/65536);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f941 	bl	800044c <__aeabi_ui2d>
 80021ca:	4603      	mov	r3, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	f7fe fa3d 	bl	8000650 <__aeabi_d2uiz>
 80021d6:	4602      	mov	r2, r0
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
		new_parameters->yTimerSettings.arr = new_parameters->yTimerSettings.arr%65536;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	4bf42400 	.word	0x4bf42400
 80021f4:	43ff8000 	.word	0x43ff8000

080021f8 <switch_relays>:

void switch_relays(Osci_Settings* s, Osci_CalculatedParameters* p){
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	// TODO
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <wait_for_relays_to_switch>:
void wait_for_relays_to_switch(){
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
	// TODO
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <osci_configurator_recalculate_parameters>:


void osci_configurator_recalculate_parameters(Osci_Settings* s, Osci_CalculatedParameters* p){
 800221c:	b580      	push	{r7, lr}
 800221e:	b094      	sub	sp, #80	; 0x50
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	Osci_CalculatedParameters new_p = {0};
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	2248      	movs	r2, #72	; 0x48
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fc0b 	bl	8004a4a <memset>
	fill_ranges(s, &new_p);
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fe3c 	bl	8001eb8 <fill_ranges>
	fill_sensitivity_and_offset(s, &new_p);
 8002240:	f107 0308 	add.w	r3, r7, #8
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fe84 	bl	8001f54 <fill_sensitivity_and_offset>
	fill_thresholds(s, &new_p);
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fefc 	bl	8002050 <fill_thresholds>
	fill_times(s, &new_p);
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff36 	bl	80020d0 <fill_times>
	*p = new_p;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	2248      	movs	r2, #72	; 0x48
 800226e:	4619      	mov	r1, r3
 8002270:	f002 fbe0 	bl	8004a34 <memcpy>
}
 8002274:	bf00      	nop
 8002276:	3750      	adds	r7, #80	; 0x50
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <osci_configurator_switch_relays>:

void osci_configurator_switch_relays(Osci_Settings* s, Osci_CalculatedParameters* p){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	switch_relays(s, p);
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffb5 	bl	80021f8 <switch_relays>
	wait_for_relays_to_switch();
 800228e:	f7ff ffbe 	bl	800220e <wait_for_relays_to_switch>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <fill_default_settings>:

void fill_default_settings(Osci_Settings* osci_settings){
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	osci_settings->xtriggerLevel = OSCI_SETTINGS_DEFAULT_XTRIGGERLEVEL;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
	osci_settings->ytriggerLevel = OSCI_SETTINGS_DEFAULT_YTRIGGERLEVEL;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
	osci_settings->xOffset = OSCI_SETTINGS_DEFAULT_XOFFSET;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
	osci_settings->yOffset = OSCI_SETTINGS_DEFAULT_YOFFSET;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
	osci_settings->ySensitivity = OSCI_SETTINGS_DEFAULT_YSENSITIVITY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022ca:	60da      	str	r2, [r3, #12]
	osci_settings->xSensitivity = OSCI_SETTINGS_DEFAULT_XSENSITIVITY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022d2:	605a      	str	r2, [r3, #4]
	osci_settings->xTimePerDivision = OSCI_SETTINGS_DEFAULT_TIMEPERDIVISION;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <fill_default_settings+0x78>)
 80022d8:	611a      	str	r2, [r3, #16]
	osci_settings->yTimePerDivision = OSCI_SETTINGS_DEFAULT_TIMEPERDIVISION;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <fill_default_settings+0x78>)
 80022de:	615a      	str	r2, [r3, #20]
	osci_settings->triggerType = OSCI_SETTINGS_DEFAULT_TRIGGERTYPE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
	osci_settings->xVoltageRange = OSCI_SETTINGS_DEFAULT_XVOLTAGERANGE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2214      	movs	r2, #20
 80022ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	osci_settings->yVoltageRange = OSCI_SETTINGS_DEFAULT_YVOLTAGERANGE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2214      	movs	r2, #20
 80022f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	osci_settings->xGraticuleDivisions = OSCI_SETTINGS_DEFAULT_XGRATICULEDIVISIONS;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	220a      	movs	r2, #10
 80022fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	osci_settings->yGraticuleDivisions = OSCI_SETTINGS_DEFAULT_YGRATICULEDIVISIONS;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	220a      	movs	r2, #10
 8002302:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	3dcccccd 	.word	0x3dcccccd

08002318 <osci_configurator_config_defaults_ts>:

void osci_configurator_config_defaults_ts(Osci_Transceiver* ts){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	fill_default_settings(&ts->receiveCompleteBuffer);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3338      	adds	r3, #56	; 0x38
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ffb9 	bl	800229c <fill_default_settings>
	fill_default_settings(&ts->receiveCompleteBuffer);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3338      	adds	r3, #56	; 0x38
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ffb4 	bl	800229c <fill_default_settings>
	osci_configurator_recalculate_parameters(&ts->receiveCompleteBuffer, &ts->allReceivedParameters);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7ff ff6a 	bl	800221c <osci_configurator_recalculate_parameters>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <osci_configurator_distribute_settings>:

void osci_configurator_distribute_settings(Osci_ChannelStateMachine*xcsm, Osci_ChannelStateMachine*ycsm, Osci_Settings* s, Osci_CalculatedParameters* p){
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
	xcsm->params.graticuleDivisions = s->xGraticuleDivisions;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	755a      	strb	r2, [r3, #21]
	xcsm->params.offset = p->offset_conversion_x*s->xOffset;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	ed93 7a06 	vldr	s14, [r3, #24]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	edc3 7a00 	vstr	s15, [r3]
	xcsm->params.sensitivity = p->sensitivity_conversion_x;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]
	xcsm->params.timerSettings = p->xTimerSettings;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	3308      	adds	r3, #8
 800238c:	3238      	adds	r2, #56	; 0x38
 800238e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002392:	e883 0003 	stmia.w	r3, {r0, r1}
	xcsm->params.triggerLevel = p->xThresholdInLevels;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	611a      	str	r2, [r3, #16]
	xcsm->params.voltageRange = s->xVoltageRange;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	751a      	strb	r2, [r3, #20]

	ycsm->params.graticuleDivisions = s->yGraticuleDivisions;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	755a      	strb	r2, [r3, #21]
	ycsm->params.offset = p->offset_conversion_y*s->yOffset;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	edc3 7a00 	vstr	s15, [r3]
	ycsm->params.sensitivity = p->sensitivity_conversion_y;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	605a      	str	r2, [r3, #4]
	ycsm->params.timerSettings = p->yTimerSettings;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	3308      	adds	r3, #8
 80023d6:	3240      	adds	r2, #64	; 0x40
 80023d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023dc:	e883 0003 	stmia.w	r3, {r0, r1}
	ycsm->params.triggerLevel = p->yThresholdInLevels;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	611a      	str	r2, [r3, #16]
	ycsm->params.voltageRange = s->yVoltageRange;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	751a      	strb	r2, [r3, #20]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <LL_ADC_DMA_GetRegAddr>:
{
 8002400:	b490      	push	{r4, r7}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 800240a:	2400      	movs	r4, #0
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <LL_ADC_DMA_GetRegAddr+0x1a>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3340      	adds	r3, #64	; 0x40
 8002416:	461c      	mov	r4, r3
 8002418:	e000      	b.n	800241c <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 800241a:	4c03      	ldr	r4, [pc, #12]	; (8002428 <LL_ADC_DMA_GetRegAddr+0x28>)
  return data_reg_addr;
 800241c:	4623      	mov	r3, r4
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bc90      	pop	{r4, r7}
 8002426:	4770      	bx	lr
 8002428:	5000030c 	.word	0x5000030c

0800242c <LL_DMA_EnableChannel>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	3b01      	subs	r3, #1
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <LL_DMA_EnableChannel+0x3c>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	3a01      	subs	r2, #1
 800244a:	4907      	ldr	r1, [pc, #28]	; (8002468 <LL_DMA_EnableChannel+0x3c>)
 800244c:	5c8a      	ldrb	r2, [r1, r2]
 800244e:	4611      	mov	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	440a      	add	r2, r1
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	08004cbc 	.word	0x08004cbc

0800246c <LL_DMA_DisableChannel>:
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3b01      	subs	r3, #1
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <LL_DMA_DisableChannel+0x3c>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	3a01      	subs	r2, #1
 800248a:	4907      	ldr	r1, [pc, #28]	; (80024a8 <LL_DMA_DisableChannel+0x3c>)
 800248c:	5c8a      	ldrb	r2, [r1, r2]
 800248e:	4611      	mov	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	440a      	add	r2, r1
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6013      	str	r3, [r2, #0]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	08004cbc 	.word	0x08004cbc

080024ac <LL_DMA_IsEnabledChannel>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <LL_DMA_IsEnabledChannel+0x34>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
                   DMA_CCR_EN) == (DMA_CCR_EN));
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	08004cbc 	.word	0x08004cbc

080024e4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <LL_DMA_SetDataLength+0x44>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	3a01      	subs	r2, #1
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <LL_DMA_SetDataLength+0x44>)
 800250a:	5c8a      	ldrb	r2, [r1, r2]
 800250c:	4611      	mov	r1, r2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	440a      	add	r2, r1
 8002512:	4611      	mov	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	08004cbc 	.word	0x08004cbc

0800252c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3b01      	subs	r3, #1
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <LL_DMA_SetMemoryAddress+0x2c>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	08004cbc 	.word	0x08004cbc

0800255c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <LL_DMA_SetPeriphAddress+0x2c>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	461a      	mov	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	461a      	mov	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6093      	str	r3, [r2, #8]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	08004cbc 	.word	0x08004cbc

0800258c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <LL_DMA_EnableIT_TC+0x3c>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	3a01      	subs	r2, #1
 80025aa:	4907      	ldr	r1, [pc, #28]	; (80025c8 <LL_DMA_EnableIT_TC+0x3c>)
 80025ac:	5c8a      	ldrb	r2, [r1, r2]
 80025ae:	4611      	mov	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	440a      	add	r2, r1
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	08004cbc 	.word	0x08004cbc

080025cc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <LL_DMA_EnableIT_TE+0x3c>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	3a01      	subs	r2, #1
 80025ea:	4907      	ldr	r1, [pc, #28]	; (8002608 <LL_DMA_EnableIT_TE+0x3c>)
 80025ec:	5c8a      	ldrb	r2, [r1, r2]
 80025ee:	4611      	mov	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	440a      	add	r2, r1
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	08004cbc 	.word	0x08004cbc

0800260c <osci_dma_channel_init>:
 *      Author: dot
 */

#include "osci_dma.h"

void osci_dma_channel_init(Osci_ChannelStateMachine* csm){
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	LL_DMA_SetPeriphAddress(csm->dma, csm->dmaChannel, LL_ADC_DMA_GetRegAddr(csm->adc, LL_ADC_DMA_REG_REGULAR_DATA));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69dc      	ldr	r4, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff feec 	bl	8002400 <LL_ADC_DMA_GetRegAddr>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	4629      	mov	r1, r5
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff ff94 	bl	800255c <LL_DMA_SetPeriphAddress>
	LL_DMA_EnableIT_TE(csm->dma, csm->dmaChannel);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f7ff ffc4 	bl	80025cc <LL_DMA_EnableIT_TE>
	LL_DMA_EnableIT_TC(csm->dma, csm->dmaChannel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f7ff ff9c 	bl	800258c <LL_DMA_EnableIT_TC>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bdb0      	pop	{r4, r5, r7, pc}

0800265c <osci_dma_channel_reconfigure_for_measuring>:

void osci_dma_channel_reconfigure_for_measuring(Osci_ChannelStateMachine* csm){
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	if(LL_DMA_IsEnabledChannel(csm->dma, csm->dmaChannel)){ osci_error_loop("dma enabled when reconfiguring for measurement"); };
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f7ff ff1c 	bl	80024ac <LL_DMA_IsEnabledChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <osci_dma_channel_reconfigure_for_measuring+0x24>
 800267a:	4810      	ldr	r0, [pc, #64]	; (80026bc <osci_dma_channel_reconfigure_for_measuring+0x60>)
 800267c:	f000 f852 	bl	8002724 <osci_error_loop>
	LL_DMA_SetDataLength(csm->dma, csm->dmaChannel, NUM_SAMPLES);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69d8      	ldr	r0, [r3, #28]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268c:	4619      	mov	r1, r3
 800268e:	f7ff ff29 	bl	80024e4 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(csm->dma, csm->dmaChannel, (uint32_t)&csm->measurementDMABuffer);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69d8      	ldr	r0, [r3, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3338      	adds	r3, #56	; 0x38
 800269e:	461a      	mov	r2, r3
 80026a0:	f7ff ff44 	bl	800252c <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableChannel(csm->dma, csm->dmaChannel);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f7ff febc 	bl	800242c <LL_DMA_EnableChannel>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	08004c70 	.word	0x08004c70

080026c0 <osci_dma_channel_reconfigure_for_monitoring>:

void osci_dma_channel_reconfigure_for_monitoring(Osci_ChannelStateMachine* csm){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(csm->dma, csm->dmaChannel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f7ff feca 	bl	800246c <LL_DMA_DisableChannel>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <osci_dma_set_TC_callback>:

void osci_dma_set_TC_callback(Osci_ChannelStateMachine* csm){
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	switch(csm->dmaChannel){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <osci_dma_set_TC_callback+0x16>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d006      	beq.n	8002702 <osci_dma_set_TC_callback+0x22>
			break;
		case LL_DMA_CHANNEL_2:
			osci_dma_ch2_TC_callback = csm->measurement_complete_callback;
			break;
	}
}
 80026f4:	e00b      	b.n	800270e <osci_dma_set_TC_callback+0x2e>
			osci_dma_ch1_TC_callback = csm->measurement_complete_callback;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8d3 3844 	ldr.w	r3, [r3, #2116]	; 0x844
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <osci_dma_set_TC_callback+0x3c>)
 80026fe:	6013      	str	r3, [r2, #0]
			break;
 8002700:	e005      	b.n	800270e <osci_dma_set_TC_callback+0x2e>
			osci_dma_ch2_TC_callback = csm->measurement_complete_callback;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 3844 	ldr.w	r3, [r3, #2116]	; 0x844
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <osci_dma_set_TC_callback+0x40>)
 800270a:	6013      	str	r3, [r2, #0]
			break;
 800270c:	bf00      	nop
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000098 	.word	0x20000098
 8002720:	20000090 	.word	0x20000090

08002724 <osci_error_loop>:
 *
 *  Created on: 24. 12. 2019
 *      Author: dot
 */
#include "osci_error.h"
void osci_error_loop(char* str){
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	while(1){};
 800272c:	e7fe      	b.n	800272c <osci_error_loop+0x8>

0800272e <osci_error_notify>:
}

void osci_error_notify(char *str){
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
	return;
 8002736:	bf00      	nop
}
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0201 	bic.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_TIM_EnableUpdateEvent>:
  * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0202 	bic.w	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60da      	str	r2, [r3, #12]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <osci_timer_stop>:
#include <osci_timer.h>
#include "main.h"



void osci_timer_stop(Osci_ChannelStateMachine* csm){
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	//LL_TIM_DisableUpdateEvent(csm->timer);
	LL_TIM_DisableCounter(csm->timer);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ffb9 	bl	8002762 <LL_TIM_DisableCounter>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <osci_timer_start>:

void osci_timer_start(Osci_ChannelStateMachine* csm){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	//LL_TIM_EnableUpdateEvent(csm->timer);
	LL_TIM_SetCounter(csm->timer, 0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffcb 	bl	80027a2 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(csm->timer);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff96 	bl	8002742 <LL_TIM_EnableCounter>
	//LL_TIM_EnableIT_UPDATE(csm->timer);
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <osci_timer_reconfigure_for_measuring>:

void osci_timer_reconfigure_for_measuring(Osci_ChannelStateMachine* csm){
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	// TODO
	csm->timer->PSC = csm->params.timerSettings.psc;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6892      	ldr	r2, [r2, #8]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
	csm->timer->ARR = csm->params.timerSettings.arr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68d2      	ldr	r2, [r2, #12]
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <osci_timer_reconfigure_for_monitoring>:

void osci_timer_reconfigure_for_monitoring(Osci_ChannelStateMachine* csm){
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	csm->timer->PSC = 63; // 500KHZ at 32MHZ CLK
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	223f      	movs	r2, #63	; 0x3f
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
	csm->timer->ARR = 19; // 25KHZ
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2213      	movs	r2, #19
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <osci_timer_init>:

void osci_timer_init(Osci_ChannelStateMachine* csm){
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	// This must be called only after handles of update interrupt are initialized in osci_channel_init(), otherwise it generates an interrupt with null callback functions, which results in hard_fault
	LL_TIM_EnableUpdateEvent(csm->timer);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff83 	bl	8002782 <LL_TIM_EnableUpdateEvent>
	LL_TIM_EnableIT_UPDATE(csm->timer);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff9c 	bl	80027be <LL_TIM_EnableIT_UPDATE>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <osci_timer_set_update_callback>:

void osci_timer_set_update_callback(Osci_ChannelStateMachine* csm, void (*new_callback) (Osci_Application*)){
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	if(csm->timer == TIM1){
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <osci_timer_set_update_callback+0x38>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <osci_timer_set_update_callback+0x1c>
		osci_timer1_update_callback = new_callback;
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <osci_timer_set_update_callback+0x3c>)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6013      	str	r3, [r2, #0]
	}else {
		if(csm->timer == TIM2){
			osci_timer2_update_callback = new_callback;
		}
	}
}
 80028aa:	e007      	b.n	80028bc <osci_timer_set_update_callback+0x2c>
		if(csm->timer == TIM2){
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d102      	bne.n	80028bc <osci_timer_set_update_callback+0x2c>
			osci_timer2_update_callback = new_callback;
 80028b6:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <osci_timer_set_update_callback+0x40>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	200000a0 	.word	0x200000a0
 80028d0:	200000b0 	.word	0x200000b0

080028d4 <LL_DMA_EnableChannel>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	4a0b      	ldr	r2, [pc, #44]	; (8002910 <LL_DMA_EnableChannel+0x3c>)
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	3a01      	subs	r2, #1
 80028f2:	4907      	ldr	r1, [pc, #28]	; (8002910 <LL_DMA_EnableChannel+0x3c>)
 80028f4:	5c8a      	ldrb	r2, [r1, r2]
 80028f6:	4611      	mov	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	440a      	add	r2, r1
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6013      	str	r3, [r2, #0]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	08004cc4 	.word	0x08004cc4

08002914 <LL_DMA_DisableChannel>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3b01      	subs	r3, #1
 8002922:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <LL_DMA_DisableChannel+0x3c>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	3a01      	subs	r2, #1
 8002932:	4907      	ldr	r1, [pc, #28]	; (8002950 <LL_DMA_DisableChannel+0x3c>)
 8002934:	5c8a      	ldrb	r2, [r1, r2]
 8002936:	4611      	mov	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	440a      	add	r2, r1
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	08004cc4 	.word	0x08004cc4

08002954 <LL_DMA_IsEnabledChannel>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <LL_DMA_IsEnabledChannel+0x34>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
                   DMA_CCR_EN) == (DMA_CCR_EN));
 8002972:	2b01      	cmp	r3, #1
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	08004cc4 	.word	0x08004cc4

0800298c <LL_DMA_SetDataLength>:
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3b01      	subs	r3, #1
 800299c:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <LL_DMA_SetDataLength+0x44>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	3a01      	subs	r2, #1
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <LL_DMA_SetDataLength+0x44>)
 80029b2:	5c8a      	ldrb	r2, [r1, r2]
 80029b4:	4611      	mov	r1, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	440a      	add	r2, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	08004cc4 	.word	0x08004cc4

080029d4 <LL_DMA_SetMemoryAddress>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <LL_DMA_SetMemoryAddress+0x2c>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	08004cc4 	.word	0x08004cc4

08002a04 <LL_DMA_SetPeriphAddress>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <LL_DMA_SetPeriphAddress+0x2c>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6093      	str	r3, [r2, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	08004cc4 	.word	0x08004cc4

08002a34 <LL_DMA_EnableIT_TC>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <LL_DMA_EnableIT_TC+0x3c>)
 8002a44:	5cd3      	ldrb	r3, [r2, r3]
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	3a01      	subs	r2, #1
 8002a52:	4907      	ldr	r1, [pc, #28]	; (8002a70 <LL_DMA_EnableIT_TC+0x3c>)
 8002a54:	5c8a      	ldrb	r2, [r1, r2]
 8002a56:	4611      	mov	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6013      	str	r3, [r2, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	08004cc4 	.word	0x08004cc4

08002a74 <LL_DMA_EnableIT_TE>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <LL_DMA_EnableIT_TE+0x3c>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	3a01      	subs	r2, #1
 8002a92:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <LL_DMA_EnableIT_TE+0x3c>)
 8002a94:	5c8a      	ldrb	r2, [r1, r2]
 8002a96:	4611      	mov	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	440a      	add	r2, r1
 8002a9c:	f043 0308 	orr.w	r3, r3, #8
 8002aa0:	6013      	str	r3, [r2, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	08004cc4 	.word	0x08004cc4

08002ab4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 0201 	bic.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002b34:	b490      	push	{r4, r7}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3328      	adds	r3, #40	; 0x28
 8002b48:	461c      	mov	r4, r3
 8002b4a:	e002      	b.n	8002b52 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8002b52:	4623      	mov	r3, r4
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc90      	pop	{r4, r7}
 8002b5c:	4770      	bx	lr

08002b5e <gather_data>:

#include "osci_transceiver.h"
#include "osci_channel_state_machine.h"


void gather_data(Osci_Transceiver* ts){
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	// Make sure dataframe has the start word
	ts->sendingBuffer.start_word = OSCI_DATA_START_WORD;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f64e 72ef 	movw	r2, #61423	; 0xefef
 8002b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	// Copy last complete measurement
	ts->sendingBuffer.xChannel = ts->x_channel_state_machine->measurement;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 38ac 	ldr.w	r3, [r3, #2220]	; 0x8ac
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	f102 0062 	add.w	r0, r2, #98	; 0x62
 8002b7c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b84:	4619      	mov	r1, r3
 8002b86:	f001 ff55 	bl	8004a34 <memcpy>
	ts->sendingBuffer.yChannel = ts->y_channel_state_machine->measurement;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 38b0 	ldr.w	r3, [r3, #2224]	; 0x8b0
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	f202 4062 	addw	r0, r2, #1122	; 0x462
 8002b96:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f001 ff48 	bl	8004a34 <memcpy>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <transform_data>:

void transform_data(Osci_Transceiver* ts){
 8002bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bae:	b08d      	sub	sp, #52	; 0x34
 8002bb0:	af0a      	add	r7, sp, #40	; 0x28
 8002bb2:	6078      	str	r0, [r7, #4]
	osci_transform_apply(&ts->sendingBuffer, ts->x_channel_state_machine->params, ts->y_channel_state_machine->params);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 0c60 	add.w	ip, r3, #96	; 0x60
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 68ac 	ldr.w	r6, [r3, #2220]	; 0x8ac
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 38b0 	ldr.w	r3, [r3, #2224]	; 0x8b0
 8002bc6:	ac03      	add	r4, sp, #12
 8002bc8:	461d      	mov	r5, r3
 8002bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bd2:	e884 0003 	stmia.w	r4, {r0, r1}
 8002bd6:	466c      	mov	r4, sp
 8002bd8:	f106 030c 	add.w	r3, r6, #12
 8002bdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002be0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002be4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002be8:	4660      	mov	r0, ip
 8002bea:	f000 f9b5 	bl	8002f58 <osci_transform_apply>
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002bf8 <send_data>:

void send_data(Osci_Transceiver* ts){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	if (LL_DMA_IsEnabledChannel(ts->dma, ts->dmaTransmissionChannel)) { osci_error_notify("new data send skip"); return; }; // Do not do anything if data is still being sent
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f7ff fea2 	bl	8002954 <LL_DMA_IsEnabledChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <send_data+0x26>
 8002c16:	4810      	ldr	r0, [pc, #64]	; (8002c58 <send_data+0x60>)
 8002c18:	f7ff fd89 	bl	800272e <osci_error_notify>
 8002c1c:	e019      	b.n	8002c52 <send_data+0x5a>
	LL_DMA_SetDataLength(ts->dma, ts->dmaTransmissionChannel, sizeof(Osci_DataFrame));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6858      	ldr	r0, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f640 0202 	movw	r2, #2050	; 0x802
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7ff feae 	bl	800298c <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(ts->dma, ts->dmaTransmissionChannel, (uint32_t)&ts->sendingBuffer);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6858      	ldr	r0, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f7ff fec9 	bl	80029d4 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableChannel(ts->dma, ts->dmaTransmissionChannel);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f7ff fe41 	bl	80028d4 <LL_DMA_EnableChannel>
}
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	08004ca0 	.word	0x08004ca0

08002c5c <received_callback>:

void received_callback(Osci_Application* app){
 8002c5c:	b4b0      	push	{r4, r5, r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	app->transceiver.receiveCompleteBuffer = app->transceiver.recveiveBuffer;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f102 0438 	add.w	r4, r2, #56	; 0x38
 8002c6c:	f103 0510 	add.w	r5, r3, #16
 8002c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c7c:	e884 0003 	stmia.w	r4, {r0, r1}
	app->transceiver.events.received_settings = TRUE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bcb0      	pop	{r4, r5, r7}
 8002c90:	4770      	bx	lr

08002c92 <sent_callback>:

void sent_callback(Osci_Application* app){
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(app->transceiver.dma, app->transceiver.dmaTransmissionChannel);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7ff fe35 	bl	8002914 <LL_DMA_DisableChannel>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <configure_usart>:

void configure_usart(Osci_Transceiver* ts){
 8002cb2:	b5b0      	push	{r4, r5, r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	// Configure USART channels, set buffer addresses etc.
	LL_USART_Disable(ts->usart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff08 	bl	8002ad4 <LL_USART_Disable>

	// Channel 6 (settings reading)
	LL_DMA_SetPeriphAddress(ts->dma, ts->dmaReceiverChannel, LL_USART_DMA_GetRegAddr(ts->usart, LL_USART_DMA_REG_DATA_RECEIVE));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685c      	ldr	r4, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689d      	ldr	r5, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff2e 	bl	8002b34 <LL_USART_DMA_GetRegAddr>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4629      	mov	r1, r5
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7ff fe90 	bl	8002a04 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(ts->dma, ts->dmaReceiverChannel, (uint32_t)&ts->recveiveBuffer);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6858      	ldr	r0, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3310      	adds	r3, #16
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f7ff fe6f 	bl	80029d4 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(ts->dma, ts->dmaReceiverChannel, sizeof(Osci_Settings));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6858      	ldr	r0, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2228      	movs	r2, #40	; 0x28
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7ff fe43 	bl	800298c <LL_DMA_SetDataLength>
	LL_DMA_EnableIT_TC(ts->dma, ts->dmaReceiverChannel);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7ff fe8f 	bl	8002a34 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(ts->dma, ts->dmaReceiverChannel);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7ff fea7 	bl	8002a74 <LL_DMA_EnableIT_TE>
	LL_USART_EnableDMAReq_RX(ts->usart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fee2 	bl	8002af4 <LL_USART_EnableDMAReq_RX>

	// Channel 7 (data writing)
	LL_DMA_SetPeriphAddress(ts->dma, ts->dmaTransmissionChannel, LL_USART_DMA_GetRegAddr(ts->usart, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685c      	ldr	r4, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68dd      	ldr	r5, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fef8 	bl	8002b34 <LL_USART_DMA_GetRegAddr>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff fe5a 	bl	8002a04 <LL_DMA_SetPeriphAddress>
	//LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)&osci_dataframe_current);
	//LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, sizeof(Osci_DataFrame));

	LL_DMA_EnableIT_TE(ts->dma, ts->dmaTransmissionChannel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7ff fe8a 	bl	8002a74 <LL_DMA_EnableIT_TE>
	LL_DMA_EnableIT_TC(ts->dma, ts->dmaTransmissionChannel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f7ff fe62 	bl	8002a34 <LL_DMA_EnableIT_TC>
	LL_USART_EnableDMAReq_TX(ts->usart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fecd 	bl	8002b14 <LL_USART_EnableDMAReq_TX>

	LL_USART_Enable(ts->usart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fe98 	bl	8002ab4 <LL_USART_Enable>
	}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bdb0      	pop	{r4, r5, r7, pc}

08002d8c <osci_transceiver_init>:

void osci_transceiver_init(Osci_Transceiver* ts, USART_TypeDef* usart, DMA_TypeDef* dma, uint32_t dmaReceiverChannel, uint32_t dmaTransmissionChannel, Osci_ChannelStateMachine* x_channel_state_machine, Osci_ChannelStateMachine* y_channel_state_machine){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
	ts->usart = usart;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	601a      	str	r2, [r3, #0]
	ts->dma = dma;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	605a      	str	r2, [r3, #4]
	ts->dmaReceiverChannel = dmaReceiverChannel;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	609a      	str	r2, [r3, #8]
	ts->dmaTransmissionChannel = dmaTransmissionChannel;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	60da      	str	r2, [r3, #12]
	ts->x_channel_state_machine = x_channel_state_machine;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f8c3 28ac 	str.w	r2, [r3, #2220]	; 0x8ac
	ts->y_channel_state_machine = y_channel_state_machine;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	f8c3 28b0 	str.w	r2, [r3, #2224]	; 0x8b0

	// Configure USART channels, set buffer addresses etc.
	configure_usart(ts);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ff75 	bl	8002cb2 <configure_usart>

	// This unfortunately has to be set manually.
	osci_transceiver_received_callback = received_callback;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <osci_transceiver_init+0x70>)
 8002dca:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <osci_transceiver_init+0x74>)
 8002dcc:	601a      	str	r2, [r3, #0]
	osci_transceiver_sent_callback = sent_callback;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <osci_transceiver_init+0x78>)
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <osci_transceiver_init+0x7c>)
 8002dd2:	601a      	str	r2, [r3, #0]

	// Fill in default settings (offsets, sensitivity, ...).
	osci_configurator_config_defaults_ts(ts);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff fa9f 	bl	8002318 <osci_configurator_config_defaults_ts>

	// Enable DMA channel for receiving new settings.
	LL_DMA_EnableChannel(ts->dma, ts->dmaReceiverChannel);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7ff fd75 	bl	80028d4 <LL_DMA_EnableChannel>

	ts->state = OSCI_TRANSCEIVER_STATE_IDLE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c3 28b4 	str.w	r2, [r3, #2228]	; 0x8b4

}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000094 	.word	0x20000094
 8002e00:	08002c5d 	.word	0x08002c5d
 8002e04:	2000009c 	.word	0x2000009c
 8002e08:	08002c93 	.word	0x08002c93

08002e0c <osci_transceiver_update>:



void osci_transceiver_update(Osci_Transceiver* ts){
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	switch(ts->state){
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 38b4 	ldr.w	r3, [r3, #2228]	; 0x8b4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	f200 8098 	bhi.w	8002f50 <osci_transceiver_update+0x144>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <osci_transceiver_update+0x1c>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	08002e9f 	.word	0x08002e9f
 8002e34:	08002ec5 	.word	0x08002ec5
 8002e38:	08002f29 	.word	0x08002f29
		case OSCI_TRANSCEIVER_STATE_IDLE:
			if (ts->events.received_settings) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 38b8 	ldrb.w	r3, [r3, #2232]	; 0x8b8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <osci_transceiver_update+0x4a>
				ts->state = OSCI_TRANSCEIVER_STATE_SHUTTING_DOWN_CHANNELS;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f8c3 28b4 	str.w	r2, [r3, #2228]	; 0x8b4
				ts->events.received_settings = FALSE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
			}
			if (ts->events.send_requested){
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 38b9 	ldrb.w	r3, [r3, #2233]	; 0x8b9
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d074      	beq.n	8002f4a <osci_transceiver_update+0x13e>
				gather_data(ts);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fe7c 	bl	8002b5e <gather_data>
				transform_data(ts);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fea0 	bl	8002bac <transform_data>
				send_data(ts);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fec3 	bl	8002bf8 <send_data>
				ts->events.send_requested = FALSE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
			}
			break;
 8002e7a:	e066      	b.n	8002f4a <osci_transceiver_update+0x13e>
		case OSCI_TRANSCEIVER_STATE_SHUTTING_DOWN_CHANNELS:
			ts->x_channel_state_machine->events.shutdown = TRUE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 38ac 	ldr.w	r3, [r3, #2220]	; 0x8ac
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c
			ts->y_channel_state_machine->events.shutdown = TRUE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 38b0 	ldr.w	r3, [r3, #2224]	; 0x8b0
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 284c 	strb.w	r2, [r3, #2124]	; 0x84c
			ts->state = OSCI_TRANSCEIVER_STATE_WAITING_FOR_CHANNELS_TO_SHUTDOWN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f8c3 28b4 	str.w	r2, [r3, #2228]	; 0x8b4
			break;
 8002e9c:	e058      	b.n	8002f50 <osci_transceiver_update+0x144>
		case OSCI_TRANSCEIVER_STATE_WAITING_FOR_CHANNELS_TO_SHUTDOWN:
				if( (ts->x_channel_state_machine->state == OSCI_CHANNEL_STATE_SHUTDOWN) && (ts->y_channel_state_machine->state == OSCI_CHANNEL_STATE_SHUTDOWN)) {
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 38ac 	ldr.w	r3, [r3, #2220]	; 0x8ac
 8002ea4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d150      	bne.n	8002f4e <osci_transceiver_update+0x142>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 38b0 	ldr.w	r3, [r3, #2224]	; 0x8b0
 8002eb2:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d149      	bne.n	8002f4e <osci_transceiver_update+0x142>
					ts->state = OSCI_TRANSCEIVER_STATE_RECONFIGURING_CHANNELS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f8c3 28b4 	str.w	r2, [r3, #2228]	; 0x8b4
				}
			break;
 8002ec2:	e044      	b.n	8002f4e <osci_transceiver_update+0x142>
		case OSCI_TRANSCEIVER_STATE_RECONFIGURING_CHANNELS:{
					Osci_Settings settingsCopy = ts->receiveCompleteBuffer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f107 0408 	add.w	r4, r7, #8
 8002eca:	f103 0538 	add.w	r5, r3, #56	; 0x38
 8002ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002eda:	e884 0003 	stmia.w	r4, {r0, r1}
					osci_configurator_recalculate_parameters(&settingsCopy, &ts->allReceivedParameters);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f603 0264 	addw	r2, r3, #2148	; 0x864
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f996 	bl	800221c <osci_configurator_recalculate_parameters>
					osci_configurator_switch_relays(&settingsCopy, &ts->allReceivedParameters);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f603 0264 	addw	r2, r3, #2148	; 0x864
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f9bd 	bl	800227c <osci_configurator_switch_relays>
					osci_configurator_distribute_settings(ts->x_channel_state_machine, ts->y_channel_state_machine, &settingsCopy, &ts->allReceivedParameters);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 08ac 	ldr.w	r0, [r3, #2220]	; 0x8ac
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 18b0 	ldr.w	r1, [r3, #2224]	; 0x8b0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8002f14:	f107 0208 	add.w	r2, r7, #8
 8002f18:	f7ff fa1a 	bl	8002350 <osci_configurator_distribute_settings>
					ts->state = OSCI_TRANSCEIVER_STATE_STARTING_CHANNELS;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	f8c3 28b4 	str.w	r2, [r3, #2228]	; 0x8b4
			break;
 8002f24:	bf00      	nop
 8002f26:	e013      	b.n	8002f50 <osci_transceiver_update+0x144>
		}
		case OSCI_TRANSCEIVER_STATE_STARTING_CHANNELS:
				ts->x_channel_state_machine->events.start_monitoring = TRUE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 38ac 	ldr.w	r3, [r3, #2220]	; 0x8ac
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
				ts->y_channel_state_machine->events.start_monitoring = TRUE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 38b0 	ldr.w	r3, [r3, #2224]	; 0x8b0
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 284d 	strb.w	r2, [r3, #2125]	; 0x84d
				ts->state = OSCI_TRANSCEIVER_STATE_IDLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c3 28b4 	str.w	r2, [r3, #2228]	; 0x8b4
			break;
 8002f48:	e002      	b.n	8002f50 <osci_transceiver_update+0x144>
			break;
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <osci_transceiver_update+0x144>
			break;
 8002f4e:	bf00      	nop
	}
}
 8002f50:	bf00      	nop
 8002f52:	3730      	adds	r7, #48	; 0x30
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}

08002f58 <osci_transform_apply>:
		frame->yChannel.values[i] = MIN(MAX(floor(mparams.sensitivity_conversion_y*frame->yChannel.values[i] + mparams.offset_conversion_y*settings.yOffset), DATA_MIN_VALUE), DATA_MAX_VALUE);
		frame->xChannel.values[i] = MIN(MAX(floor(mparams.sensitivity_conversion_x*frame->xChannel.values[i] + mparams.offset_conversion_x*settings.xOffset), DATA_MIN_VALUE), DATA_MAX_VALUE);
	}
}*/

void osci_transform_apply(Osci_DataFrame* df, Osci_ChannelParameters px, Osci_ChannelParameters py){
 8002f58:	b084      	sub	sp, #16
 8002f5a:	b590      	push	{r4, r7, lr}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(uint32_t i = 0; i < NUM_SAMPLES;i++){
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e15a      	b.n	8003226 <osci_transform_apply+0x2ce>
		df->xChannel.values[i] = MIN(MAX(floor(px.sensitivity*df->xChannel.values[i] + px.offset), DATA_MIN_VALUE), DATA_MAX_VALUE);
 8002f70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	885b      	ldrh	r3, [r3, #2]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f92:	ee17 0a90 	vmov	r0, s15
 8002f96:	f7fd fa7b 	bl	8000490 <__aeabi_f2d>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	ec44 3b10 	vmov	d0, r3, r4
 8002fa2:	f001 fdd5 	bl	8004b50 <floor>
 8002fa6:	ec51 0b10 	vmov	r0, r1, d0
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	f7fd fb43 	bl	800063c <__aeabi_dcmpgt>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02a      	beq.n	8003012 <osci_transform_apply+0xba>
 8002fbc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	885b      	ldrh	r3, [r3, #2]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	ee17 0a90 	vmov	r0, s15
 8002fe2:	f7fd fa55 	bl	8000490 <__aeabi_f2d>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	460c      	mov	r4, r1
 8002fea:	ec44 3b10 	vmov	d0, r3, r4
 8002fee:	f001 fdaf 	bl	8004b50 <floor>
 8002ff2:	ec51 0b10 	vmov	r0, r1, d0
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	4b90      	ldr	r3, [pc, #576]	; (8003240 <osci_transform_apply+0x2e8>)
 8003000:	f7fd fafe 	bl	8000600 <__aeabi_dcmplt>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <osci_transform_apply+0xb6>
 800300a:	2300      	movs	r3, #0
 800300c:	461c      	mov	r4, r3
 800300e:	b2e3      	uxtb	r3, r4
 8003010:	e000      	b.n	8003014 <osci_transform_apply+0xbc>
 8003012:	2301      	movs	r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d04b      	beq.n	80030b0 <osci_transform_apply+0x158>
 8003018:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	885b      	ldrh	r3, [r3, #2]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003032:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	ee17 0a90 	vmov	r0, s15
 800303e:	f7fd fa27 	bl	8000490 <__aeabi_f2d>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	ec44 3b10 	vmov	d0, r3, r4
 800304a:	f001 fd81 	bl	8004b50 <floor>
 800304e:	ec51 0b10 	vmov	r0, r1, d0
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f7fd faef 	bl	800063c <__aeabi_dcmpgt>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d023      	beq.n	80030ac <osci_transform_apply+0x154>
 8003064:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	885b      	ldrh	r3, [r3, #2]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003086:	ee17 0a90 	vmov	r0, s15
 800308a:	f7fd fa01 	bl	8000490 <__aeabi_f2d>
 800308e:	4603      	mov	r3, r0
 8003090:	460c      	mov	r4, r1
 8003092:	ec44 3b10 	vmov	d0, r3, r4
 8003096:	f001 fd5b 	bl	8004b50 <floor>
 800309a:	ec54 3b10 	vmov	r3, r4, d0
 800309e:	4618      	mov	r0, r3
 80030a0:	4621      	mov	r1, r4
 80030a2:	f7fd fad5 	bl	8000650 <__aeabi_d2uiz>
 80030a6:	4603      	mov	r3, r0
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	e003      	b.n	80030b4 <osci_transform_apply+0x15c>
 80030ac:	2200      	movs	r2, #0
 80030ae:	e001      	b.n	80030b4 <osci_transform_apply+0x15c>
 80030b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	440b      	add	r3, r1
 80030bc:	805a      	strh	r2, [r3, #2]
		df->yChannel.values[i] = MIN(MAX(floor(py.sensitivity*df->yChannel.values[i] + py.offset), DATA_MIN_VALUE), DATA_MAX_VALUE);
 80030be:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	885b      	ldrh	r3, [r3, #2]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e4:	ee17 0a90 	vmov	r0, s15
 80030e8:	f7fd f9d2 	bl	8000490 <__aeabi_f2d>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	ec44 3b10 	vmov	d0, r3, r4
 80030f4:	f001 fd2c 	bl	8004b50 <floor>
 80030f8:	ec51 0b10 	vmov	r0, r1, d0
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	f7fd fa9a 	bl	800063c <__aeabi_dcmpgt>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02c      	beq.n	8003168 <osci_transform_apply+0x210>
 800310e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	885b      	ldrh	r3, [r3, #2]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	ee17 0a90 	vmov	r0, s15
 8003138:	f7fd f9aa 	bl	8000490 <__aeabi_f2d>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	ec44 3b10 	vmov	d0, r3, r4
 8003144:	f001 fd04 	bl	8004b50 <floor>
 8003148:	ec51 0b10 	vmov	r0, r1, d0
 800314c:	2301      	movs	r3, #1
 800314e:	461c      	mov	r4, r3
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <osci_transform_apply+0x2e8>)
 8003156:	f7fd fa53 	bl	8000600 <__aeabi_dcmplt>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <osci_transform_apply+0x20c>
 8003160:	2300      	movs	r3, #0
 8003162:	461c      	mov	r4, r3
 8003164:	b2e3      	uxtb	r3, r4
 8003166:	e000      	b.n	800316a <osci_transform_apply+0x212>
 8003168:	2301      	movs	r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d04f      	beq.n	800320e <osci_transform_apply+0x2b6>
 800316e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	885b      	ldrh	r3, [r3, #2]
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	ee17 0a90 	vmov	r0, s15
 8003198:	f7fd f97a 	bl	8000490 <__aeabi_f2d>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	ec44 3b10 	vmov	d0, r3, r4
 80031a4:	f001 fcd4 	bl	8004b50 <floor>
 80031a8:	ec51 0b10 	vmov	r0, r1, d0
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f7fd fa42 	bl	800063c <__aeabi_dcmpgt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d025      	beq.n	800320a <osci_transform_apply+0x2b2>
 80031be:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	885b      	ldrh	r3, [r3, #2]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	ee17 0a90 	vmov	r0, s15
 80031e8:	f7fd f952 	bl	8000490 <__aeabi_f2d>
 80031ec:	4603      	mov	r3, r0
 80031ee:	460c      	mov	r4, r1
 80031f0:	ec44 3b10 	vmov	d0, r3, r4
 80031f4:	f001 fcac 	bl	8004b50 <floor>
 80031f8:	ec54 3b10 	vmov	r3, r4, d0
 80031fc:	4618      	mov	r0, r3
 80031fe:	4621      	mov	r1, r4
 8003200:	f7fd fa26 	bl	8000650 <__aeabi_d2uiz>
 8003204:	4603      	mov	r3, r0
 8003206:	b29a      	uxth	r2, r3
 8003208:	e003      	b.n	8003212 <osci_transform_apply+0x2ba>
 800320a:	2200      	movs	r2, #0
 800320c:	e001      	b.n	8003212 <osci_transform_apply+0x2ba>
 800320e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	805a      	strh	r2, [r3, #2]
	for(uint32_t i = 0; i < NUM_SAMPLES;i++){
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322c:	f4ff aea0 	bcc.w	8002f70 <osci_transform_apply+0x18>
	}
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800323a:	b004      	add	sp, #16
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40b00000 	.word	0x40b00000

08003244 <LL_ADC_IsActiveFlag_AWD1>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <LL_ADC_IsActiveFlag_AWD2>:
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_ClearFlag_AWD1>:
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_DMA_IsActiveFlag_GI1>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_DMA_IsActiveFlag_GI2>:
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_DMA_IsActiveFlag_TC6>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_DMA_IsActiveFlag_TC7>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_DMA_ClearFlag_GI1>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	605a      	str	r2, [r3, #4]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_DMA_ClearFlag_GI2>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2210      	movs	r2, #16
 800336e:	605a      	str	r2, [r3, #4]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_DMA_ClearFlag_GI6>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800338a:	605a      	str	r2, [r3, #4]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_DMA_ClearFlag_GI7>:
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a6:	605a      	str	r2, [r3, #4]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_TIM_ClearFlag_UPDATE>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f06f 0201 	mvn.w	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <HardFault_Handler+0x4>

0800340a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <MemManage_Handler+0x4>

08003410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <BusFault_Handler+0x4>

08003416 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <UsageFault_Handler+0x4>

0800341c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_GI1(DMA1)){
 8003458:	4808      	ldr	r0, [pc, #32]	; (800347c <DMA1_Channel1_IRQHandler+0x28>)
 800345a:	f7ff ff27 	bl	80032ac <LL_DMA_IsActiveFlag_GI1>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <DMA1_Channel1_IRQHandler+0x22>
	  osci_dma_ch1_TC_callback(app_IT_reference);
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <DMA1_Channel1_IRQHandler+0x2c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <DMA1_Channel1_IRQHandler+0x30>)
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
	  LL_DMA_ClearFlag_GI1(DMA1);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <DMA1_Channel1_IRQHandler+0x28>)
 8003472:	f7ff ff69 	bl	8003348 <LL_DMA_ClearFlag_GI1>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40020000 	.word	0x40020000
 8003480:	20000098 	.word	0x20000098
 8003484:	200000a8 	.word	0x200000a8

08003488 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	  if (LL_DMA_IsActiveFlag_GI2(DMA1)){
 800348c:	4808      	ldr	r0, [pc, #32]	; (80034b0 <DMA1_Channel2_IRQHandler+0x28>)
 800348e:	f7ff ff20 	bl	80032d2 <LL_DMA_IsActiveFlag_GI2>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <DMA1_Channel2_IRQHandler+0x22>
		  osci_dma_ch2_TC_callback(app_IT_reference);
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <DMA1_Channel2_IRQHandler+0x2c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <DMA1_Channel2_IRQHandler+0x30>)
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4610      	mov	r0, r2
 80034a2:	4798      	blx	r3
		  LL_DMA_ClearFlag_GI2(DMA1);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <DMA1_Channel2_IRQHandler+0x28>)
 80034a6:	f7ff ff5c 	bl	8003362 <LL_DMA_ClearFlag_GI2>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40020000 	.word	0x40020000
 80034b4:	20000090 	.word	0x20000090
 80034b8:	200000a8 	.word	0x200000a8

080034bc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if( LL_DMA_IsActiveFlag_TC6(DMA1)){
 80034c0:	4808      	ldr	r0, [pc, #32]	; (80034e4 <DMA1_Channel6_IRQHandler+0x28>)
 80034c2:	f7ff ff19 	bl	80032f8 <LL_DMA_IsActiveFlag_TC6>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <DMA1_Channel6_IRQHandler+0x22>
		osci_transceiver_received_callback(app_IT_reference);
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <DMA1_Channel6_IRQHandler+0x2c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <DMA1_Channel6_IRQHandler+0x30>)
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	4610      	mov	r0, r2
 80034d6:	4798      	blx	r3
		LL_DMA_ClearFlag_GI6(DMA1);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <DMA1_Channel6_IRQHandler+0x28>)
 80034da:	f7ff ff4f 	bl	800337c <LL_DMA_ClearFlag_GI6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40020000 	.word	0x40020000
 80034e8:	20000094 	.word	0x20000094
 80034ec:	200000a8 	.word	0x200000a8

080034f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if( LL_DMA_IsActiveFlag_TC7(DMA1)){
 80034f4:	4808      	ldr	r0, [pc, #32]	; (8003518 <DMA1_Channel7_IRQHandler+0x28>)
 80034f6:	f7ff ff13 	bl	8003320 <LL_DMA_IsActiveFlag_TC7>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <DMA1_Channel7_IRQHandler+0x22>
		osci_transceiver_sent_callback(app_IT_reference);
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <DMA1_Channel7_IRQHandler+0x2c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <DMA1_Channel7_IRQHandler+0x30>)
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
		LL_DMA_ClearFlag_GI7(DMA1);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <DMA1_Channel7_IRQHandler+0x28>)
 800350e:	f7ff ff43 	bl	8003398 <LL_DMA_ClearFlag_GI7>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40020000 	.word	0x40020000
 800351c:	2000009c 	.word	0x2000009c
 8003520:	200000a8 	.word	0x200000a8

08003524 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  if(LL_ADC_IsActiveFlag_AWD1(ADC1)){
 8003528:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800352c:	f7ff fe8a 	bl	8003244 <LL_ADC_IsActiveFlag_AWD1>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <ADC1_2_IRQHandler+0x26>
	  osci_adc_awd1_callback(app_IT_reference);
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <ADC1_2_IRQHandler+0x48>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <ADC1_2_IRQHandler+0x4c>)
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4610      	mov	r0, r2
 8003540:	4798      	blx	r3
	  LL_ADC_ClearFlag_AWD1(ADC1);
 8003542:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003546:	f7ff fea4 	bl	8003292 <LL_ADC_ClearFlag_AWD1>
  }

  if(LL_ADC_IsActiveFlag_AWD2(ADC2)){
 800354a:	480a      	ldr	r0, [pc, #40]	; (8003574 <ADC1_2_IRQHandler+0x50>)
 800354c:	f7ff fe8d 	bl	800326a <LL_ADC_IsActiveFlag_AWD2>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <ADC1_2_IRQHandler+0x44>
	  osci_adc_awd2_callback(app_IT_reference);
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <ADC1_2_IRQHandler+0x54>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <ADC1_2_IRQHandler+0x4c>)
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	4610      	mov	r0, r2
 8003560:	4798      	blx	r3
	  LL_ADC_ClearFlag_AWD1(ADC2);
 8003562:	4804      	ldr	r0, [pc, #16]	; (8003574 <ADC1_2_IRQHandler+0x50>)
 8003564:	f7ff fe95 	bl	8003292 <LL_ADC_ClearFlag_AWD1>
  /* USER CODE END ADC1_2_IRQn 0 */
  
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200000a4 	.word	0x200000a4
 8003570:	200000a8 	.word	0x200000a8
 8003574:	50000100 	.word	0x50000100
 8003578:	200000ac 	.word	0x200000ac

0800357c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM1)){
 8003580:	4808      	ldr	r0, [pc, #32]	; (80035a4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8003582:	f7ff ff25 	bl	80033d0 <LL_TIM_IsActiveFlag_UPDATE>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <TIM1_UP_TIM16_IRQHandler+0x22>
		osci_timer1_update_callback(app_IT_reference);
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <TIM1_UP_TIM16_IRQHandler+0x30>)
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800359a:	f7ff ff0b 	bl	80033b4 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	200000a0 	.word	0x200000a0
 80035ac:	200000a8 	.word	0x200000a8

080035b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

	  LL_mDelay(1);
 80035b4:	2001      	movs	r0, #1
 80035b6:	f001 f9d7 	bl	8004968 <LL_mDelay>
  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  if (LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80035c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035c8:	f7ff ff02 	bl	80033d0 <LL_TIM_IsActiveFlag_UPDATE>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <TIM2_IRQHandler+0x26>
	  osci_timer2_update_callback(app_IT_reference);
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <TIM2_IRQHandler+0x2c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <TIM2_IRQHandler+0x30>)
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	4610      	mov	r0, r2
 80035dc:	4798      	blx	r3
	  LL_TIM_ClearFlag_UPDATE(TIM2);
 80035de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035e2:	f7ff fee7 	bl	80033b4 <LL_TIM_ClearFlag_UPDATE>
  }
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200000b0 	.word	0x200000b0
 80035f0:	200000a8 	.word	0x200000a8

080035f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <_sbrk+0x50>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <_sbrk+0x16>
		heap_end = &end;
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <_sbrk+0x50>)
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <_sbrk+0x54>)
 8003608:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <_sbrk+0x50>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <_sbrk+0x50>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	466a      	mov	r2, sp
 800361a:	4293      	cmp	r3, r2
 800361c:	d907      	bls.n	800362e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800361e:	f001 f9df 	bl	80049e0 <__errno>
 8003622:	4602      	mov	r2, r0
 8003624:	230c      	movs	r3, #12
 8003626:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	e006      	b.n	800363c <_sbrk+0x48>
	}

	heap_end += incr;
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <_sbrk+0x50>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	4a03      	ldr	r2, [pc, #12]	; (8003644 <_sbrk+0x50>)
 8003638:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000084 	.word	0x20000084
 8003648:	200000b8 	.word	0x200000b8

0800364c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003650:	4b08      	ldr	r3, [pc, #32]	; (8003674 <SystemInit+0x28>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <SystemInit+0x28>)
 8003658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800365c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SystemInit+0x28>)
 8003662:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003666:	609a      	str	r2, [r3, #8]
#endif
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	; (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	; (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <LL_APB1_GRP1_EnableClock>:
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	4907      	ldr	r1, [pc, #28]	; (80037b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4013      	ands	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40021000 	.word	0x40021000

080037bc <LL_APB2_GRP1_EnableClock>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4013      	ands	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40021000 	.word	0x40021000

080037ec <LL_TIM_DisableARRPreload>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_TIM_SetClockSource>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_TIM_SetTriggerOutput>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_TIM_SetTriggerOutput2>:
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	605a      	str	r2, [r3, #4]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_TIM_DisableMasterSlaveMode>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80038b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038bc:	f7ff ff7e 	bl	80037bc <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80038c0:	f7ff feda 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff2a 	bl	8003724 <NVIC_EncodePriority>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4619      	mov	r1, r3
 80038d4:	2019      	movs	r0, #25
 80038d6:	f7ff fefb 	bl	80036d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80038da:	2019      	movs	r0, #25
 80038dc:	f7ff feda 	bl	8003694 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80038e0:	f7ff feca 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff1a 	bl	8003724 <NVIC_EncodePriority>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4619      	mov	r1, r3
 80038f4:	201b      	movs	r0, #27
 80038f6:	f7ff feeb 	bl	80036d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 80038fa:	201b      	movs	r0, #27
 80038fc:	f7ff feca 	bl	8003694 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 32000;
 8003900:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003904:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 800390a:	2301      	movs	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	4619      	mov	r1, r3
 800391a:	480c      	ldr	r0, [pc, #48]	; (800394c <MX_TIM1_Init+0xa8>)
 800391c:	f000 feb2 	bl	8004684 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003920:	480a      	ldr	r0, [pc, #40]	; (800394c <MX_TIM1_Init+0xa8>)
 8003922:	f7ff ff63 	bl	80037ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003926:	2100      	movs	r1, #0
 8003928:	4808      	ldr	r0, [pc, #32]	; (800394c <MX_TIM1_Init+0xa8>)
 800392a:	f7ff ff6f 	bl	800380c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800392e:	2100      	movs	r1, #0
 8003930:	4806      	ldr	r0, [pc, #24]	; (800394c <MX_TIM1_Init+0xa8>)
 8003932:	f7ff ff80 	bl	8003836 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8003936:	2100      	movs	r1, #0
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_TIM1_Init+0xa8>)
 800393a:	f7ff ff8f 	bl	800385c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <MX_TIM1_Init+0xa8>)
 8003940:	f7ff ff9f 	bl	8003882 <LL_TIM_DisableMasterSlaveMode>

}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40012c00 	.word	0x40012c00

08003950 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003964:	2001      	movs	r0, #1
 8003966:	f7ff ff11 	bl	800378c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800396a:	f7ff fe85 	bl	8003678 <__NVIC_GetPriorityGrouping>
 800396e:	4603      	mov	r3, r0
 8003970:	2200      	movs	r2, #0
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fed5 	bl	8003724 <NVIC_EncodePriority>
 800397a:	4603      	mov	r3, r0
 800397c:	4619      	mov	r1, r3
 800397e:	201c      	movs	r0, #28
 8003980:	f7ff fea6 	bl	80036d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003984:	201c      	movs	r0, #28
 8003986:	f7ff fe85 	bl	8003694 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 32000;
 800398a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800398e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8003994:	2301      	movs	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039a4:	f000 fe6e 	bl	8004684 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80039a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039ac:	f7ff ff1e 	bl	80037ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80039b0:	2100      	movs	r1, #0
 80039b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039b6:	f7ff ff29 	bl	800380c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80039ba:	2100      	movs	r1, #0
 80039bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039c0:	f7ff ff39 	bl	8003836 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80039c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039c8:	f7ff ff5b 	bl	8003882 <LL_TIM_DisableMasterSlaveMode>

}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <LL_DMA_SetDataTransferDirection>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <LL_DMA_SetDataTransferDirection+0x48>)
 80039e6:	5cd3      	ldrb	r3, [r2, r3]
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	3a01      	subs	r2, #1
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <LL_DMA_SetDataTransferDirection+0x48>)
 80039fe:	5c8a      	ldrb	r2, [r1, r2]
 8003a00:	4611      	mov	r1, r2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	440a      	add	r2, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	08004ce4 	.word	0x08004ce4

08003a20 <LL_DMA_SetMode>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <LL_DMA_SetMode+0x44>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0220 	bic.w	r2, r3, #32
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	4907      	ldr	r1, [pc, #28]	; (8003a64 <LL_DMA_SetMode+0x44>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	440b      	add	r3, r1
 8003a4e:	4619      	mov	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	08004ce4 	.word	0x08004ce4

08003a68 <LL_DMA_SetPeriphIncMode>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <LL_DMA_SetPeriphIncMode+0x44>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	4907      	ldr	r1, [pc, #28]	; (8003aac <LL_DMA_SetPeriphIncMode+0x44>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	4619      	mov	r1, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	440b      	add	r3, r1
 8003a96:	4619      	mov	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	08004ce4 	.word	0x08004ce4

08003ab0 <LL_DMA_SetMemoryIncMode>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <LL_DMA_SetMemoryIncMode+0x44>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4907      	ldr	r1, [pc, #28]	; (8003af4 <LL_DMA_SetMemoryIncMode+0x44>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	440b      	add	r3, r1
 8003ade:	4619      	mov	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	08004ce4 	.word	0x08004ce4

08003af8 <LL_DMA_SetPeriphSize>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <LL_DMA_SetPeriphSize+0x44>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <LL_DMA_SetPeriphSize+0x44>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	4619      	mov	r1, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	440b      	add	r3, r1
 8003b26:	4619      	mov	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	08004ce4 	.word	0x08004ce4

08003b40 <LL_DMA_SetMemorySize>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <LL_DMA_SetMemorySize+0x44>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	461a      	mov	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	4907      	ldr	r1, [pc, #28]	; (8003b84 <LL_DMA_SetMemorySize+0x44>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	440b      	add	r3, r1
 8003b6e:	4619      	mov	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	08004ce4 	.word	0x08004ce4

08003b88 <LL_DMA_SetChannelPriorityLevel>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a0c      	ldr	r2, [pc, #48]	; (8003bcc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	4907      	ldr	r1, [pc, #28]	; (8003bcc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	440b      	add	r3, r1
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	08004ce4 	.word	0x08004ce4

08003bd0 <LL_AHB1_GRP1_EnableClock>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	4907      	ldr	r1, [pc, #28]	; (8003bfc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4013      	ands	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40021000 	.word	0x40021000

08003c00 <LL_APB1_GRP1_EnableClock>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	4907      	ldr	r1, [pc, #28]	; (8003c2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40021000 	.word	0x40021000

08003c30 <LL_USART_Enable>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_USART_ConfigAsyncMode>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_USART_DisableIT_CTS>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08e      	sub	sp, #56	; 0x38
 8003ca0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003ca2:	f107 031c 	add.w	r3, r7, #28
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	611a      	str	r2, [r3, #16]
 8003cb2:	615a      	str	r2, [r3, #20]
 8003cb4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003cc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003cca:	f7ff ff99 	bl	8003c00 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003cce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003cd2:	f7ff ff7d 	bl	8003bd0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8003cd6:	f248 0304 	movw	r3, #32772	; 0x8004
 8003cda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003cec:	2307      	movs	r3, #7
 8003cee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf8:	f000 fa71 	bl	80041de <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2106      	movs	r1, #6
 8003d00:	4832      	ldr	r0, [pc, #200]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d02:	f7ff fe67 	bl	80039d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2106      	movs	r1, #6
 8003d0a:	4830      	ldr	r0, [pc, #192]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d0c:	f7ff ff3c 	bl	8003b88 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8003d10:	2220      	movs	r2, #32
 8003d12:	2106      	movs	r1, #6
 8003d14:	482d      	ldr	r0, [pc, #180]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d16:	f7ff fe83 	bl	8003a20 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2106      	movs	r1, #6
 8003d1e:	482b      	ldr	r0, [pc, #172]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d20:	f7ff fea2 	bl	8003a68 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	2106      	movs	r1, #6
 8003d28:	4828      	ldr	r0, [pc, #160]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d2a:	f7ff fec1 	bl	8003ab0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2106      	movs	r1, #6
 8003d32:	4826      	ldr	r0, [pc, #152]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d34:	f7ff fee0 	bl	8003af8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2106      	movs	r1, #6
 8003d3c:	4823      	ldr	r0, [pc, #140]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d3e:	f7ff feff 	bl	8003b40 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003d42:	2210      	movs	r2, #16
 8003d44:	2107      	movs	r1, #7
 8003d46:	4821      	ldr	r0, [pc, #132]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d48:	f7ff fe44 	bl	80039d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2107      	movs	r1, #7
 8003d50:	481e      	ldr	r0, [pc, #120]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d52:	f7ff ff19 	bl	8003b88 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2107      	movs	r1, #7
 8003d5a:	481c      	ldr	r0, [pc, #112]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d5c:	f7ff fe60 	bl	8003a20 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8003d60:	2200      	movs	r2, #0
 8003d62:	2107      	movs	r1, #7
 8003d64:	4819      	ldr	r0, [pc, #100]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d66:	f7ff fe7f 	bl	8003a68 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	2107      	movs	r1, #7
 8003d6e:	4817      	ldr	r0, [pc, #92]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d70:	f7ff fe9e 	bl	8003ab0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8003d74:	2200      	movs	r2, #0
 8003d76:	2107      	movs	r1, #7
 8003d78:	4814      	ldr	r0, [pc, #80]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d7a:	f7ff febd 	bl	8003af8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2107      	movs	r1, #7
 8003d82:	4812      	ldr	r0, [pc, #72]	; (8003dcc <MX_USART2_UART_Init+0x130>)
 8003d84:	f7ff fedc 	bl	8003b40 <LL_DMA_SetMemorySize>

  USART_InitStruct.BaudRate = 921600;
 8003d88:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8003d8c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003da2:	2300      	movs	r3, #0
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	4619      	mov	r1, r3
 8003dac:	4808      	ldr	r0, [pc, #32]	; (8003dd0 <MX_USART2_UART_Init+0x134>)
 8003dae:	f000 fd47 	bl	8004840 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8003db2:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <MX_USART2_UART_Init+0x134>)
 8003db4:	f7ff ff62 	bl	8003c7c <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8003db8:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <MX_USART2_UART_Init+0x134>)
 8003dba:	f7ff ff49 	bl	8003c50 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003dbe:	4804      	ldr	r0, [pc, #16]	; (8003dd0 <MX_USART2_UART_Init+0x134>)
 8003dc0:	f7ff ff36 	bl	8003c30 <LL_USART_Enable>

}
 8003dc4:	bf00      	nop
 8003dc6:	3738      	adds	r7, #56	; 0x38
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	40004400 	.word	0x40004400

08003dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003dd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003dda:	e003      	b.n	8003de4 <LoopCopyDataInit>

08003ddc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003dde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003de0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003de2:	3104      	adds	r1, #4

08003de4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003de8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003dea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003dec:	d3f6      	bcc.n	8003ddc <CopyDataInit>
	ldr	r2, =_sbss
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003df0:	e002      	b.n	8003df8 <LoopFillZerobss>

08003df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003df2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003df4:	f842 3b04 	str.w	r3, [r2], #4

08003df8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <LoopForever+0x16>)
	cmp	r2, r3
 8003dfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003dfc:	d3f9      	bcc.n	8003df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dfe:	f7ff fc25 	bl	800364c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e02:	f000 fdf3 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e06:	f7fd fb03 	bl	8001410 <main>

08003e0a <LoopForever>:

LoopForever:
    b LoopForever
 8003e0a:	e7fe      	b.n	8003e0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e0c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003e10:	08004cf4 	.word	0x08004cf4
	ldr	r0, =_sdata
 8003e14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e18:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003e1c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003e20:	200000b8 	.word	0x200000b8

08003e24 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e24:	e7fe      	b.n	8003e24 <CAN_RX0_IRQHandler>

08003e26 <LL_ADC_REG_SetSequencerLength>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f023 020f 	bic.w	r2, r3, #15
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_IsEnabled>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003e82:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e86:	f7ff ffe1 	bl	8003e4c <LL_ADC_IsEnabled>
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4817      	ldr	r0, [pc, #92]	; (8003eec <LL_ADC_CommonInit+0x78>)
 8003e8e:	f7ff ffdd 	bl	8003e4c <LL_ADC_IsEnabled>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4323      	orrs	r3, r4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d120      	bne.n	8003edc <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d012      	beq.n	8003ec8 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <LL_ADC_CommonInit+0x7c>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	6811      	ldr	r1, [r2, #0]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	6852      	ldr	r2, [r2, #4]
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	6892      	ldr	r2, [r2, #8]
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	68d2      	ldr	r2, [r2, #12]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	e00b      	b.n	8003ee0 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <LL_ADC_CommonInit+0x7c>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e001      	b.n	8003ee0 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	50000100 	.word	0x50000100
 8003ef0:	fffc30e0 	.word	0xfffc30e0

08003ef4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ffa2 	bl	8003e4c <LL_ADC_IsEnabled>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d111      	bne.n	8003f32 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f16:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	6852      	ldr	r2, [r2, #4]
 8003f22:	4311      	orrs	r1, r2
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	6892      	ldr	r2, [r2, #8]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	e001      	b.n	8003f36 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ff7c 	bl	8003e4c <LL_ADC_IsEnabled>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d132      	bne.n	8003fc0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d015      	beq.n	8003f8e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <LL_ADC_REG_Init+0x90>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	6811      	ldr	r1, [r2, #0]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	6892      	ldr	r2, [r2, #8]
 8003f72:	4311      	orrs	r1, r2
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	68d2      	ldr	r2, [r2, #12]
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	6912      	ldr	r2, [r2, #16]
 8003f7e:	4311      	orrs	r1, r2
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	6952      	ldr	r2, [r2, #20]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	e011      	b.n	8003fb2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <LL_ADC_REG_Init+0x90>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	6811      	ldr	r1, [r2, #0]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	6912      	ldr	r2, [r2, #16]
 8003fa4:	4311      	orrs	r1, r2
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	6952      	ldr	r2, [r2, #20]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff34 	bl	8003e26 <LL_ADC_REG_SetSequencerLength>
 8003fbe:	e001      	b.n	8003fc4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	fff0c03c 	.word	0xfff0c03c

08003fd4 <LL_GPIO_SetPinMode>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	613b      	str	r3, [r7, #16]
  return result;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2103      	movs	r1, #3
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	61bb      	str	r3, [r7, #24]
  return result;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3724      	adds	r7, #36	; 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_GPIO_SetPinOutputType>:
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_GPIO_SetPinSpeed>:
{
 8004062:	b480      	push	{r7}
 8004064:	b089      	sub	sp, #36	; 0x24
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	613b      	str	r3, [r7, #16]
  return result;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	2103      	movs	r1, #3
 800408a:	fa01 f303 	lsl.w	r3, r1, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	401a      	ands	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	61bb      	str	r3, [r7, #24]
  return result;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	3724      	adds	r7, #36	; 0x24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_GPIO_SetPinPull>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	613b      	str	r3, [r7, #16]
  return result;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2103      	movs	r1, #3
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	61bb      	str	r3, [r7, #24]
  return result;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	60da      	str	r2, [r3, #12]
}
 8004112:	bf00      	nop
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_GPIO_SetAFPin_0_7>:
{
 800411e:	b480      	push	{r7}
 8004120:	b089      	sub	sp, #36	; 0x24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	613b      	str	r3, [r7, #16]
  return result;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	210f      	movs	r1, #15
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	401a      	ands	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	61bb      	str	r3, [r7, #24]
  return result;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	fa01 f303 	lsl.w	r3, r1, r3
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	621a      	str	r2, [r3, #32]
}
 8004170:	bf00      	nop
 8004172:	3724      	adds	r7, #36	; 0x24
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_GPIO_SetAFPin_8_15>:
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	613b      	str	r3, [r7, #16]
  return result;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	210f      	movs	r1, #15
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	401a      	ands	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	61bb      	str	r3, [r7, #24]
  return result;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80041d2:	bf00      	nop
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b088      	sub	sp, #32
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	613b      	str	r3, [r7, #16]
  return result;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004200:	e049      	b.n	8004296 <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d03b      	beq.n	8004290 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	461a      	mov	r2, r3
 800421e:	69b9      	ldr	r1, [r7, #24]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fed7 	bl	8003fd4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d003      	beq.n	8004236 <LL_GPIO_Init+0x58>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d106      	bne.n	8004244 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	461a      	mov	r2, r3
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ff0f 	bl	8004062 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	461a      	mov	r2, r3
 800424a:	69b9      	ldr	r1, [r7, #24]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff37 	bl	80040c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d11a      	bne.n	8004290 <LL_GPIO_Init+0xb2>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	60bb      	str	r3, [r7, #8]
  return result;
 8004266:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004268:	fab3 f383 	clz	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b07      	cmp	r3, #7
 8004270:	d807      	bhi.n	8004282 <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	461a      	mov	r2, r3
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff4f 	bl	800411e <LL_GPIO_SetAFPin_0_7>
 8004280:	e006      	b.n	8004290 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	461a      	mov	r2, r3
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff76 	bl	800417c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ae      	bne.n	8004202 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d003      	beq.n	80042b4 <LL_GPIO_Init+0xd6>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d107      	bne.n	80042c4 <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	461a      	mov	r2, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff feb7 	bl	8004032 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <LL_RCC_HSI_IsReady>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <LL_RCC_HSI_IsReady+0x20>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40021000 	.word	0x40021000

080042f4 <LL_RCC_LSE_IsReady>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <LL_RCC_LSE_IsReady+0x20>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40021000 	.word	0x40021000

08004318 <LL_RCC_GetSysClkSource>:
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <LL_RCC_GetSysClkSource+0x18>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000

08004334 <LL_RCC_GetAHBPrescaler>:
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <LL_RCC_GetAHBPrescaler+0x18>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000

08004350 <LL_RCC_GetAPB1Prescaler>:
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <LL_RCC_GetAPB2Prescaler>:
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000

08004388 <LL_RCC_GetUSARTClockSource>:
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <LL_RCC_GetUSARTClockSource+0x28>)
 8004392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004394:	2103      	movs	r1, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	401a      	ands	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	4313      	orrs	r3, r2
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40021000 	.word	0x40021000

080043b4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <LL_RCC_PLL_GetMainSource+0x18>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000

080043ec <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <LL_RCC_PLL_GetPrediv+0x18>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f003 030f 	and.w	r3, r3, #15
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000

08004408 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004410:	f000 f860 	bl	80044d4 <RCC_GetSystemClockFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f87a 	bl	8004518 <RCC_GetHCLKClockFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f888 	bl	8004544 <RCC_GetPCLK1ClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f894 	bl	800456c <RCC_GetPCLK2ClockFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d12a      	bne.n	80044bc <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7ff ff8e 	bl	8004388 <LL_RCC_GetUSARTClockSource>
 800446c:	4603      	mov	r3, r0
 800446e:	2b02      	cmp	r3, #2
 8004470:	d00f      	beq.n	8004492 <LL_RCC_GetUSARTClockFreq+0x3e>
 8004472:	2b03      	cmp	r3, #3
 8004474:	d005      	beq.n	8004482 <LL_RCC_GetUSARTClockFreq+0x2e>
 8004476:	2b01      	cmp	r3, #1
 8004478:	d114      	bne.n	80044a4 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800447a:	f000 f82b 	bl	80044d4 <RCC_GetSystemClockFreq>
 800447e:	60f8      	str	r0, [r7, #12]
        break;
 8004480:	e021      	b.n	80044c6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004482:	f7ff ff25 	bl	80042d0 <LL_RCC_HSI_IsReady>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d019      	beq.n	80044c0 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <LL_RCC_GetUSARTClockFreq+0x7c>)
 800448e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004490:	e016      	b.n	80044c0 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004492:	f7ff ff2f 	bl	80042f4 <LL_RCC_LSE_IsReady>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 800449c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80044a2:	e00f      	b.n	80044c4 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80044a4:	f000 f816 	bl	80044d4 <RCC_GetSystemClockFreq>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f834 	bl	8004518 <RCC_GetHCLKClockFreq>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f846 	bl	8004544 <RCC_GetPCLK1ClockFreq>
 80044b8:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80044ba:	e004      	b.n	80044c6 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80044c4:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	007a1200 	.word	0x007a1200

080044d4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80044de:	f7ff ff1b 	bl	8004318 <LL_RCC_GetSysClkSource>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d006      	beq.n	80044f6 <RCC_GetSystemClockFreq+0x22>
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d007      	beq.n	80044fc <RCC_GetSystemClockFreq+0x28>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <RCC_GetSystemClockFreq+0x40>)
 80044f2:	607b      	str	r3, [r7, #4]
      break;
 80044f4:	e009      	b.n	800450a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <RCC_GetSystemClockFreq+0x40>)
 80044f8:	607b      	str	r3, [r7, #4]
      break;
 80044fa:	e006      	b.n	800450a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80044fc:	f000 f84a 	bl	8004594 <RCC_PLL_GetFreqDomain_SYS>
 8004500:	6078      	str	r0, [r7, #4]
      break;
 8004502:	e002      	b.n	800450a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <RCC_GetSystemClockFreq+0x40>)
 8004506:	607b      	str	r3, [r7, #4]
      break;
 8004508:	bf00      	nop
  }

  return frequency;
 800450a:	687b      	ldr	r3, [r7, #4]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	007a1200 	.word	0x007a1200

08004518 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004520:	f7ff ff08 	bl	8004334 <LL_RCC_GetAHBPrescaler>
 8004524:	4603      	mov	r3, r0
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <RCC_GetHCLKClockFreq+0x28>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	40d3      	lsrs	r3, r2
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	08004ccc 	.word	0x08004ccc

08004544 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800454c:	f7ff ff00 	bl	8004350 <LL_RCC_GetAPB1Prescaler>
 8004550:	4603      	mov	r3, r0
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <RCC_GetPCLK1ClockFreq+0x24>)
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	40d3      	lsrs	r3, r2
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	08004cdc 	.word	0x08004cdc

0800456c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004574:	f7ff fefa 	bl	800436c <LL_RCC_GetAPB2Prescaler>
 8004578:	4603      	mov	r3, r0
 800457a:	0adb      	lsrs	r3, r3, #11
 800457c:	4a04      	ldr	r2, [pc, #16]	; (8004590 <RCC_GetPCLK2ClockFreq+0x24>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	40d3      	lsrs	r3, r2
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	08004cdc 	.word	0x08004cdc

08004594 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80045a2:	f7ff ff07 	bl	80043b4 <LL_RCC_PLL_GetMainSource>
 80045a6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d003      	beq.n	80045bc <RCC_PLL_GetFreqDomain_SYS+0x28>
 80045b4:	e005      	b.n	80045c2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80045b8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80045ba:	e005      	b.n	80045c8 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80045be:	60fb      	str	r3, [r7, #12]
      break;
 80045c0:	e002      	b.n	80045c8 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80045c4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80045c6:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80045c8:	f7ff ff10 	bl	80043ec <LL_RCC_PLL_GetPrediv>
 80045cc:	4603      	mov	r3, r0
 80045ce:	3301      	adds	r3, #1
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	fbb2 f4f3 	udiv	r4, r2, r3
 80045d6:	f7ff fefb 	bl	80043d0 <LL_RCC_PLL_GetMultiplicator>
 80045da:	4603      	mov	r3, r0
 80045dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	603a      	str	r2, [r7, #0]
  return result;
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	40d3      	lsrs	r3, r2
 80045f8:	3302      	adds	r3, #2
 80045fa:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bd90      	pop	{r4, r7, pc}
 8004606:	bf00      	nop
 8004608:	003d0900 	.word	0x003d0900
 800460c:	007a1200 	.word	0x007a1200

08004610 <LL_TIM_SetPrescaler>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <LL_TIM_SetAutoReload>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_TIM_SetRepetitionCounter>:
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	615a      	str	r2, [r3, #20]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <LL_TIM_Init+0xd0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <LL_TIM_Init+0x28>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d003      	beq.n	80046ac <LL_TIM_Init+0x28>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <LL_TIM_Init+0xd4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d106      	bne.n	80046ba <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a25      	ldr	r2, [pc, #148]	; (8004754 <LL_TIM_Init+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <LL_TIM_Init+0x66>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d00f      	beq.n	80046ea <LL_TIM_Init+0x66>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <LL_TIM_Init+0xd4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <LL_TIM_Init+0x66>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a21      	ldr	r2, [pc, #132]	; (800475c <LL_TIM_Init+0xd8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <LL_TIM_Init+0x66>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <LL_TIM_Init+0xdc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <LL_TIM_Init+0x66>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <LL_TIM_Init+0xe0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d106      	bne.n	80046f8 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff91 	bl	800462c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff7d 	bl	8004610 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a0e      	ldr	r2, [pc, #56]	; (8004754 <LL_TIM_Init+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <LL_TIM_Init+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0e      	ldr	r2, [pc, #56]	; (800475c <LL_TIM_Init+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <LL_TIM_Init+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <LL_TIM_Init+0xdc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <LL_TIM_Init+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <LL_TIM_Init+0xe0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d105      	bne.n	8004742 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	7c1b      	ldrb	r3, [r3, #16]
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff83 	bl	8004648 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff8e 	bl	8004664 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800

08004768 <LL_USART_IsEnabled>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <LL_USART_IsEnabled+0x18>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <LL_USART_IsEnabled+0x1a>
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_USART_SetStopBitsLength>:
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	605a      	str	r2, [r3, #4]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_USART_SetHWFlowCtrl>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_USART_SetBaudRate>:
{
 80047da:	b490      	push	{r4, r7}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ee:	d116      	bne.n	800481e <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	005a      	lsls	r2, r3, #1
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	441a      	add	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800480a:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	b29b      	uxth	r3, r3
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	60dc      	str	r4, [r3, #12]
}
 800481c:	e00a      	b.n	8004834 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	085a      	lsrs	r2, r3, #1
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	441a      	add	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	b29b      	uxth	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	60da      	str	r2, [r3, #12]
}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bc90      	pop	{r4, r7}
 800483c:	4770      	bx	lr
	...

08004840 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff88 	bl	8004768 <LL_USART_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d14e      	bne.n	80048fc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <LL_USART_Init+0xc8>)
 8004864:	4013      	ands	r3, r2
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	6851      	ldr	r1, [r2, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	4311      	orrs	r1, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	6912      	ldr	r2, [r2, #16]
 8004874:	4311      	orrs	r1, r2
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	6992      	ldr	r2, [r2, #24]
 800487a:	430a      	orrs	r2, r1
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff80 	bl	800478e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff8d 	bl	80047b4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <LL_USART_Init+0xcc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d104      	bne.n	80048ac <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80048a2:	2000      	movs	r0, #0
 80048a4:	f7ff fdd6 	bl	8004454 <LL_RCC_GetUSARTClockFreq>
 80048a8:	61b8      	str	r0, [r7, #24]
 80048aa:	e016      	b.n	80048da <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a18      	ldr	r2, [pc, #96]	; (8004910 <LL_USART_Init+0xd0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d107      	bne.n	80048c4 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fda5 	bl	8004408 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e00a      	b.n	80048da <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a13      	ldr	r2, [pc, #76]	; (8004914 <LL_USART_Init+0xd4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d106      	bne.n	80048da <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80048cc:	f107 0308 	add.w	r3, r7, #8
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fd99 	bl	8004408 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d009      	beq.n	80048fc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69b9      	ldr	r1, [r7, #24]
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ff6f 	bl	80047da <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80048fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	efff69f3 	.word	0xefff69f3
 800490c:	40013800 	.word	0x40013800
 8004910:	40004400 	.word	0x40004400
 8004914:	40004800 	.word	0x40004800

08004918 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <LL_InitTick+0x30>)
 800492c:	3b01      	subs	r3, #1
 800492e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <LL_InitTick+0x30>)
 8004932:	2200      	movs	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <LL_InitTick+0x30>)
 8004938:	2205      	movs	r2, #5
 800493a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000e010 	.word	0xe000e010

0800494c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004954:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ffdd 	bl	8004918 <LL_InitTick>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <LL_mDelay+0x44>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004976:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d00c      	beq.n	800499a <LL_mDelay+0x32>
  {
    Delay++;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3301      	adds	r3, #1
 8004984:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004986:	e008      	b.n	800499a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <LL_mDelay+0x44>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <LL_mDelay+0x32>
    {
      Delay--;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	607b      	str	r3, [r7, #4]
  while (Delay)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f3      	bne.n	8004988 <LL_mDelay+0x20>
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000e010 	.word	0xe000e010

080049b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <LL_SetSystemCoreClock+0x1c>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000000 	.word	0x20000000

080049d0 <calloc>:
 80049d0:	4b02      	ldr	r3, [pc, #8]	; (80049dc <calloc+0xc>)
 80049d2:	460a      	mov	r2, r1
 80049d4:	4601      	mov	r1, r0
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	f000 b83f 	b.w	8004a5a <_calloc_r>
 80049dc:	20000004 	.word	0x20000004

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000004 	.word	0x20000004

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4e0d      	ldr	r6, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1ba4      	subs	r4, r4, r6
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2500      	movs	r5, #0
 80049f8:	42a5      	cmp	r5, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4e0b      	ldr	r6, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f92a 	bl	8004c58 <_init>
 8004a04:	1ba4      	subs	r4, r4, r6
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2500      	movs	r5, #0
 8004a0a:	42a5      	cmp	r5, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a14:	4798      	blx	r3
 8004a16:	3501      	adds	r5, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a1e:	4798      	blx	r3
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004cec 	.word	0x08004cec
 8004a28:	08004cec 	.word	0x08004cec
 8004a2c:	08004cec 	.word	0x08004cec
 8004a30:	08004cf0 	.word	0x08004cf0

08004a34 <memcpy>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	1e43      	subs	r3, r0, #1
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a48:	e7f7      	b.n	8004a3a <memcpy+0x6>

08004a4a <memset>:
 8004a4a:	4402      	add	r2, r0
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d100      	bne.n	8004a54 <memset+0xa>
 8004a52:	4770      	bx	lr
 8004a54:	f803 1b01 	strb.w	r1, [r3], #1
 8004a58:	e7f9      	b.n	8004a4e <memset+0x4>

08004a5a <_calloc_r>:
 8004a5a:	b538      	push	{r3, r4, r5, lr}
 8004a5c:	fb02 f401 	mul.w	r4, r2, r1
 8004a60:	4621      	mov	r1, r4
 8004a62:	f000 f809 	bl	8004a78 <_malloc_r>
 8004a66:	4605      	mov	r5, r0
 8004a68:	b118      	cbz	r0, 8004a72 <_calloc_r+0x18>
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	f7ff ffec 	bl	8004a4a <memset>
 8004a72:	4628      	mov	r0, r5
 8004a74:	bd38      	pop	{r3, r4, r5, pc}
	...

08004a78 <_malloc_r>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	1ccd      	adds	r5, r1, #3
 8004a7c:	f025 0503 	bic.w	r5, r5, #3
 8004a80:	3508      	adds	r5, #8
 8004a82:	2d0c      	cmp	r5, #12
 8004a84:	bf38      	it	cc
 8004a86:	250c      	movcc	r5, #12
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	db01      	blt.n	8004a92 <_malloc_r+0x1a>
 8004a8e:	42a9      	cmp	r1, r5
 8004a90:	d903      	bls.n	8004a9a <_malloc_r+0x22>
 8004a92:	230c      	movs	r3, #12
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	2000      	movs	r0, #0
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	f000 f857 	bl	8004b4c <__malloc_lock>
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <_malloc_r+0xac>)
 8004aa0:	6814      	ldr	r4, [r2, #0]
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	b991      	cbnz	r1, 8004acc <_malloc_r+0x54>
 8004aa6:	4c20      	ldr	r4, [pc, #128]	; (8004b28 <_malloc_r+0xb0>)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	b91b      	cbnz	r3, 8004ab4 <_malloc_r+0x3c>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f83d 	bl	8004b2c <_sbrk_r>
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f838 	bl	8004b2c <_sbrk_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d124      	bne.n	8004b0a <_malloc_r+0x92>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	6033      	str	r3, [r6, #0]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 f842 	bl	8004b4e <__malloc_unlock>
 8004aca:	e7e4      	b.n	8004a96 <_malloc_r+0x1e>
 8004acc:	680b      	ldr	r3, [r1, #0]
 8004ace:	1b5b      	subs	r3, r3, r5
 8004ad0:	d418      	bmi.n	8004b04 <_malloc_r+0x8c>
 8004ad2:	2b0b      	cmp	r3, #11
 8004ad4:	d90f      	bls.n	8004af6 <_malloc_r+0x7e>
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	50cd      	str	r5, [r1, r3]
 8004ada:	18cc      	adds	r4, r1, r3
 8004adc:	4630      	mov	r0, r6
 8004ade:	f000 f836 	bl	8004b4e <__malloc_unlock>
 8004ae2:	f104 000b 	add.w	r0, r4, #11
 8004ae6:	1d23      	adds	r3, r4, #4
 8004ae8:	f020 0007 	bic.w	r0, r0, #7
 8004aec:	1ac3      	subs	r3, r0, r3
 8004aee:	d0d3      	beq.n	8004a98 <_malloc_r+0x20>
 8004af0:	425a      	negs	r2, r3
 8004af2:	50e2      	str	r2, [r4, r3]
 8004af4:	e7d0      	b.n	8004a98 <_malloc_r+0x20>
 8004af6:	428c      	cmp	r4, r1
 8004af8:	684b      	ldr	r3, [r1, #4]
 8004afa:	bf16      	itet	ne
 8004afc:	6063      	strne	r3, [r4, #4]
 8004afe:	6013      	streq	r3, [r2, #0]
 8004b00:	460c      	movne	r4, r1
 8004b02:	e7eb      	b.n	8004adc <_malloc_r+0x64>
 8004b04:	460c      	mov	r4, r1
 8004b06:	6849      	ldr	r1, [r1, #4]
 8004b08:	e7cc      	b.n	8004aa4 <_malloc_r+0x2c>
 8004b0a:	1cc4      	adds	r4, r0, #3
 8004b0c:	f024 0403 	bic.w	r4, r4, #3
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d005      	beq.n	8004b20 <_malloc_r+0xa8>
 8004b14:	1a21      	subs	r1, r4, r0
 8004b16:	4630      	mov	r0, r6
 8004b18:	f000 f808 	bl	8004b2c <_sbrk_r>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d0cf      	beq.n	8004ac0 <_malloc_r+0x48>
 8004b20:	6025      	str	r5, [r4, #0]
 8004b22:	e7db      	b.n	8004adc <_malloc_r+0x64>
 8004b24:	20000088 	.word	0x20000088
 8004b28:	2000008c 	.word	0x2000008c

08004b2c <_sbrk_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4c06      	ldr	r4, [pc, #24]	; (8004b48 <_sbrk_r+0x1c>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4605      	mov	r5, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	f7fe fd5c 	bl	80035f4 <_sbrk>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_sbrk_r+0x1a>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_sbrk_r+0x1a>
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	200000b4 	.word	0x200000b4

08004b4c <__malloc_lock>:
 8004b4c:	4770      	bx	lr

08004b4e <__malloc_unlock>:
 8004b4e:	4770      	bx	lr

08004b50 <floor>:
 8004b50:	ec51 0b10 	vmov	r0, r1, d0
 8004b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004b5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004b60:	2e13      	cmp	r6, #19
 8004b62:	460c      	mov	r4, r1
 8004b64:	ee10 5a10 	vmov	r5, s0
 8004b68:	4680      	mov	r8, r0
 8004b6a:	dc34      	bgt.n	8004bd6 <floor+0x86>
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	da16      	bge.n	8004b9e <floor+0x4e>
 8004b70:	a335      	add	r3, pc, #212	; (adr r3, 8004c48 <floor+0xf8>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f7fb fb2d 	bl	80001d4 <__adddf3>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f7fb fd5d 	bl	800063c <__aeabi_dcmpgt>
 8004b82:	b148      	cbz	r0, 8004b98 <floor+0x48>
 8004b84:	2c00      	cmp	r4, #0
 8004b86:	da59      	bge.n	8004c3c <floor+0xec>
 8004b88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b8c:	4a30      	ldr	r2, [pc, #192]	; (8004c50 <floor+0x100>)
 8004b8e:	432b      	orrs	r3, r5
 8004b90:	2500      	movs	r5, #0
 8004b92:	42ab      	cmp	r3, r5
 8004b94:	bf18      	it	ne
 8004b96:	4614      	movne	r4, r2
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	e025      	b.n	8004bea <floor+0x9a>
 8004b9e:	4f2d      	ldr	r7, [pc, #180]	; (8004c54 <floor+0x104>)
 8004ba0:	4137      	asrs	r7, r6
 8004ba2:	ea01 0307 	and.w	r3, r1, r7
 8004ba6:	4303      	orrs	r3, r0
 8004ba8:	d01f      	beq.n	8004bea <floor+0x9a>
 8004baa:	a327      	add	r3, pc, #156	; (adr r3, 8004c48 <floor+0xf8>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fb10 	bl	80001d4 <__adddf3>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f7fb fd40 	bl	800063c <__aeabi_dcmpgt>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d0eb      	beq.n	8004b98 <floor+0x48>
 8004bc0:	2c00      	cmp	r4, #0
 8004bc2:	bfbe      	ittt	lt
 8004bc4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004bc8:	fa43 f606 	asrlt.w	r6, r3, r6
 8004bcc:	19a4      	addlt	r4, r4, r6
 8004bce:	ea24 0407 	bic.w	r4, r4, r7
 8004bd2:	2500      	movs	r5, #0
 8004bd4:	e7e0      	b.n	8004b98 <floor+0x48>
 8004bd6:	2e33      	cmp	r6, #51	; 0x33
 8004bd8:	dd0b      	ble.n	8004bf2 <floor+0xa2>
 8004bda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004bde:	d104      	bne.n	8004bea <floor+0x9a>
 8004be0:	ee10 2a10 	vmov	r2, s0
 8004be4:	460b      	mov	r3, r1
 8004be6:	f7fb faf5 	bl	80001d4 <__adddf3>
 8004bea:	ec41 0b10 	vmov	d0, r0, r1
 8004bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	fa23 f707 	lsr.w	r7, r3, r7
 8004bfe:	4207      	tst	r7, r0
 8004c00:	d0f3      	beq.n	8004bea <floor+0x9a>
 8004c02:	a311      	add	r3, pc, #68	; (adr r3, 8004c48 <floor+0xf8>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fae4 	bl	80001d4 <__adddf3>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb fd14 	bl	800063c <__aeabi_dcmpgt>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d0bf      	beq.n	8004b98 <floor+0x48>
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	da02      	bge.n	8004c22 <floor+0xd2>
 8004c1c:	2e14      	cmp	r6, #20
 8004c1e:	d103      	bne.n	8004c28 <floor+0xd8>
 8004c20:	3401      	adds	r4, #1
 8004c22:	ea25 0507 	bic.w	r5, r5, r7
 8004c26:	e7b7      	b.n	8004b98 <floor+0x48>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004c2e:	fa03 f606 	lsl.w	r6, r3, r6
 8004c32:	4435      	add	r5, r6
 8004c34:	4545      	cmp	r5, r8
 8004c36:	bf38      	it	cc
 8004c38:	18e4      	addcc	r4, r4, r3
 8004c3a:	e7f2      	b.n	8004c22 <floor+0xd2>
 8004c3c:	2500      	movs	r5, #0
 8004c3e:	462c      	mov	r4, r5
 8004c40:	e7aa      	b.n	8004b98 <floor+0x48>
 8004c42:	bf00      	nop
 8004c44:	f3af 8000 	nop.w
 8004c48:	8800759c 	.word	0x8800759c
 8004c4c:	7e37e43c 	.word	0x7e37e43c
 8004c50:	bff00000 	.word	0xbff00000
 8004c54:	000fffff 	.word	0x000fffff

08004c58 <_init>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr

08004c64 <_fini>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr
