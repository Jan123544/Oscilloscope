
osci_test_vrefint_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f24  08000f24  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f24  08000f24  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000f24  08000f24  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f24  08000f24  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f28  08000f28  00010f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000f30  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000f30  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031a1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ac1  00000000  00000000  000231d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e8  00000000  00000000  00023c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000380  00000000  00000000  00024080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014dd0  00000000  00000000  00024400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002850  00000000  00000000  000391d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000786cb  00000000  00000000  0003ba20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b40eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f3c  00000000  00000000  000b4168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f0c 	.word	0x08000f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000f0c 	.word	0x08000f0c

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002da:	b480      	push	{r7}
 80002dc:	b083      	sub	sp, #12
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
 80002e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	431a      	orrs	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	609a      	str	r2, [r3, #8]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000300:	b490      	push	{r4, r7}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3330      	adds	r3, #48	; 0x30
 8000310:	4619      	mov	r1, r3
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000318:	f44f 7240 	mov.w	r2, #768	; 0x300
 800031c:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031e:	697a      	ldr	r2, [r7, #20]
 8000320:	fa92 f2a2 	rbit	r2, r2
 8000324:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000326:	693a      	ldr	r2, [r7, #16]
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	40d3      	lsrs	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	440b      	add	r3, r1
 8000334:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000336:	6822      	ldr	r2, [r4, #0]
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	f003 031f 	and.w	r3, r3, #31
 800033e:	211f      	movs	r1, #31
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	f003 031f 	and.w	r3, r3, #31
 8000354:	f1c3 031a 	rsb	r3, r3, #26
 8000358:	fa21 f303 	lsr.w	r3, r1, r3
 800035c:	4313      	orrs	r3, r2
 800035e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8000360:	bf00      	nop
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bc90      	pop	{r4, r7}
 8000368:	4770      	bx	lr

0800036a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800036a:	b490      	push	{r4, r7}
 800036c:	b08a      	sub	sp, #40	; 0x28
 800036e:	af00      	add	r7, sp, #0
 8000370:	60f8      	str	r0, [r7, #12]
 8000372:	60b9      	str	r1, [r7, #8]
 8000374:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3314      	adds	r3, #20
 800037a:	4619      	mov	r1, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	fa92 f2a2 	rbit	r2, r2
 800038e:	613a      	str	r2, [r7, #16]
  return result;
 8000390:	693a      	ldr	r2, [r7, #16]
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	40d3      	lsrs	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	440b      	add	r3, r1
 800039e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80003a0:	6822      	ldr	r2, [r4, #0]
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80003a8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80003ac:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ae:	69f9      	ldr	r1, [r7, #28]
 80003b0:	fa91 f1a1 	rbit	r1, r1
 80003b4:	61b9      	str	r1, [r7, #24]
  return result;
 80003b6:	69b9      	ldr	r1, [r7, #24]
 80003b8:	fab1 f181 	clz	r1, r1
 80003bc:	b2c9      	uxtb	r1, r1
 80003be:	40cb      	lsrs	r3, r1
 80003c0:	2107      	movs	r1, #7
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	43db      	mvns	r3, r3
 80003c8:	401a      	ands	r2, r3
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80003d0:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80003d4:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80003d8:	fa91 f1a1 	rbit	r1, r1
 80003dc:	6239      	str	r1, [r7, #32]
  return result;
 80003de:	6a39      	ldr	r1, [r7, #32]
 80003e0:	fab1 f181 	clz	r1, r1
 80003e4:	b2c9      	uxtb	r1, r1
 80003e6:	40cb      	lsrs	r3, r1
 80003e8:	6879      	ldr	r1, [r7, #4]
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	4313      	orrs	r3, r2
 80003f0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80003f2:	bf00      	nop
 80003f4:	3728      	adds	r7, #40	; 0x28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc90      	pop	{r4, r7}
 80003fa:	4770      	bx	lr

080003fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800040e:	68b9      	ldr	r1, [r7, #8]
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000412:	400b      	ands	r3, r1
 8000414:	43db      	mvns	r3, r3
 8000416:	401a      	ands	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f003 0318 	and.w	r3, r3, #24
 800041e:	4908      	ldr	r1, [pc, #32]	; (8000440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000420:	40d9      	lsrs	r1, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	4019      	ands	r1, r3
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000428:	400b      	ands	r3, r1
 800042a:	431a      	orrs	r2, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	0007fffe 	.word	0x0007fffe

08000444 <LL_ADC_EnableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f043 0204 	orr.w	r2, r3, #4
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	605a      	str	r2, [r3, #4]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	f023 0204 	bic.w	r2, r3, #4
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	605a      	str	r2, [r3, #4]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	f023 0208 	bic.w	r2, r3, #8
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	4907      	ldr	r1, [pc, #28]	; (80004d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4313      	orrs	r3, r2
 80004b6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4013      	ands	r3, r2
 80004c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c2:	68fb      	ldr	r3, [r7, #12]
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000

080004d4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08e      	sub	sp, #56	; 0x38
 80004d8:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80004da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
 80004f6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000504:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000508:	f7ff ffcc 	bl	80004a4 <LL_AHB1_GRP1_EnableClock>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800050c:	f7ff fe5c 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 8000510:	4603      	mov	r3, r0
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff feac 	bl	8000274 <NVIC_EncodePriority>
 800051c:	4603      	mov	r3, r0
 800051e:	4619      	mov	r1, r3
 8000520:	2012      	movs	r0, #18
 8000522:	f7ff fe7d 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 8000526:	2012      	movs	r0, #18
 8000528:	f7ff fe5c 	bl	80001e4 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800052c:	2300      	movs	r3, #0
 800052e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000530:	2300      	movs	r3, #0
 8000532:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000534:	2300      	movs	r3, #0
 8000536:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000542:	f000 fbf3 	bl	8000d2c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000556:	2301      	movs	r3, #1
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800055a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800056a:	f000 fc05 	bl	8000d78 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 800056e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000572:	f7ff ff77 	bl	8000464 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000576:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800057a:	f7ff ff83 	bl	8000484 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	607b      	str	r3, [r7, #4]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4810      	ldr	r0, [pc, #64]	; (80005d0 <MX_ADC1_Init+0xfc>)
 800058e:	f000 fb8d 	bl	8000cac <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <MX_ADC1_Init+0x100>)
 8000594:	2106      	movs	r1, #6
 8000596:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800059a:	f7ff feb1 	bl	8000300 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800059e:	2200      	movs	r2, #0
 80005a0:	490c      	ldr	r1, [pc, #48]	; (80005d4 <MX_ADC1_Init+0x100>)
 80005a2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005a6:	f7ff fee0 	bl	800036a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 80005aa:	227f      	movs	r2, #127	; 0x7f
 80005ac:	4909      	ldr	r1, [pc, #36]	; (80005d4 <MX_ADC1_Init+0x100>)
 80005ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005b2:	f7ff ff23 	bl	80003fc <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 80005b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0xfc>)
 80005bc:	f7ff fe8d 	bl	80002da <LL_ADC_SetCommonPathInternalCh>
  LL_ADC_EnableIT_EOC(ADC1);
 80005c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80005c4:	f7ff ff3e 	bl	8000444 <LL_ADC_EnableIT_EOC>
  //LL_ADC_Enable(ADC1);
}
 80005c8:	bf00      	nop
 80005ca:	3738      	adds	r7, #56	; 0x38
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	50000300 	.word	0x50000300
 80005d4:	cb840000 	.word	0xcb840000

080005d8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80005fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005fe:	f7ff ff51 	bl	80004a4 <LL_AHB1_GRP1_EnableClock>

  /* ADC2 interrupt Init */
  NVIC_SetPriority(ADC1_2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000602:	f7ff fde1 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 8000606:	4603      	mov	r3, r0
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe31 	bl	8000274 <NVIC_EncodePriority>
 8000612:	4603      	mov	r3, r0
 8000614:	4619      	mov	r1, r3
 8000616:	2012      	movs	r0, #18
 8000618:	f7ff fe02 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_2_IRQn);
 800061c:	2012      	movs	r0, #18
 800061e:	f7ff fde1 	bl	80001e4 <__NVIC_EnableIRQ>

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	481a      	ldr	r0, [pc, #104]	; (80006a0 <MX_ADC2_Init+0xc8>)
 8000636:	f000 fb79 	bl	8000d2c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61bb      	str	r3, [r7, #24]
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4619      	mov	r1, r3
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <MX_ADC2_Init+0xc8>)
 800065a:	f000 fb8d 	bl	8000d78 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC2);
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <MX_ADC2_Init+0xc8>)
 8000660:	f7ff ff00 	bl	8000464 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC2);
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MX_ADC2_Init+0xc8>)
 8000666:	f7ff ff0d 	bl	8000484 <LL_ADC_DisableIT_EOS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <MX_ADC2_Init+0xcc>)
 800066c:	2106      	movs	r1, #6
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_ADC2_Init+0xc8>)
 8000670:	f7ff fe46 	bl	8000300 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000674:	2200      	movs	r2, #0
 8000676:	490b      	ldr	r1, [pc, #44]	; (80006a4 <MX_ADC2_Init+0xcc>)
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MX_ADC2_Init+0xc8>)
 800067a:	f7ff fe76 	bl	800036a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 800067e:	227f      	movs	r2, #127	; 0x7f
 8000680:	4908      	ldr	r1, [pc, #32]	; (80006a4 <MX_ADC2_Init+0xcc>)
 8000682:	4807      	ldr	r0, [pc, #28]	; (80006a0 <MX_ADC2_Init+0xc8>)
 8000684:	f7ff feba 	bl	80003fc <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_VREFINT);
 8000688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_ADC2_Init+0xd0>)
 800068e:	f7ff fe24 	bl	80002da <LL_ADC_SetCommonPathInternalCh>

  LL_ADC_EnableIT_EOC(ADC2);
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <MX_ADC2_Init+0xc8>)
 8000694:	f7ff fed6 	bl	8000444 <LL_ADC_EnableIT_EOC>
  //LL_ADC_Enable(ADC2);
}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	50000100 	.word	0x50000100
 80006a4:	cb840000 	.word	0xcb840000
 80006a8:	50000300 	.word	0x50000300

080006ac <__NVIC_SetPriorityGrouping>:
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <LL_ADC_Enable>:
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000704:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000708:	f043 0201 	orr.w	r2, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	609a      	str	r2, [r3, #8]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_ADC_IsEnabled>:
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b01      	cmp	r3, #1
 800072e:	bf0c      	ite	eq
 8000730:	2301      	moveq	r3, #1
 8000732:	2300      	movne	r3, #0
 8000734:	b2db      	uxtb	r3, r3
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <LL_ADC_StartCalibration>:
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800075e:	4313      	orrs	r3, r2
 8000760:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	609a      	str	r2, [r3, #8]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_ADC_IsCalibrationOnGoing>:
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000788:	bf0c      	ite	eq
 800078a:	2301      	moveq	r3, #1
 800078c:	2300      	movne	r3, #0
 800078e:	b2db      	uxtb	r3, r3
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <LL_ADC_REG_StartConversion>:
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80007ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007b0:	f043 0204 	orr.w	r2, r3, #4
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	609a      	str	r2, [r3, #8]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_RCC_HSI_Enable+0x1c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <LL_RCC_HSI_Enable+0x1c>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <LL_RCC_HSI_IsReady+0x20>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000

08000808 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800081e:	4313      	orrs	r3, r2
 8000820:	600b      	str	r3, [r1, #0]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_RCC_SetSysClkSource+0x24>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f023 0203 	bic.w	r2, r3, #3
 8000844:	4904      	ldr	r1, [pc, #16]	; (8000858 <LL_RCC_SetSysClkSource+0x24>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4313      	orrs	r3, r2
 800084a:	604b      	str	r3, [r1, #4]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <LL_RCC_GetSysClkSource+0x18>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 030c 	and.w	r3, r3, #12
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <LL_RCC_SetAHBPrescaler+0x24>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000888:	4904      	ldr	r1, [pc, #16]	; (800089c <LL_RCC_SetAHBPrescaler+0x24>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4313      	orrs	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80008b0:	4904      	ldr	r1, [pc, #16]	; (80008c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	604b      	str	r3, [r1, #4]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000

080008c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80008d8:	4904      	ldr	r1, [pc, #16]	; (80008ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	604b      	str	r3, [r1, #4]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008fa:	69da      	ldr	r2, [r3, #28]
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <LL_APB1_GRP1_EnableClock+0x2c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000906:	69da      	ldr	r2, [r3, #28]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4013      	ands	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000

08000920 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <LL_APB2_GRP1_EnableClock+0x2c>)
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <LL_APB2_GRP1_EnableClock+0x2c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000936:	699a      	ldr	r2, [r3, #24]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40021000 	.word	0x40021000

08000950 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <LL_FLASH_SetLatency+0x24>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f023 0207 	bic.w	r2, r3, #7
 8000960:	4904      	ldr	r1, [pc, #16]	; (8000974 <LL_FLASH_SetLatency+0x24>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4313      	orrs	r3, r2
 8000966:	600b      	str	r3, [r1, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40022000 	.word	0x40022000

08000978 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <LL_FLASH_GetLatency+0x18>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f003 0307 	and.w	r3, r3, #7
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d106      	bne.n	80009b0 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <LL_SYSTICK_SetClkSource+0x34>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <LL_SYSTICK_SetClkSource+0x34>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80009ae:	e005      	b.n	80009bc <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <LL_SYSTICK_SetClkSource+0x34>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <LL_SYSTICK_SetClkSource+0x34>)
 80009b6:	f023 0304 	bic.w	r3, r3, #4
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e010 	.word	0xe000e010

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f7ff ffa4 	bl	8000920 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009dc:	f7ff ff88 	bl	80008f0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff fe63 	bl	80006ac <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f847 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 80009ea:	f7ff fd73 	bl	80004d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80009ee:	f7ff fdf3 	bl	80005d8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 80009f2:	217f      	movs	r1, #127	; 0x7f
 80009f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009f8:	f7ff fea3 	bl	8000742 <LL_ADC_StartCalibration>
  while(LL_ADC_IsCalibrationOnGoing(ADC1)) {};
 80009fc:	bf00      	nop
 80009fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a02:	f7ff feb7 	bl	8000774 <LL_ADC_IsCalibrationOnGoing>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f8      	bne.n	80009fe <main+0x32>
  LL_ADC_StartCalibration(ADC2, LL_ADC_SINGLE_ENDED);
 8000a0c:	217f      	movs	r1, #127	; 0x7f
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <main+0xa4>)
 8000a10:	f7ff fe97 	bl	8000742 <LL_ADC_StartCalibration>
  while(LL_ADC_IsCalibrationOnGoing(ADC2)) {};
 8000a14:	bf00      	nop
 8000a16:	4816      	ldr	r0, [pc, #88]	; (8000a70 <main+0xa4>)
 8000a18:	f7ff feac 	bl	8000774 <LL_ADC_IsCalibrationOnGoing>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f9      	bne.n	8000a16 <main+0x4a>

  LL_ADC_Enable(ADC1);
 8000a22:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a26:	f7ff fe65 	bl	80006f4 <LL_ADC_Enable>
  LL_ADC_Enable(ADC2);
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <main+0xa4>)
 8000a2c:	f7ff fe62 	bl	80006f4 <LL_ADC_Enable>
  while(!LL_ADC_IsEnabled(ADC1)) {};
 8000a30:	bf00      	nop
 8000a32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a36:	f7ff fe71 	bl	800071c <LL_ADC_IsEnabled>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f8      	beq.n	8000a32 <main+0x66>
  while(!LL_ADC_IsEnabled(ADC2)) {};
 8000a40:	bf00      	nop
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <main+0xa4>)
 8000a44:	f7ff fe6a 	bl	800071c <LL_ADC_IsEnabled>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f9      	beq.n	8000a42 <main+0x76>

  uint16_t* vrefint_cal_addr = VREFINT_CAL_ADDR;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <main+0xa8>)
 8000a50:	607b      	str	r3, [r7, #4]
  uint16_t vrefint_cal_val = *vrefint_cal_addr;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	807b      	strh	r3, [r7, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	LL_ADC_REG_StartConversion(ADC1);
 8000a58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a5c:	f7ff fe9e 	bl	800079c <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <main+0xa4>)
 8000a62:	f7ff fe9b 	bl	800079c <LL_ADC_REG_StartConversion>
	LL_mDelay(50);
 8000a66:	2032      	movs	r0, #50	; 0x32
 8000a68:	f000 f9f8 	bl	8000e5c <LL_mDelay>
	LL_ADC_REG_StartConversion(ADC1);
 8000a6c:	e7f4      	b.n	8000a58 <main+0x8c>
 8000a6e:	bf00      	nop
 8000a70:	50000100 	.word	0x50000100
 8000a74:	1ffff7ba 	.word	0x1ffff7ba

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ff67 	bl	8000950 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000a82:	f7ff ff79 	bl	8000978 <LL_FLASH_GetLatency>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000a8c:	f000 f82a 	bl	8000ae4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000a90:	f7ff fe98 	bl	80007c4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a94:	bf00      	nop
 8000a96:	f7ff fea5 	bl	80007e4 <LL_RCC_HSI_IsReady>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d1fa      	bne.n	8000a96 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	f7ff feb1 	bl	8000808 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fee6 	bl	8000878 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fef7 	bl	80008a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff ff08 	bl	80008c8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff febb 	bl	8000834 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000abe:	bf00      	nop
 8000ac0:	f7ff fecc 	bl	800085c <LL_RCC_GetSysClkSource>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1fa      	bne.n	8000ac0 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <SystemClock_Config+0x68>)
 8000acc:	f000 f9b8 	bl	8000e40 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000ad0:	2004      	movs	r0, #4
 8000ad2:	f7ff ff5f 	bl	8000994 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000ad6:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SystemClock_Config+0x68>)
 8000ad8:	f000 f9e4 	bl	8000ea4 <LL_SetSystemCoreClock>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	007a1200 	.word	0x007a1200

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <LL_ADC_IsActiveFlag_EOC>:
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_ClearFlag_EOC>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <HardFault_Handler+0x4>

08000b46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <MemManage_Handler+0x4>

08000b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <BusFault_Handler+0x4>

08000b52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <UsageFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	if(LL_ADC_IsActiveFlag_EOC(ADC1)){
 8000b94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b98:	f7ff ffab 	bl	8000af2 <LL_ADC_IsActiveFlag_EOC>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d008      	beq.n	8000bb4 <ADC1_2_IRQHandler+0x24>
		adc1_converted = ADC1->DR;
 8000ba2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <ADC1_2_IRQHandler+0x44>)
 8000baa:	6013      	str	r3, [r2, #0]
		LL_ADC_ClearFlag_EOC(ADC1);
 8000bac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bb0:	f7ff ffb2 	bl	8000b18 <LL_ADC_ClearFlag_EOC>
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	if(LL_ADC_IsActiveFlag_EOC(ADC2)){
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <ADC1_2_IRQHandler+0x48>)
 8000bb6:	f7ff ff9c 	bl	8000af2 <LL_ADC_IsActiveFlag_EOC>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d007      	beq.n	8000bd0 <ADC1_2_IRQHandler+0x40>
		adc2_converted = ADC1->DR;
 8000bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <ADC1_2_IRQHandler+0x4c>)
 8000bc8:	6013      	str	r3, [r2, #0]
		LL_ADC_ClearFlag_EOC(ADC2);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <ADC1_2_IRQHandler+0x48>)
 8000bcc:	f7ff ffa4 	bl	8000b18 <LL_ADC_ClearFlag_EOC>
	}
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000020 	.word	0x20000020
 8000bd8:	50000100 	.word	0x50000100
 8000bdc:	20000024 	.word	0x20000024

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <SystemInit+0x28>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <SystemInit+0x28>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SystemInit+0x28>)
 8000bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c12:	e003      	b.n	8000c1c <LoopCopyDataInit>

08000c14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c1a:	3104      	adds	r1, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c24:	d3f6      	bcc.n	8000c14 <CopyDataInit>
	ldr	r2, =_sbss
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c28:	e002      	b.n	8000c30 <LoopFillZerobss>

08000c2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c2c:	f842 3b04 	str.w	r3, [r2], #4

08000c30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <LoopForever+0x16>)
	cmp	r2, r3
 8000c32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c34:	d3f9      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff ffd3 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f000 f943 	bl	8000ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3e:	f7ff fec5 	bl	80009cc <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c44:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000c48:	08000f2c 	.word	0x08000f2c
	ldr	r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c50:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000c54:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000c58:	20000028 	.word	0x20000028

08000c5c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <CAN_RX0_IRQHandler>

08000c5e <LL_ADC_REG_SetSequencerLength>:
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f023 020f 	bic.w	r2, r3, #15
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_ADC_IsEnabled>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	bf0c      	ite	eq
 8000c98:	2301      	moveq	r3, #1
 8000c9a:	2300      	movne	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8000cba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cbe:	f7ff ffe1 	bl	8000c84 <LL_ADC_IsEnabled>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	4817      	ldr	r0, [pc, #92]	; (8000d24 <LL_ADC_CommonInit+0x78>)
 8000cc6:	f7ff ffdd 	bl	8000c84 <LL_ADC_IsEnabled>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4323      	orrs	r3, r4
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d120      	bne.n	8000d14 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d012      	beq.n	8000d00 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <LL_ADC_CommonInit+0x7c>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	6811      	ldr	r1, [r2, #0]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	6852      	ldr	r2, [r2, #4]
 8000cea:	4311      	orrs	r1, r2
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	6892      	ldr	r2, [r2, #8]
 8000cf0:	4311      	orrs	r1, r2
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	68d2      	ldr	r2, [r2, #12]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	e00b      	b.n	8000d18 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <LL_ADC_CommonInit+0x7c>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	e001      	b.n	8000d18 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	50000100 	.word	0x50000100
 8000d28:	fffc30e0 	.word	0xfffc30e0

08000d2c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffa2 	bl	8000c84 <LL_ADC_IsEnabled>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d111      	bne.n	8000d6a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d4e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	6852      	ldr	r2, [r2, #4]
 8000d5a:	4311      	orrs	r1, r2
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	6892      	ldr	r2, [r2, #8]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	e001      	b.n	8000d6e <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff7c 	bl	8000c84 <LL_ADC_IsEnabled>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d132      	bne.n	8000df8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d015      	beq.n	8000dc6 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <LL_ADC_REG_Init+0x90>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	6811      	ldr	r1, [r2, #0]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	6892      	ldr	r2, [r2, #8]
 8000daa:	4311      	orrs	r1, r2
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	68d2      	ldr	r2, [r2, #12]
 8000db0:	4311      	orrs	r1, r2
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	6912      	ldr	r2, [r2, #16]
 8000db6:	4311      	orrs	r1, r2
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	6952      	ldr	r2, [r2, #20]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	e011      	b.n	8000dea <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <LL_ADC_REG_Init+0x90>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	6811      	ldr	r1, [r2, #0]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	68d2      	ldr	r2, [r2, #12]
 8000dd6:	4311      	orrs	r1, r2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	6912      	ldr	r2, [r2, #16]
 8000ddc:	4311      	orrs	r1, r2
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	6952      	ldr	r2, [r2, #20]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4619      	mov	r1, r3
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff34 	bl	8000c5e <LL_ADC_REG_SetSequencerLength>
 8000df6:	e001      	b.n	8000dfc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	fff0c03c 	.word	0xfff0c03c

08000e0c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <LL_InitTick+0x30>)
 8000e20:	3b01      	subs	r3, #1
 8000e22:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <LL_InitTick+0x30>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <LL_InitTick+0x30>)
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ffdd 	bl	8000e0c <LL_InitTick>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <LL_mDelay+0x44>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	d00c      	beq.n	8000e8e <LL_mDelay+0x32>
  {
    Delay++;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000e7a:	e008      	b.n	8000e8e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <LL_mDelay+0x44>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <LL_mDelay+0x32>
    {
      Delay--;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1f3      	bne.n	8000e7c <LL_mDelay+0x20>
    }
  }
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <LL_SetSystemCoreClock+0x1c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <__libc_init_array>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	4e0d      	ldr	r6, [pc, #52]	; (8000efc <__libc_init_array+0x38>)
 8000ec8:	4c0d      	ldr	r4, [pc, #52]	; (8000f00 <__libc_init_array+0x3c>)
 8000eca:	1ba4      	subs	r4, r4, r6
 8000ecc:	10a4      	asrs	r4, r4, #2
 8000ece:	2500      	movs	r5, #0
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	d109      	bne.n	8000ee8 <__libc_init_array+0x24>
 8000ed4:	4e0b      	ldr	r6, [pc, #44]	; (8000f04 <__libc_init_array+0x40>)
 8000ed6:	4c0c      	ldr	r4, [pc, #48]	; (8000f08 <__libc_init_array+0x44>)
 8000ed8:	f000 f818 	bl	8000f0c <_init>
 8000edc:	1ba4      	subs	r4, r4, r6
 8000ede:	10a4      	asrs	r4, r4, #2
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	42a5      	cmp	r5, r4
 8000ee4:	d105      	bne.n	8000ef2 <__libc_init_array+0x2e>
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
 8000ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eec:	4798      	blx	r3
 8000eee:	3501      	adds	r5, #1
 8000ef0:	e7ee      	b.n	8000ed0 <__libc_init_array+0xc>
 8000ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef6:	4798      	blx	r3
 8000ef8:	3501      	adds	r5, #1
 8000efa:	e7f2      	b.n	8000ee2 <__libc_init_array+0x1e>
 8000efc:	08000f24 	.word	0x08000f24
 8000f00:	08000f24 	.word	0x08000f24
 8000f04:	08000f24 	.word	0x08000f24
 8000f08:	08000f28 	.word	0x08000f28

08000f0c <_init>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	bf00      	nop
 8000f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f12:	bc08      	pop	{r3}
 8000f14:	469e      	mov	lr, r3
 8000f16:	4770      	bx	lr

08000f18 <_fini>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr
