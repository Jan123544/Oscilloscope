
osci_test_signal_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000196c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001af4  08001af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b0c  08001b0c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001b0c  08001b0c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b0c  08001b0c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b10  08001b10  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000004  08001b18  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001b18  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094d3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ed0  00000000  00000000  00029507  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002bc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ac1  00000000  00000000  0002c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ecd  00000000  00000000  00045ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d3ad  00000000  00000000  0004cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca11b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000ca198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001adc 	.word	0x08001adc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001adc 	.word	0x08001adc

080001c8 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80001d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80001d6:	f001 fc1b 	bl	8001a10 <floorf>
 80001da:	eef0 7a40 	vmov.f32	s15, s0
 80001de:	eeb0 0a67 	vmov.f32	s0, s15
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f003 0310 	and.w	r3, r3, #16
 80001fc:	2101      	movs	r1, #1
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	431a      	orrs	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 8000214:	b490      	push	{r4, r7}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	3308      	adds	r3, #8
 8000224:	4619      	mov	r1, r3
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800022c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000230:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000232:	697a      	ldr	r2, [r7, #20]
 8000234:	fa92 f2a2 	rbit	r2, r2
 8000238:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800023a:	693a      	ldr	r2, [r7, #16]
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	40d3      	lsrs	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	440b      	add	r3, r1
 8000248:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800024a:	6823      	ldr	r3, [r4, #0]
 800024c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000250:	f023 030f 	bic.w	r3, r3, #15
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4313      	orrs	r3, r2
 8000258:	6023      	str	r3, [r4, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 800025a:	bf00      	nop
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bc90      	pop	{r4, r7}
 8000262:	4770      	bx	lr

08000264 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f043 0201 	orr.w	r2, r3, #1
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	f043 0201 	orr.w	r2, r3, #1
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	60da      	str	r2, [r3, #12]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f043 0220 	orr.w	r2, r3, #32
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	601a      	str	r2, [r3, #0]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <_Z10usart_initv>:

#include "cppmain.h"
#include "main.h"
#include "SignalAdjuster.h"

void usart_init(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART2);
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <_Z10usart_initv+0x10>)
 80002ca:	f7ff ffeb 	bl	80002a4 <LL_USART_EnableIT_RXNE>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40004400 	.word	0x40004400

080002d8 <_Z8dac_initv>:

void dac_init(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	LL_DAC_Enable(DAC, LL_DAC_CHANNEL_1);
 80002dc:	4902      	ldr	r1, [pc, #8]	; (80002e8 <_Z8dac_initv+0x10>)
 80002de:	4803      	ldr	r0, [pc, #12]	; (80002ec <_Z8dac_initv+0x14>)
 80002e0:	f7ff ff82 	bl	80001e8 <LL_DAC_Enable>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	02100001 	.word	0x02100001
 80002ec:	40007400 	.word	0x40007400

080002f0 <_Z14timer_callbackPv>:

int sampleNum = 0;
uint16_t dacValue = 0;
void timer_callback(void * adj){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	if(sampleNum == 511){
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <_Z14timer_callbackPv+0x68>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000300:	4293      	cmp	r3, r2
 8000302:	d10d      	bne.n	8000320 <_Z14timer_callbackPv+0x30>
		if(dacValue == 4095){
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <_Z14timer_callbackPv+0x6c>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	f640 72ff 	movw	r2, #4095	; 0xfff
 800030c:	4293      	cmp	r3, r2
 800030e:	d103      	bne.n	8000318 <_Z14timer_callbackPv+0x28>
			dacValue = 0;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <_Z14timer_callbackPv+0x6c>)
 8000312:	2200      	movs	r2, #0
 8000314:	801a      	strh	r2, [r3, #0]
 8000316:	e003      	b.n	8000320 <_Z14timer_callbackPv+0x30>
		}else{
			dacValue = 4095;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <_Z14timer_callbackPv+0x6c>)
 800031a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800031e:	801a      	strh	r2, [r3, #0]
		}
	}
	LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, dacValue);
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <_Z14timer_callbackPv+0x6c>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	490e      	ldr	r1, [pc, #56]	; (8000360 <_Z14timer_callbackPv+0x70>)
 8000328:	480e      	ldr	r0, [pc, #56]	; (8000364 <_Z14timer_callbackPv+0x74>)
 800032a:	f7ff ff73 	bl	8000214 <LL_DAC_ConvertData12RightAligned>
	sampleNum ++;
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <_Z14timer_callbackPv+0x68>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	4a08      	ldr	r2, [pc, #32]	; (8000358 <_Z14timer_callbackPv+0x68>)
 8000336:	6013      	str	r3, [r2, #0]
	sampleNum %= NUM_SAMPLES;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <_Z14timer_callbackPv+0x68>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	425a      	negs	r2, r3
 800033e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000346:	bf58      	it	pl
 8000348:	4253      	negpl	r3, r2
 800034a:	4a03      	ldr	r2, [pc, #12]	; (8000358 <_Z14timer_callbackPv+0x68>)
 800034c:	6013      	str	r3, [r2, #0]
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000020 	.word	0x20000020
 800035c:	20000024 	.word	0x20000024
 8000360:	02100001 	.word	0x02100001
 8000364:	40007400 	.word	0x40007400

08000368 <_Z20Timer_setup_512Atnhzf>:

void Timer_setup_512Atnhz(float n){
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t arr = floor((float)TIM1_CLOCK_SPEED/n/(NUM_SAMPLES - 1));
 8000372:	eddf 6a19 	vldr	s13, [pc, #100]	; 80003d8 <_Z20Timer_setup_512Atnhzf+0x70>
 8000376:	ed97 7a01 	vldr	s14, [r7, #4]
 800037a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800037e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80003dc <_Z20Timer_setup_512Atnhzf+0x74>
 8000382:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000386:	eeb0 0a66 	vmov.f32	s0, s13
 800038a:	f7ff ff1d 	bl	80001c8 <_ZSt5floorf>
 800038e:	eef0 7a40 	vmov.f32	s15, s0
 8000392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000396:	ee17 3a90 	vmov	r3, s15
 800039a:	60fb      	str	r3, [r7, #12]
	if (arr > TIM1_MAX_ARR) {
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003a2:	d312      	bcc.n	80003ca <_Z20Timer_setup_512Atnhzf+0x62>
		TIM1->PSC = arr / TIM1_MAX_ARR;
 80003a4:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <_Z20Timer_setup_512Atnhzf+0x78>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	490e      	ldr	r1, [pc, #56]	; (80003e4 <_Z20Timer_setup_512Atnhzf+0x7c>)
 80003aa:	fba1 1303 	umull	r1, r3, r1, r3
 80003ae:	0bdb      	lsrs	r3, r3, #15
 80003b0:	6293      	str	r3, [r2, #40]	; 0x28
		TIM1->ARR = arr % TIM1_MAX_ARR;
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <_Z20Timer_setup_512Atnhzf+0x78>)
 80003b4:	68f9      	ldr	r1, [r7, #12]
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <_Z20Timer_setup_512Atnhzf+0x7c>)
 80003b8:	fba3 2301 	umull	r2, r3, r3, r1
 80003bc:	0bda      	lsrs	r2, r3, #15
 80003be:	4613      	mov	r3, r2
 80003c0:	041b      	lsls	r3, r3, #16
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	1aca      	subs	r2, r1, r3
 80003c6:	62c2      	str	r2, [r0, #44]	; 0x2c
	}else{
		TIM1->ARR = arr;
	}

}
 80003c8:	e002      	b.n	80003d0 <_Z20Timer_setup_512Atnhzf+0x68>
		TIM1->ARR = arr;
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <_Z20Timer_setup_512Atnhzf+0x78>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	4af42400 	.word	0x4af42400
 80003dc:	43ff8000 	.word	0x43ff8000
 80003e0:	40012c00 	.word	0x40012c00
 80003e4:	80008001 	.word	0x80008001

080003e8 <cppmain>:

void cppmain(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	usart_init();
 80003ec:	f7ff ff6a 	bl	80002c4 <_Z10usart_initv>
	dac_init();
 80003f0:	f7ff ff72 	bl	80002d8 <_Z8dac_initv>
	Timer_setup_512Atnhz(1);
 80003f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003f8:	f7ff ffb6 	bl	8000368 <_Z20Timer_setup_512Atnhzf>
	tim1_callback = timer_callback;
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <cppmain+0x28>)
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <cppmain+0x2c>)
 8000400:	601a      	str	r2, [r3, #0]
	LL_TIM_EnableCounter(TIM1);
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <cppmain+0x30>)
 8000404:	f7ff ff2e 	bl	8000264 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM1);
 8000408:	4803      	ldr	r0, [pc, #12]	; (8000418 <cppmain+0x30>)
 800040a:	f7ff ff3b 	bl	8000284 <LL_TIM_EnableIT_UPDATE>

	while(1){
 800040e:	e7fe      	b.n	800040e <cppmain+0x26>
 8000410:	20000030 	.word	0x20000030
 8000414:	080002f1 	.word	0x080002f1
 8000418:	40012c00 	.word	0x40012c00

0800041c <LL_DAC_DisableTrigger>:
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	2104      	movs	r1, #4
 8000432:	fa01 f303 	lsl.w	r3, r1, r3
 8000436:	43db      	mvns	r3, r3
 8000438:	401a      	ands	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
	...

0800044c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	4907      	ldr	r1, [pc, #28]	; (8000478 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4013      	ands	r3, r2
 8000468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	4907      	ldr	r1, [pc, #28]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4013      	ands	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_DAC1_Init>:

/* USER CODE END 0 */

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	; 0x28
 80004b0:	af00      	add	r7, sp, #0
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80004d0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80004d4:	f7ff ffd2 	bl	800047c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80004dc:	f7ff ffb6 	bl	800044c <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80004e0:	2310      	movs	r3, #16
 80004e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004e4:	2303      	movs	r3, #3
 80004e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	463b      	mov	r3, r7
 80004ee:	4619      	mov	r1, r3
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f000 feb8 	bl	8001268 <LL_GPIO_Init>

  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 80004f8:	2338      	movs	r3, #56	; 0x38
 80004fa:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	461a      	mov	r2, r3
 800050a:	4906      	ldr	r1, [pc, #24]	; (8000524 <MX_DAC1_Init+0x78>)
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <MX_DAC1_Init+0x7c>)
 800050e:	f000 fd55 	bl	8000fbc <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000512:	4904      	ldr	r1, [pc, #16]	; (8000524 <MX_DAC1_Init+0x78>)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_DAC1_Init+0x7c>)
 8000516:	f7ff ff81 	bl	800041c <LL_DAC_DisableTrigger>

}
 800051a:	bf00      	nop
 800051c:	3728      	adds	r7, #40	; 0x28
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	02100001 	.word	0x02100001
 8000528:	40007400 	.word	0x40007400

0800052c <LL_AHB1_GRP1_EnableClock>:
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	4907      	ldr	r1, [pc, #28]	; (8000558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4313      	orrs	r3, r2
 800053e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4013      	ands	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000560:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000564:	f7ff ffe2 	bl	800052c <LL_AHB1_GRP1_EnableClock>

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	60d3      	str	r3, [r2, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_RCC_HSI_Enable+0x1c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <LL_RCC_HSI_Enable+0x1c>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <LL_RCC_HSI_IsReady+0x20>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 0302 	and.w	r3, r3, #2
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	bf0c      	ite	eq
 80005e4:	2301      	moveq	r3, #1
 80005e6:	2300      	movne	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	4904      	ldr	r1, [pc, #16]	; (8000620 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800060e:	4313      	orrs	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <LL_RCC_SetSysClkSource+0x24>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f023 0203 	bic.w	r2, r3, #3
 8000634:	4904      	ldr	r1, [pc, #16]	; (8000648 <LL_RCC_SetSysClkSource+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <LL_RCC_GetSysClkSource+0x18>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <LL_RCC_SetAHBPrescaler+0x24>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000678:	4904      	ldr	r1, [pc, #16]	; (800068c <LL_RCC_SetAHBPrescaler+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	604b      	str	r3, [r1, #4]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000

08000690 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80006a0:	4904      	ldr	r1, [pc, #16]	; (80006b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	604b      	str	r3, [r1, #4]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80006c8:	4904      	ldr	r1, [pc, #16]	; (80006dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	604b      	str	r3, [r1, #4]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <LL_RCC_SetTIMClockSource+0x34>)
 80006ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	0edb      	lsrs	r3, r3, #27
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	401a      	ands	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8000702:	4904      	ldr	r1, [pc, #16]	; (8000714 <LL_RCC_SetTIMClockSource+0x34>)
 8000704:	4313      	orrs	r3, r2
 8000706:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000

08000718 <LL_APB1_GRP1_EnableClock>:
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000722:	69da      	ldr	r2, [r3, #28]
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <LL_APB1_GRP1_EnableClock+0x2c>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4013      	ands	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40021000 	.word	0x40021000

08000748 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	4907      	ldr	r1, [pc, #28]	; (8000774 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LL_APB2_GRP1_EnableClock+0x2c>)
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000766:	68fb      	ldr	r3, [r7, #12]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000

08000778 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <LL_FLASH_SetLatency+0x24>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f023 0207 	bic.w	r2, r3, #7
 8000788:	4904      	ldr	r1, [pc, #16]	; (800079c <LL_FLASH_SetLatency+0x24>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	600b      	str	r3, [r1, #0]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40022000 	.word	0x40022000

080007a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <LL_FLASH_GetLatency+0x18>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f003 0307 	and.w	r3, r3, #7
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d106      	bne.n	80007d8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <LL_SYSTICK_SetClkSource+0x34>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <LL_SYSTICK_SetClkSource+0x34>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80007d6:	e005      	b.n	80007e4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <LL_SYSTICK_SetClkSource+0x34>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <LL_SYSTICK_SetClkSource+0x34>)
 80007de:	f023 0304 	bic.w	r3, r3, #4
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e010 	.word	0xe000e010

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ffa5 	bl	8000748 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000802:	f7ff ff89 	bl	8000718 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000806:	2003      	movs	r0, #3
 8000808:	f7ff feb0 	bl	800056c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f80c 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f7ff fea4 	bl	800055c <MX_GPIO_Init>
  MX_DAC1_Init();
 8000814:	f7ff fe4a 	bl	80004ac <MX_DAC1_Init>
  MX_TIM1_Init();
 8000818:	f000 f9ee 	bl	8000bf8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800081c:	f000 fb22 	bl	8000e64 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cppmain();
 8000820:	f7ff fde2 	bl	80003e8 <cppmain>
 8000824:	e7fc      	b.n	8000820 <main+0x2c>
	...

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ffa3 	bl	8000778 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000832:	f7ff ffb5 	bl	80007a0 <LL_FLASH_GetLatency>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 800083c:	f000 f82e 	bl	800089c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000840:	f7ff feb8 	bl	80005b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000844:	bf00      	nop
 8000846:	f7ff fec5 	bl	80005d4 <LL_RCC_HSI_IsReady>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d1fa      	bne.n	8000846 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000850:	2010      	movs	r0, #16
 8000852:	f7ff fed1 	bl	80005f8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff06 	bl	8000668 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff17 	bl	8000690 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ff28 	bl	80006b8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff fedb 	bl	8000624 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800086e:	bf00      	nop
 8000870:	f7ff feec 	bl	800064c <LL_RCC_GetSysClkSource>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1fa      	bne.n	8000870 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <SystemClock_Config+0x70>)
 800087c:	f001 f8aa 	bl	80019d4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff ff9b 	bl	80007bc <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <SystemClock_Config+0x70>)
 8000888:	f001 f8b2 	bl	80019f0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff ff27 	bl	80006e0 <LL_RCC_SetTIMClockSource>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	007a1200 	.word	0x007a1200

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <LL_TIM_ClearFlag_UPDATE>:
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f06f 0201 	mvn.w	r2, #1
 80008b8:	611a      	str	r2, [r3, #16]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d101      	bne.n	80008de <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_USART_IsActiveFlag_RXNE>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	2b20      	cmp	r3, #32
 80008fe:	d101      	bne.n	8000904 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <HardFault_Handler+0x4>

08000926 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <BusFault_Handler+0x4>

08000932 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)){
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8000976:	f7ff ffa6 	bl	80008c6 <LL_TIM_IsActiveFlag_UPDATE>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <TIM1_UP_TIM16_IRQHandler+0x22>
		tim1_callback(adj_IT_reference);
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4610      	mov	r0, r2
 800098a:	4798      	blx	r3
		LL_TIM_ClearFlag_UPDATE(TIM1);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800098e:	f7ff ff8c 	bl	80008aa <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40012c00 	.word	0x40012c00
 800099c:	20000030 	.word	0x20000030
 80009a0:	2000002c 	.word	0x2000002c

080009a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)){
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <USART2_IRQHandler+0x20>)
 80009aa:	f7ff ff9f 	bl	80008ec <LL_USART_IsActiveFlag_RXNE>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <USART2_IRQHandler+0x1c>
		usart2_rxne_callback(adj_IT_reference);
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <USART2_IRQHandler+0x24>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <USART2_IRQHandler+0x28>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	4610      	mov	r0, r2
 80009be:	4798      	blx	r3
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40004400 	.word	0x40004400
 80009c8:	20000028 	.word	0x20000028
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <SystemInit+0x28>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <SystemInit+0x28>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SystemInit+0x28>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <LL_APB2_GRP1_EnableClock>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000

08000b40 <LL_TIM_DisableARRPreload>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_TIM_SetClockSource>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000b72:	f023 0307 	bic.w	r3, r3, #7
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <LL_TIM_SetTriggerOutput>:
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	605a      	str	r2, [r3, #4]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_TIM_SetTriggerOutput2>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <LL_TIM_DisableMasterSlaveMode>:
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000c0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c10:	f7ff ff7e 	bl	8000b10 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c14:	f7ff fef2 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff42 	bl	8000aa8 <NVIC_EncodePriority>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4619      	mov	r1, r3
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f7ff ff13 	bl	8000a54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c2e:	2019      	movs	r0, #25
 8000c30:	f7ff fef2 	bl	8000a18 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM1_Init+0x88>)
 8000c4e:	f000 fd5d 	bl	800170c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MX_TIM1_Init+0x88>)
 8000c54:	f7ff ff74 	bl	8000b40 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <MX_TIM1_Init+0x88>)
 8000c5c:	f7ff ff80 	bl	8000b60 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM1_Init+0x88>)
 8000c64:	f7ff ff91 	bl	8000b8a <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM1_Init+0x88>)
 8000c6c:	f7ff ffa0 	bl	8000bb0 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM1_Init+0x88>)
 8000c72:	f7ff ffb0 	bl	8000bd6 <LL_TIM_DisableMasterSlaveMode>

}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40012c00 	.word	0x40012c00

08000c84 <__NVIC_GetPriorityGrouping>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <__NVIC_EnableIRQ+0x38>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <__NVIC_SetPriority>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <LL_AHB1_GRP1_EnableClock>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dae:	695a      	ldr	r2, [r3, #20]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_APB1_GRP1_EnableClock>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd2:	69da      	ldr	r2, [r3, #28]
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000

08000df8 <LL_USART_Enable>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f043 0201 	orr.w	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_USART_ConfigAsyncMode>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e92:	f7ff ff99 	bl	8000dc8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e9a:	f7ff ff7d 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8000e9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ea2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f000 f9d2 	bl	8001268 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ec4:	f7ff fede 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff2e 	bl	8000d30 <NVIC_EncodePriority>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f7ff feff 	bl	8000cdc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000ede:	2026      	movs	r0, #38	; 0x26
 8000ee0:	f7ff fede 	bl	8000ca0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8000ee4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ee8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_USART2_UART_Init+0xc4>)
 8000f0a:	f000 fcdd 	bl	80018c8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0xc4>)
 8000f10:	f7ff ff98 	bl	8000e44 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_USART2_UART_Init+0xc4>)
 8000f16:	f7ff ff7f 	bl	8000e18 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_USART2_UART_Init+0xc4>)
 8000f1c:	f7ff ff6c 	bl	8000df8 <LL_USART_Enable>

}
 8000f20:	bf00      	nop
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400

08000f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f32:	e003      	b.n	8000f3c <LoopCopyDataInit>

08000f34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f3a:	3104      	adds	r1, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f44:	d3f6      	bcc.n	8000f34 <CopyDataInit>
	ldr	r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f48:	e002      	b.n	8000f50 <LoopFillZerobss>

08000f4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f4c:	f842 3b04 	str.w	r3, [r2], #4

08000f50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <LoopForever+0x16>)
	cmp	r2, r3
 8000f52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f54:	d3f9      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f56:	f7ff fd3b 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f000 fd9b 	bl	8001a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f5e:	f7ff fc49 	bl	80007f4 <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f64:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000f68:	08001b14 	.word	0x08001b14
	ldr	r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f70:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000f74:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000f78:	20000034 	.word	0x20000034

08000f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_2_IRQHandler>

08000f7e <LL_DAC_IsEnabled>:
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	bf0c      	ite	eq
 8000faa:	2301      	moveq	r3, #1
 8000fac:	2300      	movne	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff ffd5 	bl	8000f7e <LL_DAC_IsEnabled>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d13a      	bne.n	8001050 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d01e      	beq.n	8001020 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	f640 71fa 	movw	r1, #4090	; 0xffa
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4319      	orrs	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4319      	orrs	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4319      	orrs	r1, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	431a      	orrs	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e019      	b.n	8001054 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	21fa      	movs	r1, #250	; 0xfa
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4319      	orrs	r1, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	431a      	orrs	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e001      	b.n	8001054 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001054:	7dfb      	ldrb	r3, [r7, #23]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800105e:	b480      	push	{r7}
 8001060:	b089      	sub	sp, #36	; 0x24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	613b      	str	r3, [r7, #16]
  return result;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2103      	movs	r1, #3
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	401a      	ands	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	61bb      	str	r3, [r7, #24]
  return result;
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	fab3 f383 	clz	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3724      	adds	r7, #36	; 0x24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	fb01 f303 	mul.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	605a      	str	r2, [r3, #4]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	613b      	str	r3, [r7, #16]
  return result;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2103      	movs	r1, #3
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	61bb      	str	r3, [r7, #24]
  return result;
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800114a:	b480      	push	{r7}
 800114c:	b089      	sub	sp, #36	; 0x24
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	613b      	str	r3, [r7, #16]
  return result;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fab3 f383 	clz	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2103      	movs	r1, #3
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	401a      	ands	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	61bb      	str	r3, [r7, #24]
  return result;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	431a      	orrs	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	60da      	str	r2, [r3, #12]
}
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	613b      	str	r3, [r7, #16]
  return result;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	210f      	movs	r1, #15
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	61bb      	str	r3, [r7, #24]
  return result;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	431a      	orrs	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001206:	b480      	push	{r7}
 8001208:	b089      	sub	sp, #36	; 0x24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	613b      	str	r3, [r7, #16]
  return result;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	210f      	movs	r1, #15
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	61bb      	str	r3, [r7, #24]
  return result;
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	431a      	orrs	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800125c:	bf00      	nop
 800125e:	3724      	adds	r7, #36	; 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	613b      	str	r3, [r7, #16]
  return result;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800128a:	e049      	b.n	8001320 <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d03b      	beq.n	800131a <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	69b9      	ldr	r1, [r7, #24]
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fed7 	bl	800105e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d003      	beq.n	80012c0 <LL_GPIO_Init+0x58>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d106      	bne.n	80012ce <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	461a      	mov	r2, r3
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff0f 	bl	80010ec <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	461a      	mov	r2, r3
 80012d4:	69b9      	ldr	r1, [r7, #24]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff37 	bl	800114a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d11a      	bne.n	800131a <LL_GPIO_Init+0xb2>
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	60bb      	str	r3, [r7, #8]
  return result;
 80012f0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d807      	bhi.n	800130c <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	461a      	mov	r2, r3
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff4f 	bl	80011a8 <LL_GPIO_SetAFPin_0_7>
 800130a:	e006      	b.n	800131a <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	461a      	mov	r2, r3
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff76 	bl	8001206 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ae      	bne.n	800128c <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d003      	beq.n	800133e <LL_GPIO_Init+0xd6>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	461a      	mov	r2, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff feb7 	bl	80010bc <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_RCC_HSI_IsReady>:
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <LL_RCC_HSI_IsReady+0x20>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b02      	cmp	r3, #2
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	b2db      	uxtb	r3, r3
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000

0800137c <LL_RCC_LSE_IsReady>:
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <LL_RCC_LSE_IsReady+0x20>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b02      	cmp	r3, #2
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000

080013a0 <LL_RCC_GetSysClkSource>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <LL_RCC_GetSysClkSource+0x18>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 030c 	and.w	r3, r3, #12
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <LL_RCC_GetAHBPrescaler>:
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <LL_RCC_GetAHBPrescaler+0x18>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <LL_RCC_GetAPB1Prescaler>:
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <LL_RCC_GetAPB2Prescaler>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <LL_RCC_GetAPB2Prescaler+0x18>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <LL_RCC_GetUSARTClockSource+0x28>)
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	2103      	movs	r1, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	4313      	orrs	r3, r2
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000

0800143c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <LL_RCC_PLL_GetMainSource+0x18>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <LL_RCC_PLL_GetPrediv+0x18>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f003 030f 	and.w	r3, r3, #15
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001498:	f000 f860 	bl	800155c <RCC_GetSystemClockFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f87a 	bl	80015a0 <RCC_GetHCLKClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f888 	bl	80015cc <RCC_GetPCLK1ClockFreq>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f894 	bl	80015f4 <RCC_GetPCLK2ClockFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60da      	str	r2, [r3, #12]
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d12a      	bne.n	8001544 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff8e 	bl	8001410 <LL_RCC_GetUSARTClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00f      	beq.n	800151a <LL_RCC_GetUSARTClockFreq+0x3e>
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d005      	beq.n	800150a <LL_RCC_GetUSARTClockFreq+0x2e>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d114      	bne.n	800152c <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001502:	f000 f82b 	bl	800155c <RCC_GetSystemClockFreq>
 8001506:	60f8      	str	r0, [r7, #12]
        break;
 8001508:	e021      	b.n	800154e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800150a:	f7ff ff25 	bl	8001358 <LL_RCC_HSI_IsReady>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d019      	beq.n	8001548 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001516:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001518:	e016      	b.n	8001548 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800151a:	f7ff ff2f 	bl	800137c <LL_RCC_LSE_IsReady>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001528:	60fb      	str	r3, [r7, #12]
        }
        break;
 800152a:	e00f      	b.n	800154c <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800152c:	f000 f816 	bl	800155c <RCC_GetSystemClockFreq>
 8001530:	4603      	mov	r3, r0
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f834 	bl	80015a0 <RCC_GetHCLKClockFreq>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f846 	bl	80015cc <RCC_GetPCLK1ClockFreq>
 8001540:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001542:	e004      	b.n	800154e <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001544:	bf00      	nop
 8001546:	e002      	b.n	800154e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001548:	bf00      	nop
 800154a:	e000      	b.n	800154e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800154c:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	007a1200 	.word	0x007a1200

0800155c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001566:	f7ff ff1b 	bl	80013a0 <LL_RCC_GetSysClkSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b04      	cmp	r3, #4
 800156e:	d006      	beq.n	800157e <RCC_GetSystemClockFreq+0x22>
 8001570:	2b08      	cmp	r3, #8
 8001572:	d007      	beq.n	8001584 <RCC_GetSystemClockFreq+0x28>
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <RCC_GetSystemClockFreq+0x40>)
 800157a:	607b      	str	r3, [r7, #4]
      break;
 800157c:	e009      	b.n	8001592 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <RCC_GetSystemClockFreq+0x40>)
 8001580:	607b      	str	r3, [r7, #4]
      break;
 8001582:	e006      	b.n	8001592 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001584:	f000 f84a 	bl	800161c <RCC_PLL_GetFreqDomain_SYS>
 8001588:	6078      	str	r0, [r7, #4]
      break;
 800158a:	e002      	b.n	8001592 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <RCC_GetSystemClockFreq+0x40>)
 800158e:	607b      	str	r3, [r7, #4]
      break;
 8001590:	bf00      	nop
  }

  return frequency;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	007a1200 	.word	0x007a1200

080015a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80015a8:	f7ff ff08 	bl	80013bc <LL_RCC_GetAHBPrescaler>
 80015ac:	4603      	mov	r3, r0
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <RCC_GetHCLKClockFreq+0x28>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	461a      	mov	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	40d3      	lsrs	r3, r2
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08001af4 	.word	0x08001af4

080015cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80015d4:	f7ff ff00 	bl	80013d8 <LL_RCC_GetAPB1Prescaler>
 80015d8:	4603      	mov	r3, r0
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	40d3      	lsrs	r3, r2
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08001b04 	.word	0x08001b04

080015f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80015fc:	f7ff fefa 	bl	80013f4 <LL_RCC_GetAPB2Prescaler>
 8001600:	4603      	mov	r3, r0
 8001602:	0adb      	lsrs	r3, r3, #11
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <RCC_GetPCLK2ClockFreq+0x24>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	40d3      	lsrs	r3, r2
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	08001b04 	.word	0x08001b04

0800161c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800162a:	f7ff ff07 	bl	800143c <LL_RCC_PLL_GetMainSource>
 800162e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163a:	d003      	beq.n	8001644 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800163c:	e005      	b.n	800164a <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001640:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001642:	e005      	b.n	8001650 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001646:	60fb      	str	r3, [r7, #12]
      break;
 8001648:	e002      	b.n	8001650 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800164c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800164e:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001650:	f7ff ff10 	bl	8001474 <LL_RCC_PLL_GetPrediv>
 8001654:	4603      	mov	r3, r0
 8001656:	3301      	adds	r3, #1
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	fbb2 f4f3 	udiv	r4, r2, r3
 800165e:	f7ff fefb 	bl	8001458 <LL_RCC_PLL_GetMultiplicator>
 8001662:	4603      	mov	r3, r0
 8001664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001668:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800166c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	fa92 f2a2 	rbit	r2, r2
 8001674:	603a      	str	r2, [r7, #0]
  return result;
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	fab2 f282 	clz	r2, r2
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	40d3      	lsrs	r3, r2
 8001680:	3302      	adds	r3, #2
 8001682:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	003d0900 	.word	0x003d0900
 8001694:	007a1200 	.word	0x007a1200

08001698 <LL_TIM_SetPrescaler>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_TIM_SetAutoReload>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_TIM_SetRepetitionCounter>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <LL_TIM_Init+0xd0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <LL_TIM_Init+0x28>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172a:	d003      	beq.n	8001734 <LL_TIM_Init+0x28>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <LL_TIM_Init+0xd4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d106      	bne.n	8001742 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <LL_TIM_Init+0xd0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <LL_TIM_Init+0x66>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d00f      	beq.n	8001772 <LL_TIM_Init+0x66>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <LL_TIM_Init+0xd4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00b      	beq.n	8001772 <LL_TIM_Init+0x66>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <LL_TIM_Init+0xd8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <LL_TIM_Init+0x66>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <LL_TIM_Init+0xdc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d003      	beq.n	8001772 <LL_TIM_Init+0x66>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <LL_TIM_Init+0xe0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d106      	bne.n	8001780 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff91 	bl	80016b4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff7d 	bl	8001698 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <LL_TIM_Init+0xd0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00b      	beq.n	80017be <LL_TIM_Init+0xb2>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <LL_TIM_Init+0xd8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <LL_TIM_Init+0xb2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LL_TIM_Init+0xdc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d003      	beq.n	80017be <LL_TIM_Init+0xb2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <LL_TIM_Init+0xe0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d105      	bne.n	80017ca <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	7c1b      	ldrb	r3, [r3, #16]
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff83 	bl	80016d0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff8e 	bl	80016ec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40012c00 	.word	0x40012c00
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40014000 	.word	0x40014000
 80017e8:	40014400 	.word	0x40014400
 80017ec:	40014800 	.word	0x40014800

080017f0 <LL_USART_IsEnabled>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <LL_USART_IsEnabled+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_USART_IsEnabled+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_USART_SetStopBitsLength>:
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	605a      	str	r2, [r3, #4]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_USART_SetHWFlowCtrl>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_USART_SetBaudRate>:
{
 8001862:	b490      	push	{r4, r7}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001876:	d116      	bne.n	80018a6 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	005a      	lsls	r2, r3, #1
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	441a      	add	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001892:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	085b      	lsrs	r3, r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	60dc      	str	r4, [r3, #12]
}
 80018a4:	e00a      	b.n	80018bc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	085a      	lsrs	r2, r3, #1
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	441a      	add	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	60da      	str	r2, [r3, #12]
}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc90      	pop	{r4, r7}
 80018c4:	4770      	bx	lr
	...

080018c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff88 	bl	80017f0 <LL_USART_IsEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d14e      	bne.n	8001984 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <LL_USART_Init+0xc8>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	6851      	ldr	r1, [r2, #4]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	6912      	ldr	r2, [r2, #16]
 80018fc:	4311      	orrs	r1, r2
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	6992      	ldr	r2, [r2, #24]
 8001902:	430a      	orrs	r2, r1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff80 	bl	8001816 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff8d 	bl	800183c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <LL_USART_Init+0xcc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d104      	bne.n	8001934 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fdd6 	bl	80014dc <LL_RCC_GetUSARTClockFreq>
 8001930:	61b8      	str	r0, [r7, #24]
 8001932:	e016      	b.n	8001962 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <LL_USART_Init+0xd0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d107      	bne.n	800194c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fda5 	bl	8001490 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	e00a      	b.n	8001962 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <LL_USART_Init+0xd4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d106      	bne.n	8001962 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fd99 	bl	8001490 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00d      	beq.n	8001984 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	69b9      	ldr	r1, [r7, #24]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff6f 	bl	8001862 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001984:	7ffb      	ldrb	r3, [r7, #31]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	efff69f3 	.word	0xefff69f3
 8001994:	40013800 	.word	0x40013800
 8001998:	40004400 	.word	0x40004400
 800199c:	40004800 	.word	0x40004800

080019a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <LL_InitTick+0x30>)
 80019b4:	3b01      	subs	r3, #1
 80019b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <LL_InitTick+0x30>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <LL_InitTick+0x30>)
 80019c0:	2205      	movs	r2, #5
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80019dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffdd 	bl	80019a0 <LL_InitTick>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <LL_SetSystemCoreClock+0x1c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000

08001a10 <floorf>:
 8001a10:	ee10 3a10 	vmov	r3, s0
 8001a14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8001a18:	0dca      	lsrs	r2, r1, #23
 8001a1a:	3a7f      	subs	r2, #127	; 0x7f
 8001a1c:	2a16      	cmp	r2, #22
 8001a1e:	dc2a      	bgt.n	8001a76 <floorf+0x66>
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	da11      	bge.n	8001a48 <floorf+0x38>
 8001a24:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001a88 <floorf+0x78>
 8001a28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001a2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	dd05      	ble.n	8001a42 <floorf+0x32>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da23      	bge.n	8001a82 <floorf+0x72>
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <floorf+0x7c>)
 8001a3c:	2900      	cmp	r1, #0
 8001a3e:	bf18      	it	ne
 8001a40:	4613      	movne	r3, r2
 8001a42:	ee00 3a10 	vmov	s0, r3
 8001a46:	4770      	bx	lr
 8001a48:	4911      	ldr	r1, [pc, #68]	; (8001a90 <floorf+0x80>)
 8001a4a:	4111      	asrs	r1, r2
 8001a4c:	420b      	tst	r3, r1
 8001a4e:	d0fa      	beq.n	8001a46 <floorf+0x36>
 8001a50:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001a88 <floorf+0x78>
 8001a54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001a58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	ddef      	ble.n	8001a42 <floorf+0x32>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bfbe      	ittt	lt
 8001a66:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8001a6a:	fa40 f202 	asrlt.w	r2, r0, r2
 8001a6e:	189b      	addlt	r3, r3, r2
 8001a70:	ea23 0301 	bic.w	r3, r3, r1
 8001a74:	e7e5      	b.n	8001a42 <floorf+0x32>
 8001a76:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8001a7a:	d3e4      	bcc.n	8001a46 <floorf+0x36>
 8001a7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001a80:	4770      	bx	lr
 8001a82:	2300      	movs	r3, #0
 8001a84:	e7dd      	b.n	8001a42 <floorf+0x32>
 8001a86:	bf00      	nop
 8001a88:	7149f2ca 	.word	0x7149f2ca
 8001a8c:	bf800000 	.word	0xbf800000
 8001a90:	007fffff 	.word	0x007fffff

08001a94 <__libc_init_array>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	4e0d      	ldr	r6, [pc, #52]	; (8001acc <__libc_init_array+0x38>)
 8001a98:	4c0d      	ldr	r4, [pc, #52]	; (8001ad0 <__libc_init_array+0x3c>)
 8001a9a:	1ba4      	subs	r4, r4, r6
 8001a9c:	10a4      	asrs	r4, r4, #2
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	42a5      	cmp	r5, r4
 8001aa2:	d109      	bne.n	8001ab8 <__libc_init_array+0x24>
 8001aa4:	4e0b      	ldr	r6, [pc, #44]	; (8001ad4 <__libc_init_array+0x40>)
 8001aa6:	4c0c      	ldr	r4, [pc, #48]	; (8001ad8 <__libc_init_array+0x44>)
 8001aa8:	f000 f818 	bl	8001adc <_init>
 8001aac:	1ba4      	subs	r4, r4, r6
 8001aae:	10a4      	asrs	r4, r4, #2
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	42a5      	cmp	r5, r4
 8001ab4:	d105      	bne.n	8001ac2 <__libc_init_array+0x2e>
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001abc:	4798      	blx	r3
 8001abe:	3501      	adds	r5, #1
 8001ac0:	e7ee      	b.n	8001aa0 <__libc_init_array+0xc>
 8001ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ac6:	4798      	blx	r3
 8001ac8:	3501      	adds	r5, #1
 8001aca:	e7f2      	b.n	8001ab2 <__libc_init_array+0x1e>
 8001acc:	08001b0c 	.word	0x08001b0c
 8001ad0:	08001b0c 	.word	0x08001b0c
 8001ad4:	08001b0c 	.word	0x08001b0c
 8001ad8:	08001b10 	.word	0x08001b10

08001adc <_init>:
 8001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ade:	bf00      	nop
 8001ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae2:	bc08      	pop	{r3}
 8001ae4:	469e      	mov	lr, r3
 8001ae6:	4770      	bx	lr

08001ae8 <_fini>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	bf00      	nop
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr
