
osci_test_signal_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003000  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003570  08003570  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003570  08003570  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003570  08003570  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  0800357c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800357c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097b5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fa3  00000000  00000000  000297e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  0002b790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ac1  00000000  00000000  0002c788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006eb9  00000000  00000000  00046249  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d402  00000000  00000000  0004d102  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b8  00000000  00000000  000ca580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003170 	.word	0x08003170

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003170 	.word	0x08003170

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3308      	adds	r3, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80005f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80005fc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	fa92 f2a2 	rbit	r2, r2
 8000604:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	fab2 f282 	clz	r2, r2
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	40d3      	lsrs	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4313      	orrs	r3, r2
 8000624:	6023      	str	r3, [r4, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bc90      	pop	{r4, r7}
 800062e:	4770      	bx	lr

08000630 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f043 0201 	orr.w	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f023 0201 	bic.w	r2, r3, #1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f06f 0201 	mvn.w	r2, #1
 800069a:	611a      	str	r2, [r3, #16]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	f043 0201 	orr.w	r2, r3, #1
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80006d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80006d6:	f001 ff9b 	bl	8002610 <cosf>
 80006da:	eef0 7a40 	vmov.f32	s15, s0
 80006de:	eeb0 0a67 	vmov.f32	s0, s15
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80006f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80006f6:	f001 ffcb 	bl	8002690 <floorf>
 80006fa:	eef0 7a40 	vmov.f32	s15, s0
 80006fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000712:	ed97 0a01 	vldr	s0, [r7, #4]
 8000716:	f001 fffd 	bl	8002714 <sinf>
 800071a:	eef0 7a40 	vmov.f32	s15, s0
 800071e:	eeb0 0a67 	vmov.f32	s0, s15
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_Z16c_putSignalToDACPv>:
 *      Author: dot
 */

#include "SignalAdjuster.h"

void c_putSignalToDAC(void *v) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	SignalAdjuster *p = (SignalAdjuster*) v;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60fb      	str	r3, [r7, #12]
	LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, p->getNextSample());
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f000 fb9f 	bl	8000e78 <_ZN14SignalAdjuster13getNextSampleEv>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4904      	ldr	r1, [pc, #16]	; (8000750 <_Z16c_putSignalToDACPv+0x28>)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <_Z16c_putSignalToDACPv+0x2c>)
 8000742:	f7ff ff4d 	bl	80005e0 <LL_DAC_ConvertData12RightAligned>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	02100001 	.word	0x02100001
 8000754:	40007400 	.word	0x40007400

08000758 <_Z9c_executePv>:

void c_execute(void *v) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	SignalAdjuster *p = (SignalAdjuster*) v;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	60fb      	str	r3, [r7, #12]
	char cmd = USART2->RDR;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <_Z9c_executePv+0x28>)
 8000766:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000768:	b29b      	uxth	r3, r3
 800076a:	72fb      	strb	r3, [r7, #11]
	p->execute(cmd);
 800076c:	7afb      	ldrb	r3, [r7, #11]
 800076e:	4619      	mov	r1, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 fae3 	bl	8000d3c <_ZN14SignalAdjuster7executeEc>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40004400 	.word	0x40004400

08000784 <_ZN14SignalAdjuster17increaseAmplitudeEv>:

void SignalAdjuster::increaseAmplitude() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if (amplitude / amplitudePerLevel < numberOfQuantizationLevels / 2.0f) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000792:	edd3 6a00 	vldr	s13, [r3]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800079c:	edd3 7a00 	vldr	s15, [r3]
 80007a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007b2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80007b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80007ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	d54f      	bpl.n	8000864 <_ZN14SignalAdjuster17increaseAmplitudeEv+0xe0>
		amplitude += amplitudePerLevel*numberOfQuantizationLevels / 16.0f;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80007ca:	ed93 7a00 	vldr	s14, [r3]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80007d4:	edd3 6a00 	vldr	s13, [r3]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80007de:	ee07 3a90 	vmov	s15, r3
 80007e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80007ea:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 80007ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80007f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80007fc:	edc3 7a00 	vstr	s15, [r3]
		if (amplitude >= amplitudePerLevel*numberOfQuantizationLevels / 2) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000806:	ed93 7a00 	vldr	s14, [r3]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000810:	edd3 6a00 	vldr	s13, [r3]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000822:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000826:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800082a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800082e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000836:	db2a      	blt.n	800088e <_ZN14SignalAdjuster17increaseAmplitudeEv+0x10a>
			amplitude = amplitudePerLevel*(numberOfQuantizationLevels / 2 - 1);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800083e:	ed93 7a00 	vldr	s14, [r3]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	3b01      	subs	r3, #1
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800085e:	edc3 7a00 	vstr	s15, [r3]
 8000862:	e014      	b.n	800088e <_ZN14SignalAdjuster17increaseAmplitudeEv+0x10a>
		}
	} else {
		amplitude = amplitudePerLevel*(numberOfQuantizationLevels / 2 - 1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800086a:	ed93 7a00 	vldr	s14, [r3]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	3b01      	subs	r3, #1
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800088a:	edc3 7a00 	vstr	s15, [r3]
	}

	sample();
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 f8f4 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <_ZN14SignalAdjuster17decreaseAmplitudeEv>:

void SignalAdjuster::decreaseAmplitude() {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if (amplitude / amplitudePerLevel > 0) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80008aa:	edd3 6a00 	vldr	s13, [r3]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80008b4:	ed93 7a00 	vldr	s14, [r3]
 80008b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	dd2e      	ble.n	8000924 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x88>
		amplitude -= amplitudePerLevel*numberOfQuantizationLevels / 16;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80008cc:	ed93 7a00 	vldr	s14, [r3]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80008d6:	edd3 6a00 	vldr	s13, [r3]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80008e0:	ee07 3a90 	vmov	s15, r3
 80008e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008ec:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 80008f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80008f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80008fe:	edc3 7a00 	vstr	s15, [r3]
		if (amplitude < 0) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	d50c      	bpl.n	8000930 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x94>
			amplitude = 0;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800091c:	f04f 0200 	mov.w	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e005      	b.n	8000930 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x94>
		}
	} else {
		amplitude = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
	}

	sample();
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f8a3 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_ZN14SignalAdjuster17increaseFrequencyEv>:

void SignalAdjuster::increaseFrequency() {
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	frequency++;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 800095e:	edc3 7a00 	vstr	s15, [r3]

	sample();
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f88a 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <_ZN14SignalAdjuster17decreaseFrequencyEv>:
void SignalAdjuster::decreaseFrequency() {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if (frequency > 1) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098e:	dc00      	bgt.n	8000992 <_ZN14SignalAdjuster17decreaseFrequencyEv+0x22>
		frequency--;

		sample();
	}
}
 8000990:	e010      	b.n	80009b4 <_ZN14SignalAdjuster17decreaseFrequencyEv+0x44>
		frequency--;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8000998:	edd3 7a00 	vldr	s15, [r3]
 800099c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 80009aa:	edc3 7a00 	vstr	s15, [r3]
		sample();
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f864 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN14SignalAdjuster14previousSignalEv>:

void SignalAdjuster::previousSignal() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	switch (signal) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d81e      	bhi.n	8000a0c <_ZN14SignalAdjuster14previousSignalEv+0x50>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <_ZN14SignalAdjuster14previousSignalEv+0x18>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	080009ef 	.word	0x080009ef
 80009dc:	080009f9 	.word	0x080009f9
 80009e0:	08000a03 	.word	0x08000a03
	case SIGNAL_SINE:
		signal = SIGNAL_RANDOM;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2203      	movs	r2, #3
 80009e8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 80009ec:	e00e      	b.n	8000a0c <_ZN14SignalAdjuster14previousSignalEv+0x50>
	case SIGNAL_COSINE:
		signal = SIGNAL_SINE;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 80009f6:	e009      	b.n	8000a0c <_ZN14SignalAdjuster14previousSignalEv+0x50>
	case SIGNAL_TANGENT:
		signal = SIGNAL_COSINE;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2201      	movs	r2, #1
 80009fc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 8000a00:	e004      	b.n	8000a0c <_ZN14SignalAdjuster14previousSignalEv+0x50>
	case SIGNAL_RANDOM:
		signal = SIGNAL_TANGENT;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2202      	movs	r2, #2
 8000a06:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 8000a0a:	bf00      	nop
	}

	sample();
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f835 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop

08000a1c <_ZN14SignalAdjuster10nextSignalEv>:
void SignalAdjuster::nextSignal() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	switch (signal) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d81e      	bhi.n	8000a6c <_ZN14SignalAdjuster10nextSignalEv+0x50>
 8000a2e:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <_ZN14SignalAdjuster10nextSignalEv+0x18>)
 8000a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a34:	08000a45 	.word	0x08000a45
 8000a38:	08000a4f 	.word	0x08000a4f
 8000a3c:	08000a59 	.word	0x08000a59
 8000a40:	08000a63 	.word	0x08000a63
	case SIGNAL_SINE:
		signal = SIGNAL_COSINE;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 8000a4c:	e00e      	b.n	8000a6c <_ZN14SignalAdjuster10nextSignalEv+0x50>
	case SIGNAL_COSINE:
		signal = SIGNAL_TANGENT;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2202      	movs	r2, #2
 8000a52:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 8000a56:	e009      	b.n	8000a6c <_ZN14SignalAdjuster10nextSignalEv+0x50>
	case SIGNAL_TANGENT:
		signal = SIGNAL_RANDOM;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 8000a60:	e004      	b.n	8000a6c <_ZN14SignalAdjuster10nextSignalEv+0x50>
	case SIGNAL_RANDOM:
		signal = SIGNAL_SINE;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
		break;
 8000a6a:	bf00      	nop
	}

	sample();
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f805 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop

08000a7c <_ZN14SignalAdjuster6sampleEv>:

void SignalAdjuster::sample() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	ed2d 8b02 	vpush	{d8}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	float signal_increment;
	sampleIndex = 0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
	switch (signal) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <_ZN14SignalAdjuster6sampleEv+0x24>
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d034      	beq.n	8000b08 <_ZN14SignalAdjuster6sampleEv+0x8c>
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
			signalBuffer[i] = quantize(offset + amplitude*cos(signal_increment * i));
		}
		break;
	default:
		return;
 8000a9e:	e06d      	b.n	8000b7c <_ZN14SignalAdjuster6sampleEv+0x100>
		signal_increment = 2 * M_PI / (NUM_SAMPLES - 1);
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <_ZN14SignalAdjuster6sampleEv+0x10c>)
 8000aa2:	60fb      	str	r3, [r7, #12]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aae:	d25f      	bcs.n	8000b70 <_ZN14SignalAdjuster6sampleEv+0xf4>
			signalBuffer[i] = quantize(offset + amplitude*sin(signal_increment * i));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000ab6:	ed93 8a00 	vldr	s16, [r3]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000ac0:	edd3 8a00 	vldr	s17, [r3]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	ee07 3a90 	vmov	s15, r3
 8000aca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ada:	f7ff fe15 	bl	8000708 <_ZSt3sinf>
 8000ade:	eef0 7a40 	vmov.f32	s15, s0
 8000ae2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000ae6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000aea:	eeb0 0a67 	vmov.f32	s0, s15
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f8a0 	bl	8000c34 <_ZN14SignalAdjuster8quantizeEf>
 8000af4:	4601      	mov	r1, r0
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	6059      	str	r1, [r3, #4]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e7cf      	b.n	8000aa8 <_ZN14SignalAdjuster6sampleEv+0x2c>
		signal_increment = 2 * M_PI / (NUM_SAMPLES - 1);
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <_ZN14SignalAdjuster6sampleEv+0x10c>)
 8000b0a:	60fb      	str	r3, [r7, #12]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b16:	d22d      	bcs.n	8000b74 <_ZN14SignalAdjuster6sampleEv+0xf8>
			signalBuffer[i] = quantize(offset + amplitude*cos(signal_increment * i));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000b1e:	ed93 8a00 	vldr	s16, [r3]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000b28:	edd3 8a00 	vldr	s17, [r3]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	ee07 3a90 	vmov	s15, r3
 8000b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b42:	f7ff fdc1 	bl	80006c8 <_ZSt3cosf>
 8000b46:	eef0 7a40 	vmov.f32	s15, s0
 8000b4a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000b4e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000b52:	eeb0 0a67 	vmov.f32	s0, s15
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f86c 	bl	8000c34 <_ZN14SignalAdjuster8quantizeEf>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	6059      	str	r1, [r3, #4]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	e7cf      	b.n	8000b10 <_ZN14SignalAdjuster6sampleEv+0x94>
		break;
 8000b70:	bf00      	nop
 8000b72:	e000      	b.n	8000b76 <_ZN14SignalAdjuster6sampleEv+0xfa>
		break;
 8000b74:	bf00      	nop
	}

	configureTimer();
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 f808 	bl	8000b8c <_ZN14SignalAdjuster14configureTimerEv>
}
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	ecbd 8b02 	vpop	{d8}
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	3c497495 	.word	0x3c497495

08000b8c <_ZN14SignalAdjuster14configureTimerEv>:

void SignalAdjuster::configureTimer() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableCounter(TIM1);
 8000b94:	4823      	ldr	r0, [pc, #140]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000b96:	f7ff fd5b 	bl	8000650 <LL_TIM_DisableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM1);
 8000b9a:	4822      	ldr	r0, [pc, #136]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000b9c:	f7ff fd76 	bl	800068c <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4820      	ldr	r0, [pc, #128]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000ba4:	f7ff fd64 	bl	8000670 <LL_TIM_SetCounter>

	// Asumes TIM1 is used with 8MHZ clock speed
	float cyclesPerSample = TIM1_CLOCK_SPEED / frequency / (NUM_SAMPLES - 1);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8000bae:	edd3 7a00 	vldr	s15, [r3]
 8000bb2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000c28 <_ZN14SignalAdjuster14configureTimerEv+0x9c>
 8000bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bba:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000c2c <_ZN14SignalAdjuster14configureTimerEv+0xa0>
 8000bbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc2:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t overflows = floor(cyclesPerSample/65535);
 8000bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000c30 <_ZN14SignalAdjuster14configureTimerEv+0xa4>
 8000bce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000bd2:	eeb0 0a66 	vmov.f32	s0, s13
 8000bd6:	f7ff fd87 	bl	80006e8 <_ZSt5floorf>
 8000bda:	eef0 7a40 	vmov.f32	s15, s0
 8000bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be2:	ee17 3a90 	vmov	r3, s15
 8000be6:	817b      	strh	r3, [r7, #10]
	TIM1->PSC = overflows;
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000bea:	897b      	ldrh	r3, [r7, #10]
 8000bec:	6293      	str	r3, [r2, #40]	; 0x28
	TIM1->ARR = cyclesPerSample/(overflows + 1);
 8000bee:	897b      	ldrh	r3, [r7, #10]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfa:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c08:	ee17 2a90 	vmov	r2, s15
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c

	LL_TIM_EnableIT_UPDATE(TIM1);
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c10:	f7ff fd4a 	bl	80006a8 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c16:	f7ff fd0b 	bl	8000630 <LL_TIM_EnableCounter>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40012c00 	.word	0x40012c00
 8000c28:	4af42400 	.word	0x4af42400
 8000c2c:	43ff8000 	.word	0x43ff8000
 8000c30:	477fff00 	.word	0x477fff00

08000c34 <_ZN14SignalAdjuster8quantizeEf>:

uint32_t SignalAdjuster::quantize(float v) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	ed2d 8b02 	vpush	{d8}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	ed87 0a00 	vstr	s0, [r7]
	return MAX(0,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	ee07 3a90 	vmov	s15, r3
 8000c50:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	ed97 7a00 	vldr	s14, [r7]
 8000c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c66:	eeb0 0a66 	vmov.f32	s0, s13
 8000c6a:	f7ff fd3d 	bl	80006e8 <_ZSt5floorf>
 8000c6e:	eef0 7a40 	vmov.f32	s15, s0
 8000c72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7a:	d501      	bpl.n	8000c80 <_ZN14SignalAdjuster8quantizeEf+0x4c>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e016      	b.n	8000cae <_ZN14SignalAdjuster8quantizeEf+0x7a>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	ed97 7a00 	vldr	s14, [r7]
 8000c8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c92:	eeb0 0a66 	vmov.f32	s0, s13
 8000c96:	f7ff fd27 	bl	80006e8 <_ZSt5floorf>
 8000c9a:	eef0 7a40 	vmov.f32	s15, s0
 8000c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	bf4c      	ite	mi
 8000ca8:	2301      	movmi	r3, #1
 8000caa:	2300      	movpl	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <_ZN14SignalAdjuster8quantizeEf+0x84>
 8000cb2:	eddf 7a21 	vldr	s15, [pc, #132]	; 8000d38 <_ZN14SignalAdjuster8quantizeEf+0x104>
 8000cb6:	e037      	b.n	8000d28 <_ZN14SignalAdjuster8quantizeEf+0xf4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000cce:	edd3 7a00 	vldr	s15, [r3]
 8000cd2:	ed97 7a00 	vldr	s14, [r7]
 8000cd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000cda:	eeb0 0a66 	vmov.f32	s0, s13
 8000cde:	f7ff fd03 	bl	80006e8 <_ZSt5floorf>
 8000ce2:	eef0 7a40 	vmov.f32	s15, s0
 8000ce6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	d50a      	bpl.n	8000d06 <_ZN14SignalAdjuster8quantizeEf+0xd2>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d04:	e010      	b.n	8000d28 <_ZN14SignalAdjuster8quantizeEf+0xf4>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000d0c:	edd3 7a00 	vldr	s15, [r3]
 8000d10:	ed97 7a00 	vldr	s14, [r7]
 8000d14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d18:	eeb0 0a66 	vmov.f32	s0, s13
 8000d1c:	f7ff fce4 	bl	80006e8 <_ZSt5floorf>
 8000d20:	eef0 7a40 	vmov.f32	s15, s0
 8000d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d28:	ee17 3a90 	vmov	r3, s15
			MIN(numberOfQuantizationLevels - 1, floor(v/amplitudePerLevel)));
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	ecbd 8b02 	vpop	{d8}
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	00000000 	.word	0x00000000

08000d3c <_ZN14SignalAdjuster7executeEc>:
void SignalAdjuster::execute(char cmd) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
	switch (cmd) {
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	3b69      	subs	r3, #105	; 0x69
 8000d4c:	2b0c      	cmp	r3, #12
 8000d4e:	d83d      	bhi.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <_ZN14SignalAdjuster7executeEc+0x1c>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d8d 	.word	0x08000d8d
 8000d5c:	08000d9d 	.word	0x08000d9d
 8000d60:	08000d95 	.word	0x08000d95
 8000d64:	08000da5 	.word	0x08000da5
 8000d68:	08000dcd 	.word	0x08000dcd
 8000d6c:	08000dcd 	.word	0x08000dcd
 8000d70:	08000dbd 	.word	0x08000dbd
 8000d74:	08000dcd 	.word	0x08000dcd
 8000d78:	08000dcd 	.word	0x08000dcd
 8000d7c:	08000db5 	.word	0x08000db5
 8000d80:	08000dcd 	.word	0x08000dcd
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dc5 	.word	0x08000dc5
	case 'i':
		increaseAmplitude();
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fcf9 	bl	8000784 <_ZN14SignalAdjuster17increaseAmplitudeEv>
		break;
 8000d92:	e01b      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 'k':
		decreaseAmplitude();
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fd81 	bl	800089c <_ZN14SignalAdjuster17decreaseAmplitudeEv>
		break;
 8000d9a:	e017      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 'j':
		increaseFrequency();
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fdce 	bl	800093e <_ZN14SignalAdjuster17increaseFrequencyEv>
		break;
 8000da2:	e013      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 'l':
		decreaseFrequency();
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fde3 	bl	8000970 <_ZN14SignalAdjuster17decreaseFrequencyEv>
		break;
 8000daa:	e00f      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 't':
		nextSignal();
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fe35 	bl	8000a1c <_ZN14SignalAdjuster10nextSignalEv>
		break;
 8000db2:	e00b      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 'r':
		previousSignal();
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fe01 	bl	80009bc <_ZN14SignalAdjuster14previousSignalEv>
		break;
 8000dba:	e007      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 'o':
		increaseOffset();
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f80b 	bl	8000dd8 <_ZN14SignalAdjuster14increaseOffsetEv>
		break;
 8000dc2:	e003      	b.n	8000dcc <_ZN14SignalAdjuster7executeEc+0x90>
	case 'u':
		decreaseOffset();
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f82f 	bl	8000e28 <_ZN14SignalAdjuster14decreaseOffsetEv>
		break;
 8000dca:	bf00      	nop
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0000      	movs	r0, r0
	...

08000dd8 <_ZN14SignalAdjuster14increaseOffsetEv>:

void SignalAdjuster::increaseOffset(){
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	offset +=0.1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb51 	bl	8000490 <__aeabi_f2d>
 8000dee:	a30c      	add	r3, pc, #48	; (adr r3, 8000e20 <_ZN14SignalAdjuster14increaseOffsetEv+0x48>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff f9ee 	bl	80001d4 <__adddf3>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	4621      	mov	r1, r4
 8000e00:	f7ff fb9e 	bl	8000540 <__aeabi_d2f>
 8000e04:	4602      	mov	r2, r0
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000e0c:	601a      	str	r2, [r3, #0]

	sample();
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fe34 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	9999999a 	.word	0x9999999a
 8000e24:	3fb99999 	.word	0x3fb99999

08000e28 <_ZN14SignalAdjuster14decreaseOffsetEv>:
void SignalAdjuster::decreaseOffset(){
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	offset -=0.1;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb29 	bl	8000490 <__aeabi_f2d>
 8000e3e:	a30c      	add	r3, pc, #48	; (adr r3, 8000e70 <_ZN14SignalAdjuster14decreaseOffsetEv+0x48>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	f7ff f9c4 	bl	80001d0 <__aeabi_dsub>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4621      	mov	r1, r4
 8000e50:	f7ff fb76 	bl	8000540 <__aeabi_d2f>
 8000e54:	4602      	mov	r2, r0
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000e5c:	601a      	str	r2, [r3, #0]

	sample();
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fe0c 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	f3af 8000 	nop.w
 8000e70:	9999999a 	.word	0x9999999a
 8000e74:	3fb99999 	.word	0x3fb99999

08000e78 <_ZN14SignalAdjuster13getNextSampleEv>:

uint32_t SignalAdjuster::getNextSample() {
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint32_t ret = signalBuffer[sampleIndex];
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	60fb      	str	r3, [r7, #12]
	++sampleIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
	sampleIndex %= NUM_SAMPLES;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8000ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
	return ret;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_ZN14SignalAdjuster5startEv>:

void SignalAdjuster::start(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	sample();
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fdd9 	bl	8000a7c <_ZN14SignalAdjuster6sampleEv>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <LL_DAC_Enable>:
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f043 0220 	orr.w	r2, r3, #32
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_ZN14SignalAdjusterC1Efffmfmm>:
	void sample();
	void configureTimer();
	uint32_t quantize(float v);

public:
	SignalAdjuster(float amplitude=0.5, float frequency=10, float offset=1,
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	61f8      	str	r0, [r7, #28]
 8000f28:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f2c:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f30:	ed87 1a04 	vstr	s2, [r7, #16]
 8000f34:	60f9      	str	r1, [r7, #12]
 8000f36:	edc7 1a02 	vstr	s3, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	603b      	str	r3, [r7, #0]
			uint32_t numberOfQuantizationLevels=4096, float amplitudePerLevel=1.0f/2048,
			uint32_t startSampleIndex=0, uint32_t startSignal=0) :
				 signal(startSignal), amplitude(amplitude), frequency(frequency), offset(offset), numberOfQuantizationLevels(
					numberOfQuantizationLevels), amplitudePerLevel(
					amplitudePerLevel), sampleIndex(startSampleIndex) {
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
		tim1_callback = c_putSignalToDAC;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <_ZN14SignalAdjusterC1Efffmfmm+0x78>)
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <_ZN14SignalAdjusterC1Efffmfmm+0x7c>)
 8000f82:	601a      	str	r2, [r3, #0]
		usart2_rxne_callback = c_execute;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <_ZN14SignalAdjusterC1Efffmfmm+0x80>)
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <_ZN14SignalAdjusterC1Efffmfmm+0x84>)
 8000f88:	601a      	str	r2, [r3, #0]
	}
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3724      	adds	r7, #36	; 0x24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	08000729 	.word	0x08000729
 8000fa0:	20000024 	.word	0x20000024
 8000fa4:	08000759 	.word	0x08000759

08000fa8 <_Z10usart_initv>:

#include "cppmain.h"
#include "main.h"
#include "SignalAdjuster.h"

void usart_init(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <_Z10usart_initv+0x10>)
 8000fae:	f7ff ffa6 	bl	8000efe <LL_USART_EnableIT_RXNE>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004400 	.word	0x40004400

08000fbc <_Z8dac_initv>:

void dac_init(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	LL_DAC_Enable(DAC, LL_DAC_CHANNEL_1);
 8000fc0:	4902      	ldr	r1, [pc, #8]	; (8000fcc <_Z8dac_initv+0x10>)
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <_Z8dac_initv+0x14>)
 8000fc4:	f7ff ff85 	bl	8000ed2 <LL_DAC_Enable>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	02100001 	.word	0x02100001
 8000fd0:	40007400 	.word	0x40007400

08000fd4 <cppmain>:
		TIM1->ARR = arr;
	}

}

void cppmain(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
 8000fda:	af00      	add	r7, sp, #0
	usart_init();
 8000fdc:	f7ff ffe4 	bl	8000fa8 <_Z10usart_initv>
	dac_init();
 8000fe0:	f7ff ffec 	bl	8000fbc <_Z8dac_initv>

	SignalAdjuster adj;
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2200      	movs	r2, #0
 8000fea:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8001014 <cppmain+0x40>
 8000fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000ff6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000ffa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000ffe:	f7ff ff8f 	bl	8000f20 <_ZN14SignalAdjusterC1Efffmfmm>
	adj_IT_reference = &adj;
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <cppmain+0x44>)
 8001004:	463b      	mov	r3, r7
 8001006:	6013      	str	r3, [r2, #0]
	adj.start();
 8001008:	463b      	mov	r3, r7
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff56 	bl	8000ebc <_ZN14SignalAdjuster5startEv>

	while(1){
 8001010:	e7fe      	b.n	8001010 <cppmain+0x3c>
 8001012:	bf00      	nop
 8001014:	3a000000 	.word	0x3a000000
 8001018:	20000020 	.word	0x20000020

0800101c <LL_DAC_DisableTrigger>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	2104      	movs	r1, #4
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4013      	ands	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000

0800107c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001086:	69da      	ldr	r2, [r3, #28]
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4313      	orrs	r3, r2
 800108e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001092:	69da      	ldr	r2, [r3, #28]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4013      	ands	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000

080010ac <MX_DAC1_Init>:

/* USER CODE END 0 */

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80010d0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80010d4:	f7ff ffd2 	bl	800107c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010dc:	f7ff ffb6 	bl	800104c <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80010e0:	2310      	movs	r3, #16
 80010e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f000 feb8 	bl	8001e68 <LL_GPIO_Init>

  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 80010f8:	2338      	movs	r3, #56	; 0x38
 80010fa:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	461a      	mov	r2, r3
 800110a:	4906      	ldr	r1, [pc, #24]	; (8001124 <MX_DAC1_Init+0x78>)
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_DAC1_Init+0x7c>)
 800110e:	f000 fd55 	bl	8001bbc <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8001112:	4904      	ldr	r1, [pc, #16]	; (8001124 <MX_DAC1_Init+0x78>)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_DAC1_Init+0x7c>)
 8001116:	f7ff ff81 	bl	800101c <LL_DAC_DisableTrigger>

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	02100001 	.word	0x02100001
 8001128:	40007400 	.word	0x40007400

0800112c <LL_AHB1_GRP1_EnableClock>:
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4313      	orrs	r3, r2
 800113e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4013      	ands	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000

0800115c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001160:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001164:	f7ff ffe2 	bl	800112c <LL_AHB1_GRP1_EnableClock>

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <LL_RCC_HSI_Enable+0x1c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <LL_RCC_HSI_Enable+0x1c>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <LL_RCC_HSI_IsReady+0x20>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000

080011f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4904      	ldr	r1, [pc, #16]	; (8001220 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <LL_RCC_SetSysClkSource+0x24>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 0203 	bic.w	r2, r3, #3
 8001234:	4904      	ldr	r1, [pc, #16]	; (8001248 <LL_RCC_SetSysClkSource+0x24>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000

0800124c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <LL_RCC_GetSysClkSource+0x18>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 030c 	and.w	r3, r3, #12
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <LL_RCC_SetAHBPrescaler+0x24>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001278:	4904      	ldr	r1, [pc, #16]	; (800128c <LL_RCC_SetAHBPrescaler+0x24>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40021000 	.word	0x40021000

08001290 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a0:	4904      	ldr	r1, [pc, #16]	; (80012b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000

080012b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c8:	4904      	ldr	r1, [pc, #16]	; (80012dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000

080012e0 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <LL_RCC_SetTIMClockSource+0x34>)
 80012ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0edb      	lsrs	r3, r3, #27
 80012f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8001302:	4904      	ldr	r1, [pc, #16]	; (8001314 <LL_RCC_SetTIMClockSource+0x34>)
 8001304:	4313      	orrs	r3, r2
 8001306:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000

08001318 <LL_APB1_GRP1_EnableClock>:
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4313      	orrs	r3, r2
 800132a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LL_APB1_GRP1_EnableClock+0x2c>)
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000

08001348 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <LL_APB2_GRP1_EnableClock+0x2c>)
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40021000 	.word	0x40021000

08001378 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <LL_FLASH_SetLatency+0x24>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 0207 	bic.w	r2, r3, #7
 8001388:	4904      	ldr	r1, [pc, #16]	; (800139c <LL_FLASH_SetLatency+0x24>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40022000 	.word	0x40022000

080013a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <LL_FLASH_GetLatency+0x18>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d106      	bne.n	80013d8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80013d6:	e005      	b.n	80013e4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <LL_SYSTICK_SetClkSource+0x34>)
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff ffa5 	bl	8001348 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80013fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001402:	f7ff ff89 	bl	8001318 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001406:	2003      	movs	r0, #3
 8001408:	f7ff feb0 	bl	800116c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f80c 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f7ff fea4 	bl	800115c <MX_GPIO_Init>
  MX_DAC1_Init();
 8001414:	f7ff fe4a 	bl	80010ac <MX_DAC1_Init>
  MX_TIM1_Init();
 8001418:	f000 f9ee 	bl	80017f8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fb22 	bl	8001a64 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cppmain();
 8001420:	f7ff fdd8 	bl	8000fd4 <cppmain>
 8001424:	e7fc      	b.n	8001420 <main+0x2c>
	...

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ffa3 	bl	8001378 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001432:	f7ff ffb5 	bl	80013a0 <LL_FLASH_GetLatency>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 800143c:	f000 f82e 	bl	800149c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001440:	f7ff feb8 	bl	80011b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001444:	bf00      	nop
 8001446:	f7ff fec5 	bl	80011d4 <LL_RCC_HSI_IsReady>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d1fa      	bne.n	8001446 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001450:	2010      	movs	r0, #16
 8001452:	f7ff fed1 	bl	80011f8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ff06 	bl	8001268 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ff17 	bl	8001290 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff28 	bl	80012b8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fedb 	bl	8001224 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800146e:	bf00      	nop
 8001470:	f7ff feec 	bl	800124c <LL_RCC_GetSysClkSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1fa      	bne.n	8001470 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <SystemClock_Config+0x70>)
 800147c:	f001 f8aa 	bl	80025d4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001480:	2004      	movs	r0, #4
 8001482:	f7ff ff9b 	bl	80013bc <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <SystemClock_Config+0x70>)
 8001488:	f001 f8b2 	bl	80025f0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ff27 	bl	80012e0 <LL_RCC_SetTIMClockSource>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	007a1200 	.word	0x007a1200

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_TIM_ClearFlag_UPDATE>:
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f06f 0201 	mvn.w	r2, #1
 80014b8:	611a      	str	r2, [r3, #16]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_USART_IsActiveFlag_RXNE>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d101      	bne.n	8001504 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <HardFault_Handler+0x4>

08001526 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <MemManage_Handler+0x4>

0800152c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <BusFault_Handler+0x4>

08001532 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <UsageFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)){
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001576:	f7ff ffa6 	bl	80014c6 <LL_TIM_IsActiveFlag_UPDATE>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <TIM1_UP_TIM16_IRQHandler+0x22>
		tim1_callback(adj_IT_reference);
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	4610      	mov	r0, r2
 800158a:	4798      	blx	r3
		LL_TIM_ClearFlag_UPDATE(TIM1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800158e:	f7ff ff8c 	bl	80014aa <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012c00 	.word	0x40012c00
 800159c:	20000028 	.word	0x20000028
 80015a0:	20000020 	.word	0x20000020

080015a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)){
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <USART2_IRQHandler+0x20>)
 80015aa:	f7ff ff9f 	bl	80014ec <LL_USART_IsActiveFlag_RXNE>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <USART2_IRQHandler+0x1c>
		usart2_rxne_callback(adj_IT_reference);
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <USART2_IRQHandler+0x24>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <USART2_IRQHandler+0x28>)
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	4610      	mov	r0, r2
 80015be:	4798      	blx	r3
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004400 	.word	0x40004400
 80015c8:	20000024 	.word	0x20000024
 80015cc:	20000020 	.word	0x20000020

080015d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <SystemInit+0x28>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <SystemInit+0x28>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SystemInit+0x28>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	609a      	str	r2, [r3, #8]
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <LL_APB2_GRP1_EnableClock>:
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <LL_APB2_GRP1_EnableClock+0x2c>)
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <LL_APB2_GRP1_EnableClock+0x2c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000

08001740 <LL_TIM_DisableARRPreload>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_TIM_SetClockSource>:
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001772:	f023 0307 	bic.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	609a      	str	r2, [r3, #8]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_TIM_SetTriggerOutput>:
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	605a      	str	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_TIM_SetTriggerOutput2>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	605a      	str	r2, [r3, #4]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_TIM_DisableMasterSlaveMode>:
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800180c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001810:	f7ff ff7e 	bl	8001710 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001814:	f7ff fef2 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001818:	4603      	mov	r3, r0
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff42 	bl	80016a8 <NVIC_EncodePriority>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	2019      	movs	r0, #25
 800182a:	f7ff ff13 	bl	8001654 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800182e:	2019      	movs	r0, #25
 8001830:	f7ff fef2 	bl	8001618 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM1_Init+0x88>)
 800184e:	f000 fd5d 	bl	800230c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_TIM1_Init+0x88>)
 8001854:	f7ff ff74 	bl	8001740 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001858:	2100      	movs	r1, #0
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <MX_TIM1_Init+0x88>)
 800185c:	f7ff ff80 	bl	8001760 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001860:	2100      	movs	r1, #0
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <MX_TIM1_Init+0x88>)
 8001864:	f7ff ff91 	bl	800178a <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001868:	2100      	movs	r1, #0
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM1_Init+0x88>)
 800186c:	f7ff ffa0 	bl	80017b0 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <MX_TIM1_Init+0x88>)
 8001872:	f7ff ffb0 	bl	80017d6 <LL_TIM_DisableMasterSlaveMode>

}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40012c00 	.word	0x40012c00

08001884 <__NVIC_GetPriorityGrouping>:
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <LL_AHB1_GRP1_EnableClock>:
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000

080019c8 <LL_APB1_GRP1_EnableClock>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000

080019f8 <LL_USART_Enable>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	601a      	str	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_USART_ConfigAsyncMode>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a92:	f7ff ff99 	bl	80019c8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a9a:	f7ff ff7d 	bl	8001998 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001a9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001aa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f000 f9d2 	bl	8001e68 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ac4:	f7ff fede 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff2e 	bl	8001930 <NVIC_EncodePriority>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2026      	movs	r0, #38	; 0x26
 8001ada:	f7ff feff 	bl	80018dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001ade:	2026      	movs	r0, #38	; 0x26
 8001ae0:	f7ff fede 	bl	80018a0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001ae4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ae8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001af6:	230c      	movs	r3, #12
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_USART2_UART_Init+0xc4>)
 8001b0a:	f000 fcdd 	bl	80024c8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <MX_USART2_UART_Init+0xc4>)
 8001b10:	f7ff ff98 	bl	8001a44 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_USART2_UART_Init+0xc4>)
 8001b16:	f7ff ff7f 	bl	8001a18 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_USART2_UART_Init+0xc4>)
 8001b1c:	f7ff ff6c 	bl	80019f8 <LL_USART_Enable>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40004400 	.word	0x40004400

08001b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
	ldr	r2, =_sbss
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <LoopForever+0x16>)
	cmp	r2, r3
 8001b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b56:	f7ff fd3b 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f001 fae5 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5e:	f7ff fc49 	bl	80013f4 <main>

08001b62 <LoopForever>:

LoopForever:
    b LoopForever
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b64:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b68:	08003578 	.word	0x08003578
	ldr	r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b70:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001b74:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001b78:	2000002c 	.word	0x2000002c

08001b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>

08001b7e <LL_DAC_IsEnabled>:
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	bf0c      	ite	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	2300      	movne	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff ffd5 	bl	8001b7e <LL_DAC_IsEnabled>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d13a      	bne.n	8001c50 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d01e      	beq.n	8001c20 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	f640 71fa 	movw	r1, #4090	; 0xffa
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4319      	orrs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	4319      	orrs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4319      	orrs	r1, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e019      	b.n	8001c54 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	21fa      	movs	r1, #250	; 0xfa
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4319      	orrs	r1, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e001      	b.n	8001c54 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b089      	sub	sp, #36	; 0x24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	613b      	str	r3, [r7, #16]
  return result;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2103      	movs	r1, #3
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	61bb      	str	r3, [r7, #24]
  return result;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	431a      	orrs	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	613b      	str	r3, [r7, #16]
  return result;
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2103      	movs	r1, #3
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	61bb      	str	r3, [r7, #24]
  return result;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001d3e:	bf00      	nop
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b089      	sub	sp, #36	; 0x24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	613b      	str	r3, [r7, #16]
  return result;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2103      	movs	r1, #3
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	401a      	ands	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	61bb      	str	r3, [r7, #24]
  return result;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	431a      	orrs	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	60da      	str	r2, [r3, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3724      	adds	r7, #36	; 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	613b      	str	r3, [r7, #16]
  return result;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	210f      	movs	r1, #15
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	61bb      	str	r3, [r7, #24]
  return result;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b089      	sub	sp, #36	; 0x24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	613b      	str	r3, [r7, #16]
  return result;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	210f      	movs	r1, #15
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	61bb      	str	r3, [r7, #24]
  return result;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	431a      	orrs	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001e5c:	bf00      	nop
 8001e5e:	3724      	adds	r7, #36	; 0x24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	613b      	str	r3, [r7, #16]
  return result;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e8a:	e049      	b.n	8001f20 <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03b      	beq.n	8001f1a <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	69b9      	ldr	r1, [r7, #24]
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fed7 	bl	8001c5e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d003      	beq.n	8001ec0 <LL_GPIO_Init+0x58>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d106      	bne.n	8001ece <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff0f 	bl	8001cec <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	69b9      	ldr	r1, [r7, #24]
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff37 	bl	8001d4a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d11a      	bne.n	8001f1a <LL_GPIO_Init+0xb2>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	60bb      	str	r3, [r7, #8]
  return result;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b07      	cmp	r3, #7
 8001efa:	d807      	bhi.n	8001f0c <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	461a      	mov	r2, r3
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff4f 	bl	8001da8 <LL_GPIO_SetAFPin_0_7>
 8001f0a:	e006      	b.n	8001f1a <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	461a      	mov	r2, r3
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff76 	bl	8001e06 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ae      	bne.n	8001e8c <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d003      	beq.n	8001f3e <LL_GPIO_Init+0xd6>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d107      	bne.n	8001f4e <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	461a      	mov	r2, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff feb7 	bl	8001cbc <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <LL_RCC_HSI_IsReady>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <LL_RCC_HSI_IsReady+0x20>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000

08001f7c <LL_RCC_LSE_IsReady>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <LL_RCC_LSE_IsReady+0x20>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <LL_RCC_GetSysClkSource>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <LL_RCC_GetSysClkSource+0x18>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000

08001fbc <LL_RCC_GetAHBPrescaler>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <LL_RCC_GetAPB1Prescaler>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <LL_RCC_GetAPB2Prescaler>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <LL_RCC_GetUSARTClockSource+0x28>)
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	2103      	movs	r1, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	4313      	orrs	r3, r2
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000

0800203c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <LL_RCC_PLL_GetMainSource+0x18>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <LL_RCC_PLL_GetPrediv+0x18>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f003 030f 	and.w	r3, r3, #15
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002098:	f000 f860 	bl	800215c <RCC_GetSystemClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f87a 	bl	80021a0 <RCC_GetHCLKClockFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f888 	bl	80021cc <RCC_GetPCLK1ClockFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f894 	bl	80021f4 <RCC_GetPCLK2ClockFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60da      	str	r2, [r3, #12]
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d12a      	bne.n	8002144 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff8e 	bl	8002010 <LL_RCC_GetUSARTClockSource>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d00f      	beq.n	800211a <LL_RCC_GetUSARTClockFreq+0x3e>
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d005      	beq.n	800210a <LL_RCC_GetUSARTClockFreq+0x2e>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d114      	bne.n	800212c <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002102:	f000 f82b 	bl	800215c <RCC_GetSystemClockFreq>
 8002106:	60f8      	str	r0, [r7, #12]
        break;
 8002108:	e021      	b.n	800214e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800210a:	f7ff ff25 	bl	8001f58 <LL_RCC_HSI_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d019      	beq.n	8002148 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8002116:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002118:	e016      	b.n	8002148 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800211a:	f7ff ff2f 	bl	8001f7c <LL_RCC_LSE_IsReady>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8002124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002128:	60fb      	str	r3, [r7, #12]
        }
        break;
 800212a:	e00f      	b.n	800214c <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800212c:	f000 f816 	bl	800215c <RCC_GetSystemClockFreq>
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f834 	bl	80021a0 <RCC_GetHCLKClockFreq>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f846 	bl	80021cc <RCC_GetPCLK1ClockFreq>
 8002140:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002142:	e004      	b.n	800214e <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8002144:	bf00      	nop
 8002146:	e002      	b.n	800214e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800214c:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	007a1200 	.word	0x007a1200

0800215c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002166:	f7ff ff1b 	bl	8001fa0 <LL_RCC_GetSysClkSource>
 800216a:	4603      	mov	r3, r0
 800216c:	2b04      	cmp	r3, #4
 800216e:	d006      	beq.n	800217e <RCC_GetSystemClockFreq+0x22>
 8002170:	2b08      	cmp	r3, #8
 8002172:	d007      	beq.n	8002184 <RCC_GetSystemClockFreq+0x28>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <RCC_GetSystemClockFreq+0x40>)
 800217a:	607b      	str	r3, [r7, #4]
      break;
 800217c:	e009      	b.n	8002192 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <RCC_GetSystemClockFreq+0x40>)
 8002180:	607b      	str	r3, [r7, #4]
      break;
 8002182:	e006      	b.n	8002192 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002184:	f000 f84a 	bl	800221c <RCC_PLL_GetFreqDomain_SYS>
 8002188:	6078      	str	r0, [r7, #4]
      break;
 800218a:	e002      	b.n	8002192 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <RCC_GetSystemClockFreq+0x40>)
 800218e:	607b      	str	r3, [r7, #4]
      break;
 8002190:	bf00      	nop
  }

  return frequency;
 8002192:	687b      	ldr	r3, [r7, #4]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	007a1200 	.word	0x007a1200

080021a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80021a8:	f7ff ff08 	bl	8001fbc <LL_RCC_GetAHBPrescaler>
 80021ac:	4603      	mov	r3, r0
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <RCC_GetHCLKClockFreq+0x28>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	40d3      	lsrs	r3, r2
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	08003188 	.word	0x08003188

080021cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80021d4:	f7ff ff00 	bl	8001fd8 <LL_RCC_GetAPB1Prescaler>
 80021d8:	4603      	mov	r3, r0
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	40d3      	lsrs	r3, r2
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	08003198 	.word	0x08003198

080021f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80021fc:	f7ff fefa 	bl	8001ff4 <LL_RCC_GetAPB2Prescaler>
 8002200:	4603      	mov	r3, r0
 8002202:	0adb      	lsrs	r3, r3, #11
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <RCC_GetPCLK2ClockFreq+0x24>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	40d3      	lsrs	r3, r2
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	08003198 	.word	0x08003198

0800221c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800222a:	f7ff ff07 	bl	800203c <LL_RCC_PLL_GetMainSource>
 800222e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d003      	beq.n	8002244 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800223c:	e005      	b.n	800224a <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002240:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002242:	e005      	b.n	8002250 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002246:	60fb      	str	r3, [r7, #12]
      break;
 8002248:	e002      	b.n	8002250 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800224c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800224e:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002250:	f7ff ff10 	bl	8002074 <LL_RCC_PLL_GetPrediv>
 8002254:	4603      	mov	r3, r0
 8002256:	3301      	adds	r3, #1
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	fbb2 f4f3 	udiv	r4, r2, r3
 800225e:	f7ff fefb 	bl	8002058 <LL_RCC_PLL_GetMultiplicator>
 8002262:	4603      	mov	r3, r0
 8002264:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002268:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800226c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	fa92 f2a2 	rbit	r2, r2
 8002274:	603a      	str	r2, [r7, #0]
  return result;
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	40d3      	lsrs	r3, r2
 8002280:	3302      	adds	r3, #2
 8002282:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bd90      	pop	{r4, r7, pc}
 800228e:	bf00      	nop
 8002290:	003d0900 	.word	0x003d0900
 8002294:	007a1200 	.word	0x007a1200

08002298 <LL_TIM_SetPrescaler>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_TIM_SetAutoReload>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_TIM_SetRepetitionCounter>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	615a      	str	r2, [r3, #20]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a2f      	ldr	r2, [pc, #188]	; (80023dc <LL_TIM_Init+0xd0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <LL_TIM_Init+0x28>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d003      	beq.n	8002334 <LL_TIM_Init+0x28>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a2c      	ldr	r2, [pc, #176]	; (80023e0 <LL_TIM_Init+0xd4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d106      	bne.n	8002342 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a25      	ldr	r2, [pc, #148]	; (80023dc <LL_TIM_Init+0xd0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <LL_TIM_Init+0x66>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d00f      	beq.n	8002372 <LL_TIM_Init+0x66>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <LL_TIM_Init+0xd4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00b      	beq.n	8002372 <LL_TIM_Init+0x66>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a21      	ldr	r2, [pc, #132]	; (80023e4 <LL_TIM_Init+0xd8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <LL_TIM_Init+0x66>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <LL_TIM_Init+0xdc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d003      	beq.n	8002372 <LL_TIM_Init+0x66>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <LL_TIM_Init+0xe0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d106      	bne.n	8002380 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff91 	bl	80022b4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff7d 	bl	8002298 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <LL_TIM_Init+0xd0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00b      	beq.n	80023be <LL_TIM_Init+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <LL_TIM_Init+0xd8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <LL_TIM_Init+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <LL_TIM_Init+0xdc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <LL_TIM_Init+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <LL_TIM_Init+0xe0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d105      	bne.n	80023ca <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7c1b      	ldrb	r3, [r3, #16]
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff83 	bl	80022d0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff8e 	bl	80022ec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40014000 	.word	0x40014000
 80023e8:	40014400 	.word	0x40014400
 80023ec:	40014800 	.word	0x40014800

080023f0 <LL_USART_IsEnabled>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <LL_USART_IsEnabled+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_USART_IsEnabled+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_USART_SetStopBitsLength>:
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	605a      	str	r2, [r3, #4]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_USART_SetHWFlowCtrl>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	609a      	str	r2, [r3, #8]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_USART_SetBaudRate>:
{
 8002462:	b490      	push	{r4, r7}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002476:	d116      	bne.n	80024a6 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	005a      	lsls	r2, r3, #1
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	441a      	add	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	b29b      	uxth	r3, r3
 800248a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8002492:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60dc      	str	r4, [r3, #12]
}
 80024a4:	e00a      	b.n	80024bc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	085a      	lsrs	r2, r3, #1
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	441a      	add	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	60da      	str	r2, [r3, #12]
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc90      	pop	{r4, r7}
 80024c4:	4770      	bx	lr
	...

080024c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff88 	bl	80023f0 <LL_USART_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d14e      	bne.n	8002584 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <LL_USART_Init+0xc8>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6851      	ldr	r1, [r2, #4]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	68d2      	ldr	r2, [r2, #12]
 80024f6:	4311      	orrs	r1, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	6912      	ldr	r2, [r2, #16]
 80024fc:	4311      	orrs	r1, r2
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	6992      	ldr	r2, [r2, #24]
 8002502:	430a      	orrs	r2, r1
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff80 	bl	8002416 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff8d 	bl	800243c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <LL_USART_Init+0xcc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d104      	bne.n	8002534 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff fdd6 	bl	80020dc <LL_RCC_GetUSARTClockFreq>
 8002530:	61b8      	str	r0, [r7, #24]
 8002532:	e016      	b.n	8002562 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <LL_USART_Init+0xd0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d107      	bne.n	800254c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fda5 	bl	8002090 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e00a      	b.n	8002562 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <LL_USART_Init+0xd4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d106      	bne.n	8002562 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd99 	bl	8002090 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002570:	2300      	movs	r3, #0
 8002572:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69b9      	ldr	r1, [r7, #24]
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff6f 	bl	8002462 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002584:	7ffb      	ldrb	r3, [r7, #31]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	efff69f3 	.word	0xefff69f3
 8002594:	40013800 	.word	0x40013800
 8002598:	40004400 	.word	0x40004400
 800259c:	40004800 	.word	0x40004800

080025a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <LL_InitTick+0x30>)
 80025b4:	3b01      	subs	r3, #1
 80025b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <LL_InitTick+0x30>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <LL_InitTick+0x30>)
 80025c0:	2205      	movs	r2, #5
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80025dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ffdd 	bl	80025a0 <LL_InitTick>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <LL_SetSystemCoreClock+0x1c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000

08002610 <cosf>:
 8002610:	ee10 3a10 	vmov	r3, s0
 8002614:	b507      	push	{r0, r1, r2, lr}
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <cosf+0x78>)
 8002618:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800261c:	4293      	cmp	r3, r2
 800261e:	dc04      	bgt.n	800262a <cosf+0x1a>
 8002620:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800268c <cosf+0x7c>
 8002624:	f000 f9e4 	bl	80029f0 <__kernel_cosf>
 8002628:	e004      	b.n	8002634 <cosf+0x24>
 800262a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800262e:	db04      	blt.n	800263a <cosf+0x2a>
 8002630:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002634:	b003      	add	sp, #12
 8002636:	f85d fb04 	ldr.w	pc, [sp], #4
 800263a:	4668      	mov	r0, sp
 800263c:	f000 f8ac 	bl	8002798 <__ieee754_rem_pio2f>
 8002640:	f000 0003 	and.w	r0, r0, #3
 8002644:	2801      	cmp	r0, #1
 8002646:	d007      	beq.n	8002658 <cosf+0x48>
 8002648:	2802      	cmp	r0, #2
 800264a:	d00e      	beq.n	800266a <cosf+0x5a>
 800264c:	b9a0      	cbnz	r0, 8002678 <cosf+0x68>
 800264e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002652:	ed9d 0a00 	vldr	s0, [sp]
 8002656:	e7e5      	b.n	8002624 <cosf+0x14>
 8002658:	eddd 0a01 	vldr	s1, [sp, #4]
 800265c:	ed9d 0a00 	vldr	s0, [sp]
 8002660:	f000 fca6 	bl	8002fb0 <__kernel_sinf>
 8002664:	eeb1 0a40 	vneg.f32	s0, s0
 8002668:	e7e4      	b.n	8002634 <cosf+0x24>
 800266a:	eddd 0a01 	vldr	s1, [sp, #4]
 800266e:	ed9d 0a00 	vldr	s0, [sp]
 8002672:	f000 f9bd 	bl	80029f0 <__kernel_cosf>
 8002676:	e7f5      	b.n	8002664 <cosf+0x54>
 8002678:	2001      	movs	r0, #1
 800267a:	eddd 0a01 	vldr	s1, [sp, #4]
 800267e:	ed9d 0a00 	vldr	s0, [sp]
 8002682:	f000 fc95 	bl	8002fb0 <__kernel_sinf>
 8002686:	e7d5      	b.n	8002634 <cosf+0x24>
 8002688:	3f490fd8 	.word	0x3f490fd8
 800268c:	00000000 	.word	0x00000000

08002690 <floorf>:
 8002690:	ee10 3a10 	vmov	r3, s0
 8002694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002698:	0dca      	lsrs	r2, r1, #23
 800269a:	3a7f      	subs	r2, #127	; 0x7f
 800269c:	2a16      	cmp	r2, #22
 800269e:	dc2a      	bgt.n	80026f6 <floorf+0x66>
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	da11      	bge.n	80026c8 <floorf+0x38>
 80026a4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8002708 <floorf+0x78>
 80026a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80026ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	dd05      	ble.n	80026c2 <floorf+0x32>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da23      	bge.n	8002702 <floorf+0x72>
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <floorf+0x7c>)
 80026bc:	2900      	cmp	r1, #0
 80026be:	bf18      	it	ne
 80026c0:	4613      	movne	r3, r2
 80026c2:	ee00 3a10 	vmov	s0, r3
 80026c6:	4770      	bx	lr
 80026c8:	4911      	ldr	r1, [pc, #68]	; (8002710 <floorf+0x80>)
 80026ca:	4111      	asrs	r1, r2
 80026cc:	420b      	tst	r3, r1
 80026ce:	d0fa      	beq.n	80026c6 <floorf+0x36>
 80026d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002708 <floorf+0x78>
 80026d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80026d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	ddef      	ble.n	80026c2 <floorf+0x32>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfbe      	ittt	lt
 80026e6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80026ea:	fa40 f202 	asrlt.w	r2, r0, r2
 80026ee:	189b      	addlt	r3, r3, r2
 80026f0:	ea23 0301 	bic.w	r3, r3, r1
 80026f4:	e7e5      	b.n	80026c2 <floorf+0x32>
 80026f6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80026fa:	d3e4      	bcc.n	80026c6 <floorf+0x36>
 80026fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002700:	4770      	bx	lr
 8002702:	2300      	movs	r3, #0
 8002704:	e7dd      	b.n	80026c2 <floorf+0x32>
 8002706:	bf00      	nop
 8002708:	7149f2ca 	.word	0x7149f2ca
 800270c:	bf800000 	.word	0xbf800000
 8002710:	007fffff 	.word	0x007fffff

08002714 <sinf>:
 8002714:	ee10 3a10 	vmov	r3, s0
 8002718:	b507      	push	{r0, r1, r2, lr}
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <sinf+0x7c>)
 800271c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002720:	4293      	cmp	r3, r2
 8002722:	dc05      	bgt.n	8002730 <sinf+0x1c>
 8002724:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002794 <sinf+0x80>
 8002728:	2000      	movs	r0, #0
 800272a:	f000 fc41 	bl	8002fb0 <__kernel_sinf>
 800272e:	e004      	b.n	800273a <sinf+0x26>
 8002730:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002734:	db04      	blt.n	8002740 <sinf+0x2c>
 8002736:	ee30 0a40 	vsub.f32	s0, s0, s0
 800273a:	b003      	add	sp, #12
 800273c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002740:	4668      	mov	r0, sp
 8002742:	f000 f829 	bl	8002798 <__ieee754_rem_pio2f>
 8002746:	f000 0003 	and.w	r0, r0, #3
 800274a:	2801      	cmp	r0, #1
 800274c:	d008      	beq.n	8002760 <sinf+0x4c>
 800274e:	2802      	cmp	r0, #2
 8002750:	d00d      	beq.n	800276e <sinf+0x5a>
 8002752:	b9b0      	cbnz	r0, 8002782 <sinf+0x6e>
 8002754:	2001      	movs	r0, #1
 8002756:	eddd 0a01 	vldr	s1, [sp, #4]
 800275a:	ed9d 0a00 	vldr	s0, [sp]
 800275e:	e7e4      	b.n	800272a <sinf+0x16>
 8002760:	eddd 0a01 	vldr	s1, [sp, #4]
 8002764:	ed9d 0a00 	vldr	s0, [sp]
 8002768:	f000 f942 	bl	80029f0 <__kernel_cosf>
 800276c:	e7e5      	b.n	800273a <sinf+0x26>
 800276e:	2001      	movs	r0, #1
 8002770:	eddd 0a01 	vldr	s1, [sp, #4]
 8002774:	ed9d 0a00 	vldr	s0, [sp]
 8002778:	f000 fc1a 	bl	8002fb0 <__kernel_sinf>
 800277c:	eeb1 0a40 	vneg.f32	s0, s0
 8002780:	e7db      	b.n	800273a <sinf+0x26>
 8002782:	eddd 0a01 	vldr	s1, [sp, #4]
 8002786:	ed9d 0a00 	vldr	s0, [sp]
 800278a:	f000 f931 	bl	80029f0 <__kernel_cosf>
 800278e:	e7f5      	b.n	800277c <sinf+0x68>
 8002790:	3f490fd8 	.word	0x3f490fd8
 8002794:	00000000 	.word	0x00000000

08002798 <__ieee754_rem_pio2f>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	ee10 6a10 	vmov	r6, s0
 800279e:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <__ieee754_rem_pio2f+0x220>)
 80027a0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80027a4:	429c      	cmp	r4, r3
 80027a6:	b087      	sub	sp, #28
 80027a8:	4605      	mov	r5, r0
 80027aa:	dc05      	bgt.n	80027b8 <__ieee754_rem_pio2f+0x20>
 80027ac:	2300      	movs	r3, #0
 80027ae:	ed85 0a00 	vstr	s0, [r5]
 80027b2:	6043      	str	r3, [r0, #4]
 80027b4:	2000      	movs	r0, #0
 80027b6:	e020      	b.n	80027fa <__ieee754_rem_pio2f+0x62>
 80027b8:	4b80      	ldr	r3, [pc, #512]	; (80029bc <__ieee754_rem_pio2f+0x224>)
 80027ba:	429c      	cmp	r4, r3
 80027bc:	dc38      	bgt.n	8002830 <__ieee754_rem_pio2f+0x98>
 80027be:	2e00      	cmp	r6, #0
 80027c0:	f024 040f 	bic.w	r4, r4, #15
 80027c4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80029c0 <__ieee754_rem_pio2f+0x228>
 80027c8:	4b7e      	ldr	r3, [pc, #504]	; (80029c4 <__ieee754_rem_pio2f+0x22c>)
 80027ca:	dd18      	ble.n	80027fe <__ieee754_rem_pio2f+0x66>
 80027cc:	429c      	cmp	r4, r3
 80027ce:	ee70 7a47 	vsub.f32	s15, s0, s14
 80027d2:	bf09      	itett	eq
 80027d4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80029c8 <__ieee754_rem_pio2f+0x230>
 80027d8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80029cc <__ieee754_rem_pio2f+0x234>
 80027dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80027e0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80029d0 <__ieee754_rem_pio2f+0x238>
 80027e4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80027e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027ec:	edc0 6a00 	vstr	s13, [r0]
 80027f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80027f8:	2001      	movs	r0, #1
 80027fa:	b007      	add	sp, #28
 80027fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fe:	429c      	cmp	r4, r3
 8002800:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002804:	bf09      	itett	eq
 8002806:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80029c8 <__ieee754_rem_pio2f+0x230>
 800280a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80029cc <__ieee754_rem_pio2f+0x234>
 800280e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002812:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80029d0 <__ieee754_rem_pio2f+0x238>
 8002816:	ee77 6a87 	vadd.f32	s13, s15, s14
 800281a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281e:	edc0 6a00 	vstr	s13, [r0]
 8002822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002826:	edc0 7a01 	vstr	s15, [r0, #4]
 800282a:	f04f 30ff 	mov.w	r0, #4294967295
 800282e:	e7e4      	b.n	80027fa <__ieee754_rem_pio2f+0x62>
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <__ieee754_rem_pio2f+0x23c>)
 8002832:	429c      	cmp	r4, r3
 8002834:	dc71      	bgt.n	800291a <__ieee754_rem_pio2f+0x182>
 8002836:	f000 fc03 	bl	8003040 <fabsf>
 800283a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80029d8 <__ieee754_rem_pio2f+0x240>
 800283e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002842:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800284a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800284e:	ee17 0a90 	vmov	r0, s15
 8002852:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80029c0 <__ieee754_rem_pio2f+0x228>
 8002856:	eeb1 7a46 	vneg.f32	s14, s12
 800285a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800285e:	281f      	cmp	r0, #31
 8002860:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80029cc <__ieee754_rem_pio2f+0x234>
 8002864:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002868:	ee70 6a67 	vsub.f32	s13, s0, s15
 800286c:	ee16 3a90 	vmov	r3, s13
 8002870:	dc1c      	bgt.n	80028ac <__ieee754_rem_pio2f+0x114>
 8002872:	1e47      	subs	r7, r0, #1
 8002874:	4959      	ldr	r1, [pc, #356]	; (80029dc <__ieee754_rem_pio2f+0x244>)
 8002876:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800287a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800287e:	428a      	cmp	r2, r1
 8002880:	d014      	beq.n	80028ac <__ieee754_rem_pio2f+0x114>
 8002882:	602b      	str	r3, [r5, #0]
 8002884:	ed95 7a00 	vldr	s14, [r5]
 8002888:	ee30 0a47 	vsub.f32	s0, s0, s14
 800288c:	2e00      	cmp	r6, #0
 800288e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002892:	ed85 0a01 	vstr	s0, [r5, #4]
 8002896:	dab0      	bge.n	80027fa <__ieee754_rem_pio2f+0x62>
 8002898:	eeb1 7a47 	vneg.f32	s14, s14
 800289c:	eeb1 0a40 	vneg.f32	s0, s0
 80028a0:	ed85 7a00 	vstr	s14, [r5]
 80028a4:	ed85 0a01 	vstr	s0, [r5, #4]
 80028a8:	4240      	negs	r0, r0
 80028aa:	e7a6      	b.n	80027fa <__ieee754_rem_pio2f+0x62>
 80028ac:	15e4      	asrs	r4, r4, #23
 80028ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80028b2:	1aa2      	subs	r2, r4, r2
 80028b4:	2a08      	cmp	r2, #8
 80028b6:	dde4      	ble.n	8002882 <__ieee754_rem_pio2f+0xea>
 80028b8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80029c8 <__ieee754_rem_pio2f+0x230>
 80028bc:	eef0 6a40 	vmov.f32	s13, s0
 80028c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80028c4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80028c8:	eea7 0a27 	vfma.f32	s0, s14, s15
 80028cc:	eddf 7a40 	vldr	s15, [pc, #256]	; 80029d0 <__ieee754_rem_pio2f+0x238>
 80028d0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80028d4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80028d8:	eef0 7a40 	vmov.f32	s15, s0
 80028dc:	ee15 3a90 	vmov	r3, s11
 80028e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80028e4:	1aa4      	subs	r4, r4, r2
 80028e6:	2c19      	cmp	r4, #25
 80028e8:	dc04      	bgt.n	80028f4 <__ieee754_rem_pio2f+0x15c>
 80028ea:	edc5 5a00 	vstr	s11, [r5]
 80028ee:	eeb0 0a66 	vmov.f32	s0, s13
 80028f2:	e7c7      	b.n	8002884 <__ieee754_rem_pio2f+0xec>
 80028f4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80029e0 <__ieee754_rem_pio2f+0x248>
 80028f8:	eeb0 0a66 	vmov.f32	s0, s13
 80028fc:	eea7 0a25 	vfma.f32	s0, s14, s11
 8002900:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002904:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002908:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80029e4 <__ieee754_rem_pio2f+0x24c>
 800290c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8002910:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002914:	ed85 7a00 	vstr	s14, [r5]
 8002918:	e7b4      	b.n	8002884 <__ieee754_rem_pio2f+0xec>
 800291a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800291e:	db06      	blt.n	800292e <__ieee754_rem_pio2f+0x196>
 8002920:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002924:	edc0 7a01 	vstr	s15, [r0, #4]
 8002928:	edc0 7a00 	vstr	s15, [r0]
 800292c:	e742      	b.n	80027b4 <__ieee754_rem_pio2f+0x1c>
 800292e:	15e2      	asrs	r2, r4, #23
 8002930:	3a86      	subs	r2, #134	; 0x86
 8002932:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800293e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80029e8 <__ieee754_rem_pio2f+0x250>
 8002942:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800294e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002952:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002956:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800295a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800295e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002962:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002966:	eef5 7a40 	vcmp.f32	s15, #0.0
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	edcd 7a05 	vstr	s15, [sp, #20]
 8002972:	d11e      	bne.n	80029b2 <__ieee754_rem_pio2f+0x21a>
 8002974:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2302      	movne	r3, #2
 8002982:	491a      	ldr	r1, [pc, #104]	; (80029ec <__ieee754_rem_pio2f+0x254>)
 8002984:	9101      	str	r1, [sp, #4]
 8002986:	2102      	movs	r1, #2
 8002988:	9100      	str	r1, [sp, #0]
 800298a:	a803      	add	r0, sp, #12
 800298c:	4629      	mov	r1, r5
 800298e:	f000 f88d 	bl	8002aac <__kernel_rem_pio2f>
 8002992:	2e00      	cmp	r6, #0
 8002994:	f6bf af31 	bge.w	80027fa <__ieee754_rem_pio2f+0x62>
 8002998:	edd5 7a00 	vldr	s15, [r5]
 800299c:	eef1 7a67 	vneg.f32	s15, s15
 80029a0:	edc5 7a00 	vstr	s15, [r5]
 80029a4:	edd5 7a01 	vldr	s15, [r5, #4]
 80029a8:	eef1 7a67 	vneg.f32	s15, s15
 80029ac:	edc5 7a01 	vstr	s15, [r5, #4]
 80029b0:	e77a      	b.n	80028a8 <__ieee754_rem_pio2f+0x110>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e7e5      	b.n	8002982 <__ieee754_rem_pio2f+0x1ea>
 80029b6:	bf00      	nop
 80029b8:	3f490fd8 	.word	0x3f490fd8
 80029bc:	4016cbe3 	.word	0x4016cbe3
 80029c0:	3fc90f80 	.word	0x3fc90f80
 80029c4:	3fc90fd0 	.word	0x3fc90fd0
 80029c8:	37354400 	.word	0x37354400
 80029cc:	37354443 	.word	0x37354443
 80029d0:	2e85a308 	.word	0x2e85a308
 80029d4:	43490f80 	.word	0x43490f80
 80029d8:	3f22f984 	.word	0x3f22f984
 80029dc:	080031a0 	.word	0x080031a0
 80029e0:	2e85a300 	.word	0x2e85a300
 80029e4:	248d3132 	.word	0x248d3132
 80029e8:	43800000 	.word	0x43800000
 80029ec:	08003220 	.word	0x08003220

080029f0 <__kernel_cosf>:
 80029f0:	ee10 3a10 	vmov	r3, s0
 80029f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80029fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a00:	da05      	bge.n	8002a0e <__kernel_cosf+0x1e>
 8002a02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002a06:	ee17 2a90 	vmov	r2, s15
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d03b      	beq.n	8002a86 <__kernel_cosf+0x96>
 8002a0e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8002a12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a8c <__kernel_cosf+0x9c>
 8002a1a:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <__kernel_cosf+0xa0>)
 8002a1c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8002a20:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a94 <__kernel_cosf+0xa4>
 8002a24:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8002a98 <__kernel_cosf+0xa8>
 8002a2e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002a32:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002a9c <__kernel_cosf+0xac>
 8002a36:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002a3a:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002aa0 <__kernel_cosf+0xb0>
 8002a3e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002a42:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002aa4 <__kernel_cosf+0xb4>
 8002a46:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002a4a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002a4e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002a52:	eee6 0a07 	vfma.f32	s1, s12, s14
 8002a56:	dc04      	bgt.n	8002a62 <__kernel_cosf+0x72>
 8002a58:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8002a5c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002a60:	4770      	bx	lr
 8002a62:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <__kernel_cosf+0xb8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bfda      	itte	le
 8002a68:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002a6c:	ee07 3a10 	vmovle	s14, r3
 8002a70:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8002a74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a78:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8002a7c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002a80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002a84:	4770      	bx	lr
 8002a86:	eeb0 0a66 	vmov.f32	s0, s13
 8002a8a:	4770      	bx	lr
 8002a8c:	ad47d74e 	.word	0xad47d74e
 8002a90:	3e999999 	.word	0x3e999999
 8002a94:	310f74f6 	.word	0x310f74f6
 8002a98:	b493f27c 	.word	0xb493f27c
 8002a9c:	37d00d01 	.word	0x37d00d01
 8002aa0:	bab60b61 	.word	0xbab60b61
 8002aa4:	3d2aaaab 	.word	0x3d2aaaab
 8002aa8:	3f480000 	.word	0x3f480000

08002aac <__kernel_rem_pio2f>:
 8002aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab0:	ed2d 8b04 	vpush	{d8-d9}
 8002ab4:	b0d7      	sub	sp, #348	; 0x15c
 8002ab6:	469b      	mov	fp, r3
 8002ab8:	460e      	mov	r6, r1
 8002aba:	4bbe      	ldr	r3, [pc, #760]	; (8002db4 <__kernel_rem_pio2f+0x308>)
 8002abc:	9964      	ldr	r1, [sp, #400]	; 0x190
 8002abe:	9002      	str	r0, [sp, #8]
 8002ac0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8002ac4:	9865      	ldr	r0, [sp, #404]	; 0x194
 8002ac6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002aca:	1ed1      	subs	r1, r2, #3
 8002acc:	2308      	movs	r3, #8
 8002ace:	fb91 f1f3 	sdiv	r1, r1, r3
 8002ad2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002ad6:	f10b 3aff 	add.w	sl, fp, #4294967295
 8002ada:	1c4c      	adds	r4, r1, #1
 8002adc:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8002ae0:	eba1 050a 	sub.w	r5, r1, sl
 8002ae4:	aa1a      	add	r2, sp, #104	; 0x68
 8002ae6:	eb09 070a 	add.w	r7, r9, sl
 8002aea:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8002aee:	4696      	mov	lr, r2
 8002af0:	2300      	movs	r3, #0
 8002af2:	42bb      	cmp	r3, r7
 8002af4:	dd0f      	ble.n	8002b16 <__kernel_rem_pio2f+0x6a>
 8002af6:	af42      	add	r7, sp, #264	; 0x108
 8002af8:	2200      	movs	r2, #0
 8002afa:	454a      	cmp	r2, r9
 8002afc:	dc27      	bgt.n	8002b4e <__kernel_rem_pio2f+0xa2>
 8002afe:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8002b02:	eb0b 0302 	add.w	r3, fp, r2
 8002b06:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8002b0a:	9d02      	ldr	r5, [sp, #8]
 8002b0c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002b10:	f04f 0c00 	mov.w	ip, #0
 8002b14:	e015      	b.n	8002b42 <__kernel_rem_pio2f+0x96>
 8002b16:	42dd      	cmn	r5, r3
 8002b18:	bf5d      	ittte	pl
 8002b1a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8002b1e:	ee07 2a90 	vmovpl	s15, r2
 8002b22:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8002b26:	eef0 7a47 	vmovmi.f32	s15, s14
 8002b2a:	ecee 7a01 	vstmia	lr!, {s15}
 8002b2e:	3301      	adds	r3, #1
 8002b30:	e7df      	b.n	8002af2 <__kernel_rem_pio2f+0x46>
 8002b32:	ecf5 6a01 	vldmia	r5!, {s13}
 8002b36:	ed33 7a01 	vldmdb	r3!, {s14}
 8002b3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002b3e:	f10c 0c01 	add.w	ip, ip, #1
 8002b42:	45d4      	cmp	ip, sl
 8002b44:	ddf5      	ble.n	8002b32 <__kernel_rem_pio2f+0x86>
 8002b46:	ece7 7a01 	vstmia	r7!, {s15}
 8002b4a:	3201      	adds	r2, #1
 8002b4c:	e7d5      	b.n	8002afa <__kernel_rem_pio2f+0x4e>
 8002b4e:	ab06      	add	r3, sp, #24
 8002b50:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8002b54:	9304      	str	r3, [sp, #16]
 8002b56:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8002dc0 <__kernel_rem_pio2f+0x314>
 8002b5a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8002dbc <__kernel_rem_pio2f+0x310>
 8002b5e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002b62:	9303      	str	r3, [sp, #12]
 8002b64:	464d      	mov	r5, r9
 8002b66:	ab56      	add	r3, sp, #344	; 0x158
 8002b68:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8002b6c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002b70:	3f01      	subs	r7, #1
 8002b72:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002b76:	00bf      	lsls	r7, r7, #2
 8002b78:	ab56      	add	r3, sp, #344	; 0x158
 8002b7a:	19da      	adds	r2, r3, r7
 8002b7c:	3a4c      	subs	r2, #76	; 0x4c
 8002b7e:	2300      	movs	r3, #0
 8002b80:	1ae9      	subs	r1, r5, r3
 8002b82:	2900      	cmp	r1, #0
 8002b84:	dc4c      	bgt.n	8002c20 <__kernel_rem_pio2f+0x174>
 8002b86:	4620      	mov	r0, r4
 8002b88:	f000 fa62 	bl	8003050 <scalbnf>
 8002b8c:	eeb0 8a40 	vmov.f32	s16, s0
 8002b90:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8002b94:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002b98:	f7ff fd7a 	bl	8002690 <floorf>
 8002b9c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002ba0:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002ba4:	2c00      	cmp	r4, #0
 8002ba6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002baa:	edcd 7a01 	vstr	s15, [sp, #4]
 8002bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002bb6:	dd48      	ble.n	8002c4a <__kernel_rem_pio2f+0x19e>
 8002bb8:	1e69      	subs	r1, r5, #1
 8002bba:	ab06      	add	r3, sp, #24
 8002bbc:	f1c4 0008 	rsb	r0, r4, #8
 8002bc0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8002bc4:	9a01      	ldr	r2, [sp, #4]
 8002bc6:	fa4c f300 	asr.w	r3, ip, r0
 8002bca:	441a      	add	r2, r3
 8002bcc:	4083      	lsls	r3, r0
 8002bce:	9201      	str	r2, [sp, #4]
 8002bd0:	ebac 0203 	sub.w	r2, ip, r3
 8002bd4:	ab06      	add	r3, sp, #24
 8002bd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002bda:	f1c4 0307 	rsb	r3, r4, #7
 8002bde:	fa42 f803 	asr.w	r8, r2, r3
 8002be2:	f1b8 0f00 	cmp.w	r8, #0
 8002be6:	dd41      	ble.n	8002c6c <__kernel_rem_pio2f+0x1c0>
 8002be8:	9b01      	ldr	r3, [sp, #4]
 8002bea:	2000      	movs	r0, #0
 8002bec:	3301      	adds	r3, #1
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	4601      	mov	r1, r0
 8002bf2:	4285      	cmp	r5, r0
 8002bf4:	dc6d      	bgt.n	8002cd2 <__kernel_rem_pio2f+0x226>
 8002bf6:	2c00      	cmp	r4, #0
 8002bf8:	dd04      	ble.n	8002c04 <__kernel_rem_pio2f+0x158>
 8002bfa:	2c01      	cmp	r4, #1
 8002bfc:	d07e      	beq.n	8002cfc <__kernel_rem_pio2f+0x250>
 8002bfe:	2c02      	cmp	r4, #2
 8002c00:	f000 8086 	beq.w	8002d10 <__kernel_rem_pio2f+0x264>
 8002c04:	f1b8 0f02 	cmp.w	r8, #2
 8002c08:	d130      	bne.n	8002c6c <__kernel_rem_pio2f+0x1c0>
 8002c0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c0e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002c12:	b359      	cbz	r1, 8002c6c <__kernel_rem_pio2f+0x1c0>
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 fa1b 	bl	8003050 <scalbnf>
 8002c1a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002c1e:	e025      	b.n	8002c6c <__kernel_rem_pio2f+0x1c0>
 8002c20:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002c24:	a806      	add	r0, sp, #24
 8002c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c2e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002c32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c36:	ee10 1a10 	vmov	r1, s0
 8002c3a:	ed32 0a01 	vldmdb	r2!, {s0}
 8002c3e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8002c42:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002c46:	3301      	adds	r3, #1
 8002c48:	e79a      	b.n	8002b80 <__kernel_rem_pio2f+0xd4>
 8002c4a:	d106      	bne.n	8002c5a <__kernel_rem_pio2f+0x1ae>
 8002c4c:	1e6b      	subs	r3, r5, #1
 8002c4e:	aa06      	add	r2, sp, #24
 8002c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c54:	ea4f 2822 	mov.w	r8, r2, asr #8
 8002c58:	e7c3      	b.n	8002be2 <__kernel_rem_pio2f+0x136>
 8002c5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	da31      	bge.n	8002ccc <__kernel_rem_pio2f+0x220>
 8002c68:	f04f 0800 	mov.w	r8, #0
 8002c6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	f040 80a8 	bne.w	8002dc8 <__kernel_rem_pio2f+0x31c>
 8002c78:	1e6b      	subs	r3, r5, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4548      	cmp	r0, r9
 8002c80:	da4d      	bge.n	8002d1e <__kernel_rem_pio2f+0x272>
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	f000 8087 	beq.w	8002d96 <__kernel_rem_pio2f+0x2ea>
 8002c88:	aa06      	add	r2, sp, #24
 8002c8a:	3c08      	subs	r4, #8
 8002c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c90:	2900      	cmp	r1, #0
 8002c92:	f000 808d 	beq.w	8002db0 <__kernel_rem_pio2f+0x304>
 8002c96:	4620      	mov	r0, r4
 8002c98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c9c:	9302      	str	r3, [sp, #8]
 8002c9e:	f000 f9d7 	bl	8003050 <scalbnf>
 8002ca2:	9b02      	ldr	r3, [sp, #8]
 8002ca4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002dc0 <__kernel_rem_pio2f+0x314>
 8002ca8:	0099      	lsls	r1, r3, #2
 8002caa:	aa42      	add	r2, sp, #264	; 0x108
 8002cac:	1850      	adds	r0, r2, r1
 8002cae:	1d05      	adds	r5, r0, #4
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	2c00      	cmp	r4, #0
 8002cb4:	f280 80b8 	bge.w	8002e28 <__kernel_rem_pio2f+0x37c>
 8002cb8:	2500      	movs	r5, #0
 8002cba:	1b5c      	subs	r4, r3, r5
 8002cbc:	2c00      	cmp	r4, #0
 8002cbe:	f2c0 80d8 	blt.w	8002e72 <__kernel_rem_pio2f+0x3c6>
 8002cc2:	4f3d      	ldr	r7, [pc, #244]	; (8002db8 <__kernel_rem_pio2f+0x30c>)
 8002cc4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002cc8:	2400      	movs	r4, #0
 8002cca:	e0c6      	b.n	8002e5a <__kernel_rem_pio2f+0x3ae>
 8002ccc:	f04f 0802 	mov.w	r8, #2
 8002cd0:	e78a      	b.n	8002be8 <__kernel_rem_pio2f+0x13c>
 8002cd2:	ab06      	add	r3, sp, #24
 8002cd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002cd8:	b949      	cbnz	r1, 8002cee <__kernel_rem_pio2f+0x242>
 8002cda:	b12b      	cbz	r3, 8002ce8 <__kernel_rem_pio2f+0x23c>
 8002cdc:	aa06      	add	r2, sp, #24
 8002cde:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ce2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	3001      	adds	r0, #1
 8002cea:	4619      	mov	r1, r3
 8002cec:	e781      	b.n	8002bf2 <__kernel_rem_pio2f+0x146>
 8002cee:	aa06      	add	r2, sp, #24
 8002cf0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002cf4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	e7f5      	b.n	8002ce8 <__kernel_rem_pio2f+0x23c>
 8002cfc:	1e68      	subs	r0, r5, #1
 8002cfe:	ab06      	add	r3, sp, #24
 8002d00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d08:	aa06      	add	r2, sp, #24
 8002d0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002d0e:	e779      	b.n	8002c04 <__kernel_rem_pio2f+0x158>
 8002d10:	1e68      	subs	r0, r5, #1
 8002d12:	ab06      	add	r3, sp, #24
 8002d14:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	e7f4      	b.n	8002d08 <__kernel_rem_pio2f+0x25c>
 8002d1e:	a906      	add	r1, sp, #24
 8002d20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002d24:	3801      	subs	r0, #1
 8002d26:	430a      	orrs	r2, r1
 8002d28:	e7a9      	b.n	8002c7e <__kernel_rem_pio2f+0x1d2>
 8002d2a:	f10c 0c01 	add.w	ip, ip, #1
 8002d2e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	d0f9      	beq.n	8002d2a <__kernel_rem_pio2f+0x27e>
 8002d36:	eb0b 0305 	add.w	r3, fp, r5
 8002d3a:	aa1a      	add	r2, sp, #104	; 0x68
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	1898      	adds	r0, r3, r2
 8002d40:	3004      	adds	r0, #4
 8002d42:	1c69      	adds	r1, r5, #1
 8002d44:	3704      	adds	r7, #4
 8002d46:	2200      	movs	r2, #0
 8002d48:	4465      	add	r5, ip
 8002d4a:	9005      	str	r0, [sp, #20]
 8002d4c:	428d      	cmp	r5, r1
 8002d4e:	f6ff af0a 	blt.w	8002b66 <__kernel_rem_pio2f+0xba>
 8002d52:	a81a      	add	r0, sp, #104	; 0x68
 8002d54:	eb02 0c03 	add.w	ip, r2, r3
 8002d58:	4484      	add	ip, r0
 8002d5a:	9803      	ldr	r0, [sp, #12]
 8002d5c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8002d60:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8002d64:	9001      	str	r0, [sp, #4]
 8002d66:	ee07 0a90 	vmov	s15, r0
 8002d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d6e:	9805      	ldr	r0, [sp, #20]
 8002d70:	edcc 7a00 	vstr	s15, [ip]
 8002d74:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002d78:	eb00 0802 	add.w	r8, r0, r2
 8002d7c:	f04f 0c00 	mov.w	ip, #0
 8002d80:	45d4      	cmp	ip, sl
 8002d82:	dd0c      	ble.n	8002d9e <__kernel_rem_pio2f+0x2f2>
 8002d84:	eb02 0c07 	add.w	ip, r2, r7
 8002d88:	a842      	add	r0, sp, #264	; 0x108
 8002d8a:	4484      	add	ip, r0
 8002d8c:	edcc 7a01 	vstr	s15, [ip, #4]
 8002d90:	3101      	adds	r1, #1
 8002d92:	3204      	adds	r2, #4
 8002d94:	e7da      	b.n	8002d4c <__kernel_rem_pio2f+0x2a0>
 8002d96:	9b04      	ldr	r3, [sp, #16]
 8002d98:	f04f 0c01 	mov.w	ip, #1
 8002d9c:	e7c7      	b.n	8002d2e <__kernel_rem_pio2f+0x282>
 8002d9e:	ecfe 6a01 	vldmia	lr!, {s13}
 8002da2:	ed38 7a01 	vldmdb	r8!, {s14}
 8002da6:	f10c 0c01 	add.w	ip, ip, #1
 8002daa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002dae:	e7e7      	b.n	8002d80 <__kernel_rem_pio2f+0x2d4>
 8002db0:	3b01      	subs	r3, #1
 8002db2:	e769      	b.n	8002c88 <__kernel_rem_pio2f+0x1dc>
 8002db4:	08003564 	.word	0x08003564
 8002db8:	08003538 	.word	0x08003538
 8002dbc:	43800000 	.word	0x43800000
 8002dc0:	3b800000 	.word	0x3b800000
 8002dc4:	00000000 	.word	0x00000000
 8002dc8:	4260      	negs	r0, r4
 8002dca:	eeb0 0a48 	vmov.f32	s0, s16
 8002dce:	f000 f93f 	bl	8003050 <scalbnf>
 8002dd2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8002dbc <__kernel_rem_pio2f+0x310>
 8002dd6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	db1a      	blt.n	8002e16 <__kernel_rem_pio2f+0x36a>
 8002de0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8002dc0 <__kernel_rem_pio2f+0x314>
 8002de4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002de8:	aa06      	add	r2, sp, #24
 8002dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dee:	a906      	add	r1, sp, #24
 8002df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df4:	3408      	adds	r4, #8
 8002df6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002e02:	ee10 3a10 	vmov	r3, s0
 8002e06:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002e0a:	1c6b      	adds	r3, r5, #1
 8002e0c:	ee17 2a90 	vmov	r2, s15
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002e14:	e73f      	b.n	8002c96 <__kernel_rem_pio2f+0x1ea>
 8002e16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002e1a:	aa06      	add	r2, sp, #24
 8002e1c:	ee10 3a10 	vmov	r3, s0
 8002e20:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002e24:	462b      	mov	r3, r5
 8002e26:	e736      	b.n	8002c96 <__kernel_rem_pio2f+0x1ea>
 8002e28:	aa06      	add	r2, sp, #24
 8002e2a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002e2e:	9202      	str	r2, [sp, #8]
 8002e30:	ee07 2a90 	vmov	s15, r2
 8002e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e38:	3c01      	subs	r4, #1
 8002e3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002e3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002e42:	ed65 7a01 	vstmdb	r5!, {s15}
 8002e46:	e734      	b.n	8002cb2 <__kernel_rem_pio2f+0x206>
 8002e48:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8002e4c:	ecf7 6a01 	vldmia	r7!, {s13}
 8002e50:	ed9c 7a00 	vldr	s14, [ip]
 8002e54:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002e58:	3401      	adds	r4, #1
 8002e5a:	454c      	cmp	r4, r9
 8002e5c:	dc01      	bgt.n	8002e62 <__kernel_rem_pio2f+0x3b6>
 8002e5e:	42a5      	cmp	r5, r4
 8002e60:	daf2      	bge.n	8002e48 <__kernel_rem_pio2f+0x39c>
 8002e62:	aa56      	add	r2, sp, #344	; 0x158
 8002e64:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8002e68:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8002e6c:	3501      	adds	r5, #1
 8002e6e:	3804      	subs	r0, #4
 8002e70:	e723      	b.n	8002cba <__kernel_rem_pio2f+0x20e>
 8002e72:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002e74:	2a03      	cmp	r2, #3
 8002e76:	d84d      	bhi.n	8002f14 <__kernel_rem_pio2f+0x468>
 8002e78:	e8df f002 	tbb	[pc, r2]
 8002e7c:	021f1f3e 	.word	0x021f1f3e
 8002e80:	aa56      	add	r2, sp, #344	; 0x158
 8002e82:	4411      	add	r1, r2
 8002e84:	399c      	subs	r1, #156	; 0x9c
 8002e86:	4608      	mov	r0, r1
 8002e88:	461c      	mov	r4, r3
 8002e8a:	2c00      	cmp	r4, #0
 8002e8c:	dc5f      	bgt.n	8002f4e <__kernel_rem_pio2f+0x4a2>
 8002e8e:	4608      	mov	r0, r1
 8002e90:	461c      	mov	r4, r3
 8002e92:	2c01      	cmp	r4, #1
 8002e94:	dc6b      	bgt.n	8002f6e <__kernel_rem_pio2f+0x4c2>
 8002e96:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	dc77      	bgt.n	8002f8e <__kernel_rem_pio2f+0x4e2>
 8002e9e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8002ea2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8002ea6:	f1b8 0f00 	cmp.w	r8, #0
 8002eaa:	d176      	bne.n	8002f9a <__kernel_rem_pio2f+0x4ee>
 8002eac:	edc6 6a00 	vstr	s13, [r6]
 8002eb0:	ed86 7a01 	vstr	s14, [r6, #4]
 8002eb4:	edc6 7a02 	vstr	s15, [r6, #8]
 8002eb8:	e02c      	b.n	8002f14 <__kernel_rem_pio2f+0x468>
 8002eba:	aa56      	add	r2, sp, #344	; 0x158
 8002ebc:	4411      	add	r1, r2
 8002ebe:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002ec2:	399c      	subs	r1, #156	; 0x9c
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	da32      	bge.n	8002f30 <__kernel_rem_pio2f+0x484>
 8002eca:	f1b8 0f00 	cmp.w	r8, #0
 8002ece:	d035      	beq.n	8002f3c <__kernel_rem_pio2f+0x490>
 8002ed0:	eef1 7a47 	vneg.f32	s15, s14
 8002ed4:	edc6 7a00 	vstr	s15, [r6]
 8002ed8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8002edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ee0:	a82f      	add	r0, sp, #188	; 0xbc
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	da2c      	bge.n	8002f42 <__kernel_rem_pio2f+0x496>
 8002ee8:	f1b8 0f00 	cmp.w	r8, #0
 8002eec:	d001      	beq.n	8002ef2 <__kernel_rem_pio2f+0x446>
 8002eee:	eef1 7a67 	vneg.f32	s15, s15
 8002ef2:	edc6 7a01 	vstr	s15, [r6, #4]
 8002ef6:	e00d      	b.n	8002f14 <__kernel_rem_pio2f+0x468>
 8002ef8:	aa56      	add	r2, sp, #344	; 0x158
 8002efa:	4411      	add	r1, r2
 8002efc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8002dc4 <__kernel_rem_pio2f+0x318>
 8002f00:	399c      	subs	r1, #156	; 0x9c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da0e      	bge.n	8002f24 <__kernel_rem_pio2f+0x478>
 8002f06:	f1b8 0f00 	cmp.w	r8, #0
 8002f0a:	d001      	beq.n	8002f10 <__kernel_rem_pio2f+0x464>
 8002f0c:	eef1 7a67 	vneg.f32	s15, s15
 8002f10:	edc6 7a00 	vstr	s15, [r6]
 8002f14:	9b01      	ldr	r3, [sp, #4]
 8002f16:	f003 0007 	and.w	r0, r3, #7
 8002f1a:	b057      	add	sp, #348	; 0x15c
 8002f1c:	ecbd 8b04 	vpop	{d8-d9}
 8002f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f24:	ed31 7a01 	vldmdb	r1!, {s14}
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f2e:	e7e8      	b.n	8002f02 <__kernel_rem_pio2f+0x456>
 8002f30:	ed71 7a01 	vldmdb	r1!, {s15}
 8002f34:	3801      	subs	r0, #1
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	e7c4      	b.n	8002ec6 <__kernel_rem_pio2f+0x41a>
 8002f3c:	eef0 7a47 	vmov.f32	s15, s14
 8002f40:	e7c8      	b.n	8002ed4 <__kernel_rem_pio2f+0x428>
 8002f42:	ecb0 7a01 	vldmia	r0!, {s14}
 8002f46:	3101      	adds	r1, #1
 8002f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f4c:	e7ca      	b.n	8002ee4 <__kernel_rem_pio2f+0x438>
 8002f4e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002f52:	ed70 6a01 	vldmdb	r0!, {s13}
 8002f56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002f5a:	3c01      	subs	r4, #1
 8002f5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f60:	ed00 7a01 	vstr	s14, [r0, #-4]
 8002f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f68:	edc0 7a00 	vstr	s15, [r0]
 8002f6c:	e78d      	b.n	8002e8a <__kernel_rem_pio2f+0x3de>
 8002f6e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002f72:	ed70 6a01 	vldmdb	r0!, {s13}
 8002f76:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002f7a:	3c01      	subs	r4, #1
 8002f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f80:	ed00 7a01 	vstr	s14, [r0, #-4]
 8002f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f88:	edc0 7a00 	vstr	s15, [r0]
 8002f8c:	e781      	b.n	8002e92 <__kernel_rem_pio2f+0x3e6>
 8002f8e:	ed31 7a01 	vldmdb	r1!, {s14}
 8002f92:	3b01      	subs	r3, #1
 8002f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f98:	e77f      	b.n	8002e9a <__kernel_rem_pio2f+0x3ee>
 8002f9a:	eef1 6a66 	vneg.f32	s13, s13
 8002f9e:	eeb1 7a47 	vneg.f32	s14, s14
 8002fa2:	edc6 6a00 	vstr	s13, [r6]
 8002fa6:	ed86 7a01 	vstr	s14, [r6, #4]
 8002faa:	eef1 7a67 	vneg.f32	s15, s15
 8002fae:	e781      	b.n	8002eb4 <__kernel_rem_pio2f+0x408>

08002fb0 <__kernel_sinf>:
 8002fb0:	ee10 3a10 	vmov	r3, s0
 8002fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002fbc:	da04      	bge.n	8002fc8 <__kernel_sinf+0x18>
 8002fbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002fc2:	ee17 3a90 	vmov	r3, s15
 8002fc6:	b35b      	cbz	r3, 8003020 <__kernel_sinf+0x70>
 8002fc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002fcc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003024 <__kernel_sinf+0x74>
 8002fd0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003028 <__kernel_sinf+0x78>
 8002fd4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002fd8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800302c <__kernel_sinf+0x7c>
 8002fdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002fe0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003030 <__kernel_sinf+0x80>
 8002fe4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002fe8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003034 <__kernel_sinf+0x84>
 8002fec:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002ff0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002ff4:	b930      	cbnz	r0, 8003004 <__kernel_sinf+0x54>
 8002ff6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003038 <__kernel_sinf+0x88>
 8002ffa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002ffe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003002:	4770      	bx	lr
 8003004:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003008:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800300c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003010:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003014:	eddf 7a09 	vldr	s15, [pc, #36]	; 800303c <__kernel_sinf+0x8c>
 8003018:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800301c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2f2ec9d3 	.word	0x2f2ec9d3
 8003028:	b2d72f34 	.word	0xb2d72f34
 800302c:	3638ef1b 	.word	0x3638ef1b
 8003030:	b9500d01 	.word	0xb9500d01
 8003034:	3c088889 	.word	0x3c088889
 8003038:	be2aaaab 	.word	0xbe2aaaab
 800303c:	3e2aaaab 	.word	0x3e2aaaab

08003040 <fabsf>:
 8003040:	ee10 3a10 	vmov	r3, s0
 8003044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003048:	ee00 3a10 	vmov	s0, r3
 800304c:	4770      	bx	lr
	...

08003050 <scalbnf>:
 8003050:	b508      	push	{r3, lr}
 8003052:	ee10 2a10 	vmov	r2, s0
 8003056:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800305a:	ed2d 8b02 	vpush	{d8}
 800305e:	eef0 0a40 	vmov.f32	s1, s0
 8003062:	d004      	beq.n	800306e <scalbnf+0x1e>
 8003064:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003068:	d306      	bcc.n	8003078 <scalbnf+0x28>
 800306a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800306e:	ecbd 8b02 	vpop	{d8}
 8003072:	eeb0 0a60 	vmov.f32	s0, s1
 8003076:	bd08      	pop	{r3, pc}
 8003078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800307c:	d21c      	bcs.n	80030b8 <scalbnf+0x68>
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <scalbnf+0xac>)
 8003080:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003100 <scalbnf+0xb0>
 8003084:	4298      	cmp	r0, r3
 8003086:	ee60 0a27 	vmul.f32	s1, s0, s15
 800308a:	db10      	blt.n	80030ae <scalbnf+0x5e>
 800308c:	ee10 2a90 	vmov	r2, s1
 8003090:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003094:	3b19      	subs	r3, #25
 8003096:	4403      	add	r3, r0
 8003098:	2bfe      	cmp	r3, #254	; 0xfe
 800309a:	dd0f      	ble.n	80030bc <scalbnf+0x6c>
 800309c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003104 <scalbnf+0xb4>
 80030a0:	eeb0 0a48 	vmov.f32	s0, s16
 80030a4:	f000 f834 	bl	8003110 <copysignf>
 80030a8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80030ac:	e7df      	b.n	800306e <scalbnf+0x1e>
 80030ae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003108 <scalbnf+0xb8>
 80030b2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80030b6:	e7da      	b.n	800306e <scalbnf+0x1e>
 80030b8:	0ddb      	lsrs	r3, r3, #23
 80030ba:	e7ec      	b.n	8003096 <scalbnf+0x46>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	dd06      	ble.n	80030ce <scalbnf+0x7e>
 80030c0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80030c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80030c8:	ee00 3a90 	vmov	s1, r3
 80030cc:	e7cf      	b.n	800306e <scalbnf+0x1e>
 80030ce:	f113 0f16 	cmn.w	r3, #22
 80030d2:	da06      	bge.n	80030e2 <scalbnf+0x92>
 80030d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80030d8:	4298      	cmp	r0, r3
 80030da:	dcdf      	bgt.n	800309c <scalbnf+0x4c>
 80030dc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003108 <scalbnf+0xb8>
 80030e0:	e7de      	b.n	80030a0 <scalbnf+0x50>
 80030e2:	3319      	adds	r3, #25
 80030e4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80030e8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80030ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 800310c <scalbnf+0xbc>
 80030f0:	ee07 3a10 	vmov	s14, r3
 80030f4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80030f8:	e7b9      	b.n	800306e <scalbnf+0x1e>
 80030fa:	bf00      	nop
 80030fc:	ffff3cb0 	.word	0xffff3cb0
 8003100:	4c000000 	.word	0x4c000000
 8003104:	7149f2ca 	.word	0x7149f2ca
 8003108:	0da24260 	.word	0x0da24260
 800310c:	33000000 	.word	0x33000000

08003110 <copysignf>:
 8003110:	ee10 3a10 	vmov	r3, s0
 8003114:	ee10 2a90 	vmov	r2, s1
 8003118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800311c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003120:	4313      	orrs	r3, r2
 8003122:	ee00 3a10 	vmov	s0, r3
 8003126:	4770      	bx	lr

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4e0d      	ldr	r6, [pc, #52]	; (8003160 <__libc_init_array+0x38>)
 800312c:	4c0d      	ldr	r4, [pc, #52]	; (8003164 <__libc_init_array+0x3c>)
 800312e:	1ba4      	subs	r4, r4, r6
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	2500      	movs	r5, #0
 8003134:	42a5      	cmp	r5, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	4e0b      	ldr	r6, [pc, #44]	; (8003168 <__libc_init_array+0x40>)
 800313a:	4c0c      	ldr	r4, [pc, #48]	; (800316c <__libc_init_array+0x44>)
 800313c:	f000 f818 	bl	8003170 <_init>
 8003140:	1ba4      	subs	r4, r4, r6
 8003142:	10a4      	asrs	r4, r4, #2
 8003144:	2500      	movs	r5, #0
 8003146:	42a5      	cmp	r5, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003150:	4798      	blx	r3
 8003152:	3501      	adds	r5, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800315a:	4798      	blx	r3
 800315c:	3501      	adds	r5, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	08003570 	.word	0x08003570
 8003164:	08003570 	.word	0x08003570
 8003168:	08003570 	.word	0x08003570
 800316c:	08003574 	.word	0x08003574

08003170 <_init>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	bf00      	nop
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr

0800317c <_fini>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr
