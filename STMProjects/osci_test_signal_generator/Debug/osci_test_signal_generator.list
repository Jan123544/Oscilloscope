
osci_test_signal_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003074  08003074  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003074  08003074  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800307c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08003080  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08003080  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000915f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e60  00000000  00000000  00029193  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ac1  00000000  00000000  0002bf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006dc1  00000000  00000000  00045a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d24e  00000000  00000000  0004c7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9a10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000216c  00000000  00000000  000c9a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c74 	.word	0x08002c74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002c74 	.word	0x08002c74

080001c8 <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 80001c8:	b490      	push	{r4, r7}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3308      	adds	r3, #8
 80001d8:	4619      	mov	r1, r3
 80001da:	68bb      	ldr	r3, [r7, #8]
 80001dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80001e0:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80001e4:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	fa92 f2a2 	rbit	r2, r2
 80001ec:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80001ee:	693a      	ldr	r2, [r7, #16]
 80001f0:	fab2 f282 	clz	r2, r2
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	40d3      	lsrs	r3, r2
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	440b      	add	r3, r1
 80001fc:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80001fe:	6823      	ldr	r3, [r4, #0]
 8000200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4313      	orrs	r3, r2
 800020c:	6023      	str	r3, [r4, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 800020e:	bf00      	nop
 8000210:	3718      	adds	r7, #24
 8000212:	46bd      	mov	sp, r7
 8000214:	bc90      	pop	{r4, r7}
 8000216:	4770      	bx	lr

08000218 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f043 0201 	orr.w	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f023 0201 	bic.w	r2, r3, #1
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f06f 0201 	mvn.w	r2, #1
 8000282:	611a      	str	r2, [r3, #16]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	f043 0201 	orr.w	r2, r3, #1
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	60da      	str	r2, [r3, #12]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80002ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80002be:	f001 ff29 	bl	8002114 <cosf>
 80002c2:	eef0 7a40 	vmov.f32	s15, s0
 80002c6:	eeb0 0a67 	vmov.f32	s0, s15
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80002da:	ed97 0a01 	vldr	s0, [r7, #4]
 80002de:	f001 ff59 	bl	8002194 <floorf>
 80002e2:	eef0 7a40 	vmov.f32	s15, s0
 80002e6:	eeb0 0a67 	vmov.f32	s0, s15
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80002fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80002fe:	f001 ff8b 	bl	8002218 <sinf>
 8000302:	eef0 7a40 	vmov.f32	s15, s0
 8000306:	eeb0 0a67 	vmov.f32	s0, s15
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <_Z16c_putSignalToDACPv>:
 *      Author: dot
 */

#include "SignalAdjuster.h"

void c_putSignalToDAC(void*v){
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	SignalAdjuster* p = (SignalAdjuster*) v;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60fb      	str	r3, [r7, #12]
	LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1, p->getNextSample());
 800031c:	68f8      	ldr	r0, [r7, #12]
 800031e:	f000 fb65 	bl	80009ec <_ZN14SignalAdjuster13getNextSampleEv>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	4904      	ldr	r1, [pc, #16]	; (8000338 <_Z16c_putSignalToDACPv+0x28>)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <_Z16c_putSignalToDACPv+0x2c>)
 800032a:	f7ff ff4d 	bl	80001c8 <LL_DAC_ConvertData12LeftAligned>
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	02100001 	.word	0x02100001
 800033c:	40007400 	.word	0x40007400

08000340 <_Z9c_executePv>:

void c_execute(void*v){
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	SignalAdjuster* p = (SignalAdjuster*) v;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	60fb      	str	r3, [r7, #12]
	char cmd = USART2->RDR;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <_Z9c_executePv+0x28>)
 800034e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000350:	b29b      	uxth	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]
	p->execute(cmd);
 8000354:	7afb      	ldrb	r3, [r7, #11]
 8000356:	4619      	mov	r1, r3
 8000358:	68f8      	ldr	r0, [r7, #12]
 800035a:	f000 fb05 	bl	8000968 <_ZN14SignalAdjuster7executeEc>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40004400 	.word	0x40004400

0800036c <_ZN14SignalAdjuster17increaseAmplitudeEv>:

void SignalAdjuster::increaseAmplitude(){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	if(amplitude/amplitudePerLevel < numberOfQuantizationLevels/2.0f){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800037a:	3308      	adds	r3, #8
 800037c:	edd3 6a00 	vldr	s13, [r3]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000386:	3318      	adds	r3, #24
 8000388:	edd3 7a00 	vldr	s15, [r3]
 800038c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000396:	3314      	adds	r3, #20
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	ee07 3a90 	vmov	s15, r3
 800039e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80003a2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80003a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80003aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b2:	d53f      	bpl.n	8000434 <_ZN14SignalAdjuster17increaseAmplitudeEv+0xc8>
		amplitude += numberOfQuantizationLevels/16;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80003ba:	3308      	adds	r3, #8
 80003bc:	ed93 7a00 	vldr	s14, [r3]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80003c6:	3314      	adds	r3, #20
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	091b      	lsrs	r3, r3, #4
 80003cc:	ee07 3a90 	vmov	s15, r3
 80003d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80003de:	3308      	adds	r3, #8
 80003e0:	edc3 7a00 	vstr	s15, [r3]
		if (amplitude >= numberOfQuantizationLevels/2){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80003ea:	3308      	adds	r3, #8
 80003ec:	ed93 7a00 	vldr	s14, [r3]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80003f6:	3314      	adds	r3, #20
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	085b      	lsrs	r3, r3, #1
 80003fc:	ee07 3a90 	vmov	s15, r3
 8000400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800040c:	da00      	bge.n	8000410 <_ZN14SignalAdjuster17increaseAmplitudeEv+0xa4>
			amplitude = numberOfQuantizationLevels/2 - 1;
		}
	}else{
		amplitude = numberOfQuantizationLevels/2 - 1;
	}
}
 800040e:	e022      	b.n	8000456 <_ZN14SignalAdjuster17increaseAmplitudeEv+0xea>
			amplitude = numberOfQuantizationLevels/2 - 1;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000416:	3314      	adds	r3, #20
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	085b      	lsrs	r3, r3, #1
 800041c:	3b01      	subs	r3, #1
 800041e:	ee07 3a90 	vmov	s15, r3
 8000422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800042c:	3308      	adds	r3, #8
 800042e:	edc3 7a00 	vstr	s15, [r3]
}
 8000432:	e010      	b.n	8000456 <_ZN14SignalAdjuster17increaseAmplitudeEv+0xea>
		amplitude = numberOfQuantizationLevels/2 - 1;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800043a:	3314      	adds	r3, #20
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	085b      	lsrs	r3, r3, #1
 8000440:	3b01      	subs	r3, #1
 8000442:	ee07 3a90 	vmov	s15, r3
 8000446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000450:	3308      	adds	r3, #8
 8000452:	edc3 7a00 	vstr	s15, [r3]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <_ZN14SignalAdjuster17decreaseAmplitudeEv>:

void SignalAdjuster::decreaseAmplitude(){
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
	if(amplitude/amplitudePerLevel > 0){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000470:	3308      	adds	r3, #8
 8000472:	edd3 6a00 	vldr	s13, [r3]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800047c:	3318      	adds	r3, #24
 800047e:	ed93 7a00 	vldr	s14, [r3]
 8000482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800048a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800048e:	dd2b      	ble.n	80004e8 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x86>
		amplitude -= numberOfQuantizationLevels/16;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000496:	3308      	adds	r3, #8
 8000498:	ed93 7a00 	vldr	s14, [r3]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80004a2:	3314      	adds	r3, #20
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	091b      	lsrs	r3, r3, #4
 80004a8:	ee07 3a90 	vmov	s15, r3
 80004ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80004ba:	3308      	adds	r3, #8
 80004bc:	edc3 7a00 	vstr	s15, [r3]
		if (amplitude < 0){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80004c6:	3308      	adds	r3, #8
 80004c8:	edd3 7a00 	vldr	s15, [r3]
 80004cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d4:	d400      	bmi.n	80004d8 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x76>
			amplitude = 0;
		}
	}else{
		amplitude = 0;
	}
}
 80004d6:	e00e      	b.n	80004f6 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x94>
			amplitude = 0;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80004de:	3308      	adds	r3, #8
 80004e0:	f04f 0200 	mov.w	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	e006      	b.n	80004f6 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x94>
		amplitude = 0;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80004ee:	3308      	adds	r3, #8
 80004f0:	f04f 0200 	mov.w	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <_ZN14SignalAdjuster17increaseFrequencyEv>:
void SignalAdjuster::increaseFrequency(){
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
	frequency++;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000510:	330c      	adds	r3, #12
 8000512:	edd3 7a00 	vldr	s15, [r3]
 8000516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800051a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000524:	330c      	adds	r3, #12
 8000526:	edc3 7a00 	vstr	s15, [r3]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <_ZN14SignalAdjuster17decreaseFrequencyEv>:
void SignalAdjuster::decreaseFrequency(){
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	if(frequency > 1){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000544:	330c      	adds	r3, #12
 8000546:	edd3 7a00 	vldr	s15, [r3]
 800054a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800054e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000556:	dc00      	bgt.n	800055a <_ZN14SignalAdjuster17decreaseFrequencyEv+0x24>
		frequency--;
	}
}
 8000558:	e00f      	b.n	800057a <_ZN14SignalAdjuster17decreaseFrequencyEv+0x44>
		frequency--;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000560:	330c      	adds	r3, #12
 8000562:	edd3 7a00 	vldr	s15, [r3]
 8000566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800056a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000574:	330c      	adds	r3, #12
 8000576:	edc3 7a00 	vstr	s15, [r3]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <_ZN14SignalAdjuster14previousSignalEv>:

void SignalAdjuster::previousSignal(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	switch(signal){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3b61      	subs	r3, #97	; 0x61
 800059a:	2b03      	cmp	r3, #3
 800059c:	d822      	bhi.n	80005e4 <_ZN14SignalAdjuster14previousSignalEv+0x5c>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <_ZN14SignalAdjuster14previousSignalEv+0x1c>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005c1 	.word	0x080005c1
 80005ac:	080005cd 	.word	0x080005cd
 80005b0:	080005d9 	.word	0x080005d9
	case SIGNAL_SINE:
		signal = SIGNAL_RANDOM;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 80005ba:	2264      	movs	r2, #100	; 0x64
 80005bc:	701a      	strb	r2, [r3, #0]
		break;
 80005be:	e011      	b.n	80005e4 <_ZN14SignalAdjuster14previousSignalEv+0x5c>
	case SIGNAL_COSINE:
		signal = SIGNAL_SINE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 80005c6:	2261      	movs	r2, #97	; 0x61
 80005c8:	701a      	strb	r2, [r3, #0]
		break;
 80005ca:	e00b      	b.n	80005e4 <_ZN14SignalAdjuster14previousSignalEv+0x5c>
	case SIGNAL_TANGENT:
		signal = SIGNAL_COSINE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 80005d2:	2262      	movs	r2, #98	; 0x62
 80005d4:	701a      	strb	r2, [r3, #0]
		break;
 80005d6:	e005      	b.n	80005e4 <_ZN14SignalAdjuster14previousSignalEv+0x5c>
	case SIGNAL_RANDOM:
		signal = SIGNAL_TANGENT;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 80005de:	2263      	movs	r2, #99	; 0x63
 80005e0:	701a      	strb	r2, [r3, #0]
		break;
 80005e2:	bf00      	nop
	}

	sample();
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f83b 	bl	8000660 <_ZN14SignalAdjuster6sampleEv>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop

080005f4 <_ZN14SignalAdjuster10nextSignalEv>:
void SignalAdjuster::nextSignal(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	switch(signal){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3b61      	subs	r3, #97	; 0x61
 8000606:	2b03      	cmp	r3, #3
 8000608:	d822      	bhi.n	8000650 <_ZN14SignalAdjuster10nextSignalEv+0x5c>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <_ZN14SignalAdjuster10nextSignalEv+0x1c>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	0800062d 	.word	0x0800062d
 8000618:	08000639 	.word	0x08000639
 800061c:	08000645 	.word	0x08000645
		case SIGNAL_SINE:
			signal = SIGNAL_COSINE;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 8000626:	2262      	movs	r2, #98	; 0x62
 8000628:	701a      	strb	r2, [r3, #0]
			break;
 800062a:	e011      	b.n	8000650 <_ZN14SignalAdjuster10nextSignalEv+0x5c>
		case SIGNAL_COSINE:
			signal = SIGNAL_TANGENT;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 8000632:	2263      	movs	r2, #99	; 0x63
 8000634:	701a      	strb	r2, [r3, #0]
			break;
 8000636:	e00b      	b.n	8000650 <_ZN14SignalAdjuster10nextSignalEv+0x5c>
		case SIGNAL_TANGENT:
			signal = SIGNAL_RANDOM;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 800063e:	2264      	movs	r2, #100	; 0x64
 8000640:	701a      	strb	r2, [r3, #0]
			break;
 8000642:	e005      	b.n	8000650 <_ZN14SignalAdjuster10nextSignalEv+0x5c>
		case SIGNAL_RANDOM:
			signal = SIGNAL_SINE;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 800064a:	2261      	movs	r2, #97	; 0x61
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	bf00      	nop
	}

	sample();
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f805 	bl	8000660 <_ZN14SignalAdjuster6sampleEv>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop

08000660 <_ZN14SignalAdjuster6sampleEv>:

void SignalAdjuster::sample(){
 8000660:	b580      	push	{r7, lr}
 8000662:	ed2d 8b02 	vpush	{d8}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	float signal_increment;
	sampleIndex = 0;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000672:	331c      	adds	r3, #28
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
	switch(signal){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f103 1304 	add.w	r3, r3, #262148	; 0x40004
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b61      	cmp	r3, #97	; 0x61
 8000682:	d002      	beq.n	800068a <_ZN14SignalAdjuster6sampleEv+0x2a>
 8000684:	2b62      	cmp	r3, #98	; 0x62
 8000686:	d02e      	beq.n	80006e6 <_ZN14SignalAdjuster6sampleEv+0x86>
		for(uint32_t i = 0; i < NUM_SAMPLES; i++){
			signalBuffer[i] = quantize(cos(signal_increment*i));
		}
		break;
	default:
		return;
 8000688:	e059      	b.n	800073e <_ZN14SignalAdjuster6sampleEv+0xde>
		signal_increment = 2*M_PI/(NUM_SAMPLES-1);
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <_ZN14SignalAdjuster6sampleEv+0xe8>)
 800068c:	60fb      	str	r3, [r7, #12]
		for(uint32_t i = 0; i < NUM_SAMPLES; i++){
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000698:	d24b      	bcs.n	8000732 <_ZN14SignalAdjuster6sampleEv+0xd2>
			signalBuffer[i] = quantize(offset + sin(signal_increment*i));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80006a0:	3310      	adds	r3, #16
 80006a2:	ed93 8a00 	vldr	s16, [r3]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80006b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b8:	eeb0 0a67 	vmov.f32	s0, s15
 80006bc:	f7ff fe18 	bl	80002f0 <_ZSt3sinf>
 80006c0:	eef0 7a40 	vmov.f32	s15, s0
 80006c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f88d 	bl	80007ec <_ZN14SignalAdjuster8quantizeEf>
 80006d2:	4601      	mov	r1, r0
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	6059      	str	r1, [r3, #4]
		for(uint32_t i = 0; i < NUM_SAMPLES; i++){
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e7d5      	b.n	8000692 <_ZN14SignalAdjuster6sampleEv+0x32>
		signal_increment = 2*M_PI/(NUM_SAMPLES-1);
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <_ZN14SignalAdjuster6sampleEv+0xe8>)
 80006e8:	60fb      	str	r3, [r7, #12]
		for(uint32_t i = 0; i < NUM_SAMPLES; i++){
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f4:	d21f      	bcs.n	8000736 <_ZN14SignalAdjuster6sampleEv+0xd6>
			signalBuffer[i] = quantize(cos(signal_increment*i));
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000700:	edd7 7a03 	vldr	s15, [r7, #12]
 8000704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000708:	eeb0 0a67 	vmov.f32	s0, s15
 800070c:	f7ff fdd0 	bl	80002b0 <_ZSt3cosf>
 8000710:	eef0 7a40 	vmov.f32	s15, s0
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f867 	bl	80007ec <_ZN14SignalAdjuster8quantizeEf>
 800071e:	4601      	mov	r1, r0
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	6059      	str	r1, [r3, #4]
		for(uint32_t i = 0; i < NUM_SAMPLES; i++){
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	3301      	adds	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	e7dd      	b.n	80006ee <_ZN14SignalAdjuster6sampleEv+0x8e>
		break;
 8000732:	bf00      	nop
 8000734:	e000      	b.n	8000738 <_ZN14SignalAdjuster6sampleEv+0xd8>
		break;
 8000736:	bf00      	nop
	}

	configureTimer();
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f807 	bl	800074c <_ZN14SignalAdjuster14configureTimerEv>
}
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	ecbd 8b02 	vpop	{d8}
 8000746:	bd80      	pop	{r7, pc}
 8000748:	38c910a4 	.word	0x38c910a4

0800074c <_ZN14SignalAdjuster14configureTimerEv>:

void SignalAdjuster::configureTimer(){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableCounter(TIM1);
 8000754:	4821      	ldr	r0, [pc, #132]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 8000756:	f7ff fd6f 	bl	8000238 <LL_TIM_DisableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM1);
 800075a:	4820      	ldr	r0, [pc, #128]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 800075c:	f7ff fd8a 	bl	8000274 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	481e      	ldr	r0, [pc, #120]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 8000764:	f7ff fd78 	bl	8000258 <LL_TIM_SetCounter>

	// Asumes TIM1 is used with 32MHZ clock speed

	uint32_t arr = floor(TIM1_CLOCK_SPEED/frequency/(NUM_SAMPLES-1));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800076e:	330c      	adds	r3, #12
 8000770:	ed93 7a00 	vldr	s14, [r3]
 8000774:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80007e0 <_ZN14SignalAdjuster14configureTimerEv+0x94>
 8000778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800077c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80007e4 <_ZN14SignalAdjuster14configureTimerEv+0x98>
 8000780:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000784:	eeb0 0a66 	vmov.f32	s0, s13
 8000788:	f7ff fda2 	bl	80002d0 <_ZSt5floorf>
 800078c:	eef0 7a40 	vmov.f32	s15, s0
 8000790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000794:	ee17 3a90 	vmov	r3, s15
 8000798:	60fb      	str	r3, [r7, #12]
	if(arr > TIM1_MAX_ARR){
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a0:	d311      	bcc.n	80007c6 <_ZN14SignalAdjuster14configureTimerEv+0x7a>
		TIM1->PSC = arr / TIM1_MAX_ARR;
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4910      	ldr	r1, [pc, #64]	; (80007e8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 80007a8:	fba1 1303 	umull	r1, r3, r1, r3
 80007ac:	0bdb      	lsrs	r3, r3, #15
 80007ae:	6293      	str	r3, [r2, #40]	; 0x28
		TIM1->ARR = arr % TIM1_MAX_ARR;
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 80007b6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ba:	0bda      	lsrs	r2, r3, #15
 80007bc:	4613      	mov	r3, r2
 80007be:	041b      	lsls	r3, r3, #16
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	1aca      	subs	r2, r1, r3
 80007c4:	62c2      	str	r2, [r0, #44]	; 0x2c
	}

	LL_TIM_EnableIT_UPDATE(TIM1);
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 80007c8:	f7ff fd62 	bl	8000290 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <_ZN14SignalAdjuster14configureTimerEv+0x90>)
 80007ce:	f7ff fd23 	bl	8000218 <LL_TIM_EnableCounter>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40012c00 	.word	0x40012c00
 80007e0:	4af42400 	.word	0x4af42400
 80007e4:	477fff00 	.word	0x477fff00
 80007e8:	80008001 	.word	0x80008001

080007ec <_ZN14SignalAdjuster8quantizeEf>:

uint32_t SignalAdjuster::quantize(float v){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	ed2d 8b02 	vpush	{d8}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	ed87 0a00 	vstr	s0, [r7]
	return MAX(0, MIN(numberOfQuantizationLevels - 1, floor((numberOfQuantizationLevels-1)*amplitude*v)));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000802:	3314      	adds	r3, #20
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000816:	3314      	adds	r3, #20
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	ee07 3a90 	vmov	s15, r3
 8000820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800082a:	3308      	adds	r3, #8
 800082c:	edd3 7a00 	vldr	s15, [r3]
 8000830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000834:	edd7 7a00 	vldr	s15, [r7]
 8000838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800083c:	eeb0 0a67 	vmov.f32	s0, s15
 8000840:	f7ff fd46 	bl	80002d0 <_ZSt5floorf>
 8000844:	eef0 7a40 	vmov.f32	s15, s0
 8000848:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	d501      	bpl.n	8000856 <_ZN14SignalAdjuster8quantizeEf+0x6a>
 8000852:	2300      	movs	r3, #0
 8000854:	e023      	b.n	800089e <_ZN14SignalAdjuster8quantizeEf+0xb2>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800085c:	3314      	adds	r3, #20
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3b01      	subs	r3, #1
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000870:	3308      	adds	r3, #8
 8000872:	edd3 7a00 	vldr	s15, [r3]
 8000876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800087a:	edd7 7a00 	vldr	s15, [r7]
 800087e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	f7ff fd23 	bl	80002d0 <_ZSt5floorf>
 800088a:	eef0 7a40 	vmov.f32	s15, s0
 800088e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000896:	bf4c      	ite	mi
 8000898:	2301      	movmi	r3, #1
 800089a:	2300      	movpl	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <_ZN14SignalAdjuster8quantizeEf+0xbc>
 80008a2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8000964 <_ZN14SignalAdjuster8quantizeEf+0x178>
 80008a6:	e055      	b.n	8000954 <_ZN14SignalAdjuster8quantizeEf+0x168>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80008ae:	3314      	adds	r3, #20
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80008c2:	3314      	adds	r3, #20
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80008d6:	3308      	adds	r3, #8
 80008d8:	edd3 7a00 	vldr	s15, [r3]
 80008dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008e0:	edd7 7a00 	vldr	s15, [r7]
 80008e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e8:	eeb0 0a67 	vmov.f32	s0, s15
 80008ec:	f7ff fcf0 	bl	80002d0 <_ZSt5floorf>
 80008f0:	eef0 7a40 	vmov.f32	s15, s0
 80008f4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80008f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fc:	d50c      	bpl.n	8000918 <_ZN14SignalAdjuster8quantizeEf+0x12c>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000904:	3314      	adds	r3, #20
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	ee07 3a90 	vmov	s15, r3
 800090e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000916:	e01d      	b.n	8000954 <_ZN14SignalAdjuster8quantizeEf+0x168>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800091e:	3314      	adds	r3, #20
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000932:	3308      	adds	r3, #8
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800093c:	edd7 7a00 	vldr	s15, [r7]
 8000940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000944:	eeb0 0a67 	vmov.f32	s0, s15
 8000948:	f7ff fcc2 	bl	80002d0 <_ZSt5floorf>
 800094c:	eef0 7a40 	vmov.f32	s15, s0
 8000950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000954:	ee17 3a90 	vmov	r3, s15
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	ecbd 8b02 	vpop	{d8}
 8000962:	bd80      	pop	{r7, pc}
 8000964:	00000000 	.word	0x00000000

08000968 <_ZN14SignalAdjuster7executeEc>:




void SignalAdjuster::execute(char cmd){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	70fb      	strb	r3, [r7, #3]
	switch(cmd){
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	3b69      	subs	r3, #105	; 0x69
 8000978:	2b0b      	cmp	r3, #11
 800097a:	d833      	bhi.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <_ZN14SignalAdjuster7executeEc+0x1c>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	080009b5 	.word	0x080009b5
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009bd 	.word	0x080009bd
 8000990:	080009cd 	.word	0x080009cd
 8000994:	080009e5 	.word	0x080009e5
 8000998:	080009e5 	.word	0x080009e5
 800099c:	080009e5 	.word	0x080009e5
 80009a0:	080009e5 	.word	0x080009e5
 80009a4:	080009e5 	.word	0x080009e5
 80009a8:	080009dd 	.word	0x080009dd
 80009ac:	080009e5 	.word	0x080009e5
 80009b0:	080009d5 	.word	0x080009d5
		case 'i':increaseAmplitude();
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fcd9 	bl	800036c <_ZN14SignalAdjuster17increaseAmplitudeEv>
		break;
 80009ba:	e013      	b.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
		case 'k':decreaseAmplitude();
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fd50 	bl	8000462 <_ZN14SignalAdjuster17decreaseAmplitudeEv>
		break;
 80009c2:	e00f      	b.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
		case 'j':increaseFrequency();
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff fd9c 	bl	8000502 <_ZN14SignalAdjuster17increaseFrequencyEv>
		break;
 80009ca:	e00b      	b.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
		case'l':decreaseFrequency();
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fdb2 	bl	8000536 <_ZN14SignalAdjuster17decreaseFrequencyEv>
		break;
 80009d2:	e007      	b.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
		case't':nextSignal();
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fe0d 	bl	80005f4 <_ZN14SignalAdjuster10nextSignalEv>
		break;
 80009da:	e003      	b.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
		case'r':previousSignal();
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fdd3 	bl	8000588 <_ZN14SignalAdjuster14previousSignalEv>
	}
}
 80009e2:	e7ff      	b.n	80009e4 <_ZN14SignalAdjuster7executeEc+0x7c>
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZN14SignalAdjuster13getNextSampleEv>:

uint32_t SignalAdjuster::getNextSample(){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint32_t ret = signalBuffer[sampleIndex];
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80009fa:	331c      	adds	r3, #28
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	60fb      	str	r3, [r7, #12]
	++sampleIndex;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a0e:	331c      	adds	r3, #28
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a1a:	331c      	adds	r3, #28
 8000a1c:	601a      	str	r2, [r3, #0]
	sampleIndex %= NUM_SAMPLES;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a24:	331c      	adds	r3, #28
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a30:	331c      	adds	r3, #28
 8000a32:	601a      	str	r2, [r3, #0]
	return ret;
 8000a34:	68fb      	ldr	r3, [r7, #12]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_ZN14SignalAdjusterC1Efffmfm>:
	void configureTimer();
	uint32_t quantize(float);
	void putSignalToDAC();

public:
	SignalAdjuster(float amplitude=1.0f, float frequency=1.0f, float offset=1.0f, uint32_t numberOfQuantizationLevels=4096, float amplitudePerLevel = 1.0/2048, uint32_t startSampleIndex=0) :amplitude(amplitude), frequency(frequency), offset(offset), numberOfQuantizationLevels(numberOfQuantizationLevels), amplitudePerLevel(amplitudePerLevel), sampleIndex(startSampleIndex) {
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	61f8      	str	r0, [r7, #28]
 8000a4c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a50:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a54:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a58:	60f9      	str	r1, [r7, #12]
 8000a5a:	edc7 1a02 	vstr	s3, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a66:	3308      	adds	r3, #8
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a72:	330c      	adds	r3, #12
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a7e:	3310      	adds	r3, #16
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000a96:	3318      	adds	r3, #24
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000aa2:	331c      	adds	r3, #28
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
		tim1_callback = c_putSignalToDAC;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <_ZN14SignalAdjusterC1Efffmfm+0x80>)
 8000aaa:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <_ZN14SignalAdjusterC1Efffmfm+0x84>)
 8000aac:	601a      	str	r2, [r3, #0]
		usart2_rxne_callback = c_execute;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <_ZN14SignalAdjusterC1Efffmfm+0x88>)
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <_ZN14SignalAdjusterC1Efffmfm+0x8c>)
 8000ab2:	601a      	str	r2, [r3, #0]
	};
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	08000311 	.word	0x08000311
 8000acc:	20000024 	.word	0x20000024
 8000ad0:	08000341 	.word	0x08000341

08000ad4 <cppmain>:

#include "cppmain.h"
#include "main.h"
#include "SignalAdjuster.h"

void cppmain(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	f5ad 2d80 	sub.w	sp, sp, #262144	; 0x40000
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
	int a = 3;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f507 2280 	add.w	r2, r7, #262144	; 0x40000
 8000ae4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000ae8:	6013      	str	r3, [r2, #0]
	SignalAdjuster adj;
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	3b24      	subs	r3, #36	; 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	eddf 1a09 	vldr	s3, [pc, #36]	; 8000b18 <cppmain+0x44>
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000afe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000b02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff9c 	bl	8000a44 <_ZN14SignalAdjusterC1Efffmfm>
	adj_IT_reference = &adj;
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <cppmain+0x48>)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	3b24      	subs	r3, #36	; 0x24
 8000b14:	6013      	str	r3, [r2, #0]

	while(1){
 8000b16:	e7fe      	b.n	8000b16 <cppmain+0x42>
 8000b18:	3a000000 	.word	0x3a000000
 8000b1c:	20000020 	.word	0x20000020

08000b20 <LL_DAC_DisableTrigger>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	2104      	movs	r1, #4
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40021000 	.word	0x40021000

08000b80 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b8a:	69da      	ldr	r2, [r3, #28]
 8000b8c:	4907      	ldr	r1, [pc, #28]	; (8000bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b96:	69da      	ldr	r2, [r3, #28]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000

08000bb0 <MX_DAC1_Init>:

/* USER CODE END 0 */

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8000bd4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000bd8:	f7ff ffd2 	bl	8000b80 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000bdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000be0:	f7ff ffb6 	bl	8000b50 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000be4:	2310      	movs	r3, #16
 8000be6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000be8:	2303      	movs	r3, #3
 8000bea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 feb8 	bl	800196c <LL_GPIO_Init>

  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000bfc:	2338      	movs	r3, #56	; 0x38
 8000bfe:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4906      	ldr	r1, [pc, #24]	; (8000c28 <MX_DAC1_Init+0x78>)
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_DAC1_Init+0x7c>)
 8000c12:	f000 fd55 	bl	80016c0 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000c16:	4904      	ldr	r1, [pc, #16]	; (8000c28 <MX_DAC1_Init+0x78>)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_DAC1_Init+0x7c>)
 8000c1a:	f7ff ff81 	bl	8000b20 <LL_DAC_DisableTrigger>

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	02100001 	.word	0x02100001
 8000c2c:	40007400 	.word	0x40007400

08000c30 <LL_AHB1_GRP1_EnableClock>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c68:	f7ff ffe2 	bl	8000c30 <LL_AHB1_GRP1_EnableClock>

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <LL_RCC_HSI_Enable+0x1c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <LL_RCC_HSI_Enable+0x1c>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <LL_RCC_HSI_IsReady+0x20>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	bf0c      	ite	eq
 8000ce8:	2301      	moveq	r3, #1
 8000cea:	2300      	movne	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000

08000cfc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_RCC_SetSysClkSource+0x24>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f023 0203 	bic.w	r2, r3, #3
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_RCC_SetSysClkSource+0x24>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000

08000d50 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <LL_RCC_GetSysClkSource+0x18>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d7c:	4904      	ldr	r1, [pc, #16]	; (8000d90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000

08000d94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000

08000dbc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dcc:	4904      	ldr	r1, [pc, #16]	; (8000de0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000

08000de4 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <LL_RCC_SetTIMClockSource+0x34>)
 8000dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	0edb      	lsrs	r3, r3, #27
 8000df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8000e06:	4904      	ldr	r1, [pc, #16]	; (8000e18 <LL_RCC_SetTIMClockSource+0x34>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000

08000e1c <LL_APB1_GRP1_EnableClock>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4013      	ands	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_FLASH_SetLatency+0x24>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 0207 	bic.w	r2, r3, #7
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <LL_FLASH_SetLatency+0x24>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <LL_FLASH_GetLatency+0x18>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0307 	and.w	r3, r3, #7
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d106      	bne.n	8000edc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <LL_SYSTICK_SetClkSource+0x34>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <LL_SYSTICK_SetClkSource+0x34>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000eda:	e005      	b.n	8000ee8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <LL_SYSTICK_SetClkSource+0x34>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <LL_SYSTICK_SetClkSource+0x34>)
 8000ee2:	f023 0304 	bic.w	r3, r3, #4
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff ffa5 	bl	8000e4c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f02:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f06:	f7ff ff89 	bl	8000e1c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f7ff feb0 	bl	8000c70 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f80c 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f7ff fea4 	bl	8000c60 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000f18:	f7ff fe4a 	bl	8000bb0 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000f1c:	f000 f9ee 	bl	80012fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f20:	f000 fb22 	bl	8001568 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cppmain();
 8000f24:	f7ff fdd6 	bl	8000ad4 <cppmain>
 8000f28:	e7fc      	b.n	8000f24 <main+0x2c>
	...

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ffa3 	bl	8000e7c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000f36:	f7ff ffb5 	bl	8000ea4 <LL_FLASH_GetLatency>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000f40:	f000 f82e 	bl	8000fa0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8000f44:	f7ff feb8 	bl	8000cb8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f48:	bf00      	nop
 8000f4a:	f7ff fec5 	bl	8000cd8 <LL_RCC_HSI_IsReady>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d1fa      	bne.n	8000f4a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f7ff fed1 	bl	8000cfc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ff06 	bl	8000d6c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ff17 	bl	8000d94 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff ff28 	bl	8000dbc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff fedb 	bl	8000d28 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000f72:	bf00      	nop
 8000f74:	f7ff feec 	bl	8000d50 <LL_RCC_GetSysClkSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1fa      	bne.n	8000f74 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <SystemClock_Config+0x70>)
 8000f80:	f001 f8aa 	bl	80020d8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff ff9b 	bl	8000ec0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <SystemClock_Config+0x70>)
 8000f8c:	f001 f8b2 	bl	80020f4 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff27 	bl	8000de4 <LL_RCC_SetTIMClockSource>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	007a1200 	.word	0x007a1200

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_TIM_ClearFlag_UPDATE>:
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f06f 0201 	mvn.w	r2, #1
 8000fbc:	611a      	str	r2, [r3, #16]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b20      	cmp	r3, #32
 8001002:	d101      	bne.n	8001008 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <HardFault_Handler+0x4>

0800102a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <BusFault_Handler+0x4>

08001036 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <UsageFault_Handler+0x4>

0800103c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)){
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <TIM1_UP_TIM16_IRQHandler+0x28>)
 800107a:	f7ff ffa6 	bl	8000fca <LL_TIM_IsActiveFlag_UPDATE>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <TIM1_UP_TIM16_IRQHandler+0x22>
		tim1_callback(adj_IT_reference);
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	4610      	mov	r0, r2
 800108e:	4798      	blx	r3
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001092:	f7ff ff8c 	bl	8000fae <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	20000028 	.word	0x20000028
 80010a4:	20000020 	.word	0x20000020

080010a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)){
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <USART2_IRQHandler+0x20>)
 80010ae:	f7ff ff9f 	bl	8000ff0 <LL_USART_IsActiveFlag_RXNE>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <USART2_IRQHandler+0x1c>
		usart2_rxne_callback(adj_IT_reference);
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <USART2_IRQHandler+0x24>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <USART2_IRQHandler+0x28>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4610      	mov	r0, r2
 80010c2:	4798      	blx	r3
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40004400 	.word	0x40004400
 80010cc:	20000024 	.word	0x20000024
 80010d0:	20000020 	.word	0x20000020

080010d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <SystemInit+0x28>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <SystemInit+0x28>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SystemInit+0x28>)
 80010ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ee:	609a      	str	r2, [r3, #8]
#endif
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <LL_APB2_GRP1_EnableClock>:
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <LL_APB2_GRP1_EnableClock+0x2c>)
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <LL_APB2_GRP1_EnableClock+0x2c>)
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000

08001244 <LL_TIM_DisableARRPreload>:
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_TIM_SetClockSource>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001276:	f023 0307 	bic.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_TIM_SetTriggerOutput>:
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_TIM_SetTriggerOutput2>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_TIM_DisableMasterSlaveMode>:
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	609a      	str	r2, [r3, #8]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001314:	f7ff ff7e 	bl	8001214 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001318:	f7ff fef2 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800131c:	4603      	mov	r3, r0
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff42 	bl	80011ac <NVIC_EncodePriority>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	2019      	movs	r0, #25
 800132e:	f7ff ff13 	bl	8001158 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001332:	2019      	movs	r0, #25
 8001334:	f7ff fef2 	bl	800111c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_TIM1_Init+0x88>)
 8001352:	f000 fd5d 	bl	8001e10 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <MX_TIM1_Init+0x88>)
 8001358:	f7ff ff74 	bl	8001244 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800135c:	2100      	movs	r1, #0
 800135e:	4809      	ldr	r0, [pc, #36]	; (8001384 <MX_TIM1_Init+0x88>)
 8001360:	f7ff ff80 	bl	8001264 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001364:	2100      	movs	r1, #0
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM1_Init+0x88>)
 8001368:	f7ff ff91 	bl	800128e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800136c:	2100      	movs	r1, #0
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM1_Init+0x88>)
 8001370:	f7ff ffa0 	bl	80012b4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM1_Init+0x88>)
 8001376:	f7ff ffb0 	bl	80012da <LL_TIM_DisableMasterSlaveMode>

}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00

08001388 <__NVIC_GetPriorityGrouping>:
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <LL_AHB1_GRP1_EnableClock>:
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4013      	ands	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000

080014cc <LL_APB1_GRP1_EnableClock>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000

080014fc <LL_USART_Enable>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_USART_ConfigAsyncMode>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001596:	f7ff ff99 	bl	80014cc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800159a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800159e:	f7ff ff7d 	bl	800149c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80015a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80015a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015a8:	2302      	movs	r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80015b8:	2307      	movs	r3, #7
 80015ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c4:	f000 f9d2 	bl	800196c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015c8:	f7ff fede 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff2e 	bl	8001434 <NVIC_EncodePriority>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	2026      	movs	r0, #38	; 0x26
 80015de:	f7ff feff 	bl	80013e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80015e2:	2026      	movs	r0, #38	; 0x26
 80015e4:	f7ff fede 	bl	80013a4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80015e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80015fa:	230c      	movs	r3, #12
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_USART2_UART_Init+0xc4>)
 800160e:	f000 fcdd 	bl	8001fcc <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_USART2_UART_Init+0xc4>)
 8001614:	f7ff ff98 	bl	8001548 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_USART2_UART_Init+0xc4>)
 800161a:	f7ff ff7f 	bl	800151c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_USART2_UART_Init+0xc4>)
 8001620:	f7ff ff6c 	bl	80014fc <LL_USART_Enable>

}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40004400 	.word	0x40004400

08001630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001634:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001636:	e003      	b.n	8001640 <LoopCopyDataInit>

08001638 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800163a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800163c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800163e:	3104      	adds	r1, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001644:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001646:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001648:	d3f6      	bcc.n	8001638 <CopyDataInit>
	ldr	r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopForever+0x12>)
	b	LoopFillZerobss
 800164c:	e002      	b.n	8001654 <LoopFillZerobss>

0800164e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800164e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001650:	f842 3b04 	str.w	r3, [r2], #4

08001654 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <LoopForever+0x16>)
	cmp	r2, r3
 8001656:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001658:	d3f9      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165a:	f7ff fd3b 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f001 fae5 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001662:	f7ff fc49 	bl	8000ef8 <main>

08001666 <LoopForever>:

LoopForever:
    b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001668:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800166c:	0800307c 	.word	0x0800307c
	ldr	r0, =_sdata
 8001670:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001674:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001678:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 800167c:	2000002c 	.word	0x2000002c

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>

08001682 <LL_DAC_IsEnabled>:
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	429a      	cmp	r2, r3
 80016ac:	bf0c      	ite	eq
 80016ae:	2301      	moveq	r3, #1
 80016b0:	2300      	movne	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff ffd5 	bl	8001682 <LL_DAC_IsEnabled>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13a      	bne.n	8001754 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01e      	beq.n	8001724 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	f640 71fa 	movw	r1, #4090	; 0xffa
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4319      	orrs	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4319      	orrs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4319      	orrs	r1, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e019      	b.n	8001758 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	21fa      	movs	r1, #250	; 0xfa
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4319      	orrs	r1, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	431a      	orrs	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e001      	b.n	8001758 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001758:	7dfb      	ldrb	r3, [r7, #23]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001762:	b480      	push	{r7}
 8001764:	b089      	sub	sp, #36	; 0x24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	613b      	str	r3, [r7, #16]
  return result;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2103      	movs	r1, #3
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	401a      	ands	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	61bb      	str	r3, [r7, #24]
  return result;
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	431a      	orrs	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3724      	adds	r7, #36	; 0x24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	401a      	ands	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	613b      	str	r3, [r7, #16]
  return result;
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2103      	movs	r1, #3
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	61bb      	str	r3, [r7, #24]
  return result;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	431a      	orrs	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001842:	bf00      	nop
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800184e:	b480      	push	{r7}
 8001850:	b089      	sub	sp, #36	; 0x24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	613b      	str	r3, [r7, #16]
  return result;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2103      	movs	r1, #3
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	61bb      	str	r3, [r7, #24]
  return result;
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	60da      	str	r2, [r3, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3724      	adds	r7, #36	; 0x24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	613b      	str	r3, [r7, #16]
  return result;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	210f      	movs	r1, #15
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	61bb      	str	r3, [r7, #24]
  return result;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	431a      	orrs	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800190a:	b480      	push	{r7}
 800190c:	b089      	sub	sp, #36	; 0x24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	613b      	str	r3, [r7, #16]
  return result;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	210f      	movs	r1, #15
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	61bb      	str	r3, [r7, #24]
  return result;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	431a      	orrs	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001960:	bf00      	nop
 8001962:	3724      	adds	r7, #36	; 0x24
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	613b      	str	r3, [r7, #16]
  return result;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800198e:	e049      	b.n	8001a24 <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d03b      	beq.n	8001a1e <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	69b9      	ldr	r1, [r7, #24]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fed7 	bl	8001762 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d003      	beq.n	80019c4 <LL_GPIO_Init+0x58>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d106      	bne.n	80019d2 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	461a      	mov	r2, r3
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff0f 	bl	80017f0 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	461a      	mov	r2, r3
 80019d8:	69b9      	ldr	r1, [r7, #24]
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ff37 	bl	800184e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d11a      	bne.n	8001a1e <LL_GPIO_Init+0xb2>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	60bb      	str	r3, [r7, #8]
  return result;
 80019f4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d807      	bhi.n	8001a10 <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	461a      	mov	r2, r3
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff4f 	bl	80018ac <LL_GPIO_SetAFPin_0_7>
 8001a0e:	e006      	b.n	8001a1e <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	461a      	mov	r2, r3
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff76 	bl	800190a <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ae      	bne.n	8001990 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d003      	beq.n	8001a42 <LL_GPIO_Init+0xd6>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6819      	ldr	r1, [r3, #0]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff feb7 	bl	80017c0 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <LL_RCC_HSI_IsReady>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <LL_RCC_HSI_IsReady+0x20>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000

08001a80 <LL_RCC_LSE_IsReady>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <LL_RCC_LSE_IsReady+0x20>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <LL_RCC_GetSysClkSource>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <LL_RCC_GetSysClkSource+0x18>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <LL_RCC_GetAHBPrescaler>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <LL_RCC_GetAHBPrescaler+0x18>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_RCC_GetAPB1Prescaler>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <LL_RCC_GetAPB2Prescaler>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000

08001b14 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <LL_RCC_GetUSARTClockSource+0x28>)
 8001b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b20:	2103      	movs	r1, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	4313      	orrs	r3, r2
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000

08001b40 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <LL_RCC_PLL_GetMainSource+0x18>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000

08001b5c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000

08001b78 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <LL_RCC_PLL_GetPrediv+0x18>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f003 030f 	and.w	r3, r3, #15
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b9c:	f000 f860 	bl	8001c60 <RCC_GetSystemClockFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f87a 	bl	8001ca4 <RCC_GetHCLKClockFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f888 	bl	8001cd0 <RCC_GetPCLK1ClockFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f894 	bl	8001cf8 <RCC_GetPCLK2ClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60da      	str	r2, [r3, #12]
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d12a      	bne.n	8001c48 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ff8e 	bl	8001b14 <LL_RCC_GetUSARTClockSource>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d00f      	beq.n	8001c1e <LL_RCC_GetUSARTClockFreq+0x3e>
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d005      	beq.n	8001c0e <LL_RCC_GetUSARTClockFreq+0x2e>
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d114      	bne.n	8001c30 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001c06:	f000 f82b 	bl	8001c60 <RCC_GetSystemClockFreq>
 8001c0a:	60f8      	str	r0, [r7, #12]
        break;
 8001c0c:	e021      	b.n	8001c52 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001c0e:	f7ff ff25 	bl	8001a5c <LL_RCC_HSI_IsReady>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d019      	beq.n	8001c4c <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001c1a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c1c:	e016      	b.n	8001c4c <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001c1e:	f7ff ff2f 	bl	8001a80 <LL_RCC_LSE_IsReady>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c2e:	e00f      	b.n	8001c50 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c30:	f000 f816 	bl	8001c60 <RCC_GetSystemClockFreq>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f834 	bl	8001ca4 <RCC_GetHCLKClockFreq>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f846 	bl	8001cd0 <RCC_GetPCLK1ClockFreq>
 8001c44:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001c46:	e004      	b.n	8001c52 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001c48:	bf00      	nop
 8001c4a:	e002      	b.n	8001c52 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001c50:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	007a1200 	.word	0x007a1200

08001c60 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c6a:	f7ff ff1b 	bl	8001aa4 <LL_RCC_GetSysClkSource>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d006      	beq.n	8001c82 <RCC_GetSystemClockFreq+0x22>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d007      	beq.n	8001c88 <RCC_GetSystemClockFreq+0x28>
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <RCC_GetSystemClockFreq+0x40>)
 8001c7e:	607b      	str	r3, [r7, #4]
      break;
 8001c80:	e009      	b.n	8001c96 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <RCC_GetSystemClockFreq+0x40>)
 8001c84:	607b      	str	r3, [r7, #4]
      break;
 8001c86:	e006      	b.n	8001c96 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001c88:	f000 f84a 	bl	8001d20 <RCC_PLL_GetFreqDomain_SYS>
 8001c8c:	6078      	str	r0, [r7, #4]
      break;
 8001c8e:	e002      	b.n	8001c96 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <RCC_GetSystemClockFreq+0x40>)
 8001c92:	607b      	str	r3, [r7, #4]
      break;
 8001c94:	bf00      	nop
  }

  return frequency;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	007a1200 	.word	0x007a1200

08001ca4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001cac:	f7ff ff08 	bl	8001ac0 <LL_RCC_GetAHBPrescaler>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <RCC_GetHCLKClockFreq+0x28>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	40d3      	lsrs	r3, r2
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08002c8c 	.word	0x08002c8c

08001cd0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001cd8:	f7ff ff00 	bl	8001adc <LL_RCC_GetAPB1Prescaler>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	40d3      	lsrs	r3, r2
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08002c9c 	.word	0x08002c9c

08001cf8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001d00:	f7ff fefa 	bl	8001af8 <LL_RCC_GetAPB2Prescaler>
 8001d04:	4603      	mov	r3, r0
 8001d06:	0adb      	lsrs	r3, r3, #11
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <RCC_GetPCLK2ClockFreq+0x24>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	40d3      	lsrs	r3, r2
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08002c9c 	.word	0x08002c9c

08001d20 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001d2e:	f7ff ff07 	bl	8001b40 <LL_RCC_PLL_GetMainSource>
 8001d32:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3e:	d003      	beq.n	8001d48 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001d40:	e005      	b.n	8001d4e <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d44:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001d46:	e005      	b.n	8001d54 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001d4a:	60fb      	str	r3, [r7, #12]
      break;
 8001d4c:	e002      	b.n	8001d54 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001d50:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001d52:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001d54:	f7ff ff10 	bl	8001b78 <LL_RCC_PLL_GetPrediv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	fbb2 f4f3 	udiv	r4, r2, r3
 8001d62:	f7ff fefb 	bl	8001b5c <LL_RCC_PLL_GetMultiplicator>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	fa92 f2a2 	rbit	r2, r2
 8001d78:	603a      	str	r2, [r7, #0]
  return result;
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	40d3      	lsrs	r3, r2
 8001d84:	3302      	adds	r3, #2
 8001d86:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd90      	pop	{r4, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	003d0900 	.word	0x003d0900
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <LL_TIM_SetPrescaler>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_TIM_SetAutoReload>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_TIM_SetRepetitionCounter>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	615a      	str	r2, [r3, #20]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <LL_TIM_Init+0xd0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <LL_TIM_Init+0x28>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d003      	beq.n	8001e38 <LL_TIM_Init+0x28>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <LL_TIM_Init+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d106      	bne.n	8001e46 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <LL_TIM_Init+0xd0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <LL_TIM_Init+0x66>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e54:	d00f      	beq.n	8001e76 <LL_TIM_Init+0x66>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <LL_TIM_Init+0xd4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00b      	beq.n	8001e76 <LL_TIM_Init+0x66>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <LL_TIM_Init+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <LL_TIM_Init+0x66>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a20      	ldr	r2, [pc, #128]	; (8001eec <LL_TIM_Init+0xdc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <LL_TIM_Init+0x66>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <LL_TIM_Init+0xe0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d106      	bne.n	8001e84 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff91 	bl	8001db8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff7d 	bl	8001d9c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LL_TIM_Init+0xd0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00b      	beq.n	8001ec2 <LL_TIM_Init+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <LL_TIM_Init+0xd8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <LL_TIM_Init+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <LL_TIM_Init+0xdc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <LL_TIM_Init+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <LL_TIM_Init+0xe0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d105      	bne.n	8001ece <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7c1b      	ldrb	r3, [r3, #16]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff83 	bl	8001dd4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ff8e 	bl	8001df0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40014400 	.word	0x40014400
 8001ef0:	40014800 	.word	0x40014800

08001ef4 <LL_USART_IsEnabled>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <LL_USART_IsEnabled+0x18>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <LL_USART_IsEnabled+0x1a>
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_USART_SetStopBitsLength>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_USART_SetHWFlowCtrl>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	609a      	str	r2, [r3, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_USART_SetBaudRate>:
{
 8001f66:	b490      	push	{r4, r7}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7a:	d116      	bne.n	8001faa <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	005a      	lsls	r2, r3, #1
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	441a      	add	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001f96:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	60dc      	str	r4, [r3, #12]
}
 8001fa8:	e00a      	b.n	8001fc0 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	085a      	lsrs	r2, r3, #1
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	441a      	add	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	60da      	str	r2, [r3, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc90      	pop	{r4, r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff88 	bl	8001ef4 <LL_USART_IsEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d14e      	bne.n	8002088 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <LL_USART_Init+0xc8>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	6851      	ldr	r1, [r2, #4]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	6912      	ldr	r2, [r2, #16]
 8002000:	4311      	orrs	r1, r2
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6992      	ldr	r2, [r2, #24]
 8002006:	430a      	orrs	r2, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff80 	bl	8001f1a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff8d 	bl	8001f40 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <LL_USART_Init+0xcc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d104      	bne.n	8002038 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fdd6 	bl	8001be0 <LL_RCC_GetUSARTClockFreq>
 8002034:	61b8      	str	r0, [r7, #24]
 8002036:	e016      	b.n	8002066 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <LL_USART_Init+0xd0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d107      	bne.n	8002050 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fda5 	bl	8001b94 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	e00a      	b.n	8002066 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <LL_USART_Init+0xd4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d106      	bne.n	8002066 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fd99 	bl	8001b94 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff6f 	bl	8001f66 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002088:	7ffb      	ldrb	r3, [r7, #31]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	efff69f3 	.word	0xefff69f3
 8002098:	40013800 	.word	0x40013800
 800209c:	40004400 	.word	0x40004400
 80020a0:	40004800 	.word	0x40004800

080020a4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <LL_InitTick+0x30>)
 80020b8:	3b01      	subs	r3, #1
 80020ba:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <LL_InitTick+0x30>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <LL_InitTick+0x30>)
 80020c4:	2205      	movs	r2, #5
 80020c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e010 	.word	0xe000e010

080020d8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80020e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ffdd 	bl	80020a4 <LL_InitTick>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <LL_SetSystemCoreClock+0x1c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000

08002114 <cosf>:
 8002114:	ee10 3a10 	vmov	r3, s0
 8002118:	b507      	push	{r0, r1, r2, lr}
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <cosf+0x78>)
 800211c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002120:	4293      	cmp	r3, r2
 8002122:	dc04      	bgt.n	800212e <cosf+0x1a>
 8002124:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002190 <cosf+0x7c>
 8002128:	f000 f9e4 	bl	80024f4 <__kernel_cosf>
 800212c:	e004      	b.n	8002138 <cosf+0x24>
 800212e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002132:	db04      	blt.n	800213e <cosf+0x2a>
 8002134:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002138:	b003      	add	sp, #12
 800213a:	f85d fb04 	ldr.w	pc, [sp], #4
 800213e:	4668      	mov	r0, sp
 8002140:	f000 f8ac 	bl	800229c <__ieee754_rem_pio2f>
 8002144:	f000 0003 	and.w	r0, r0, #3
 8002148:	2801      	cmp	r0, #1
 800214a:	d007      	beq.n	800215c <cosf+0x48>
 800214c:	2802      	cmp	r0, #2
 800214e:	d00e      	beq.n	800216e <cosf+0x5a>
 8002150:	b9a0      	cbnz	r0, 800217c <cosf+0x68>
 8002152:	eddd 0a01 	vldr	s1, [sp, #4]
 8002156:	ed9d 0a00 	vldr	s0, [sp]
 800215a:	e7e5      	b.n	8002128 <cosf+0x14>
 800215c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002160:	ed9d 0a00 	vldr	s0, [sp]
 8002164:	f000 fca6 	bl	8002ab4 <__kernel_sinf>
 8002168:	eeb1 0a40 	vneg.f32	s0, s0
 800216c:	e7e4      	b.n	8002138 <cosf+0x24>
 800216e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002172:	ed9d 0a00 	vldr	s0, [sp]
 8002176:	f000 f9bd 	bl	80024f4 <__kernel_cosf>
 800217a:	e7f5      	b.n	8002168 <cosf+0x54>
 800217c:	2001      	movs	r0, #1
 800217e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002182:	ed9d 0a00 	vldr	s0, [sp]
 8002186:	f000 fc95 	bl	8002ab4 <__kernel_sinf>
 800218a:	e7d5      	b.n	8002138 <cosf+0x24>
 800218c:	3f490fd8 	.word	0x3f490fd8
 8002190:	00000000 	.word	0x00000000

08002194 <floorf>:
 8002194:	ee10 3a10 	vmov	r3, s0
 8002198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800219c:	0dca      	lsrs	r2, r1, #23
 800219e:	3a7f      	subs	r2, #127	; 0x7f
 80021a0:	2a16      	cmp	r2, #22
 80021a2:	dc2a      	bgt.n	80021fa <floorf+0x66>
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	da11      	bge.n	80021cc <floorf+0x38>
 80021a8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800220c <floorf+0x78>
 80021ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80021b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	dd05      	ble.n	80021c6 <floorf+0x32>
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da23      	bge.n	8002206 <floorf+0x72>
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <floorf+0x7c>)
 80021c0:	2900      	cmp	r1, #0
 80021c2:	bf18      	it	ne
 80021c4:	4613      	movne	r3, r2
 80021c6:	ee00 3a10 	vmov	s0, r3
 80021ca:	4770      	bx	lr
 80021cc:	4911      	ldr	r1, [pc, #68]	; (8002214 <floorf+0x80>)
 80021ce:	4111      	asrs	r1, r2
 80021d0:	420b      	tst	r3, r1
 80021d2:	d0fa      	beq.n	80021ca <floorf+0x36>
 80021d4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800220c <floorf+0x78>
 80021d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80021dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	ddef      	ble.n	80021c6 <floorf+0x32>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bfbe      	ittt	lt
 80021ea:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80021ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80021f2:	189b      	addlt	r3, r3, r2
 80021f4:	ea23 0301 	bic.w	r3, r3, r1
 80021f8:	e7e5      	b.n	80021c6 <floorf+0x32>
 80021fa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80021fe:	d3e4      	bcc.n	80021ca <floorf+0x36>
 8002200:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002204:	4770      	bx	lr
 8002206:	2300      	movs	r3, #0
 8002208:	e7dd      	b.n	80021c6 <floorf+0x32>
 800220a:	bf00      	nop
 800220c:	7149f2ca 	.word	0x7149f2ca
 8002210:	bf800000 	.word	0xbf800000
 8002214:	007fffff 	.word	0x007fffff

08002218 <sinf>:
 8002218:	ee10 3a10 	vmov	r3, s0
 800221c:	b507      	push	{r0, r1, r2, lr}
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <sinf+0x7c>)
 8002220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002224:	4293      	cmp	r3, r2
 8002226:	dc05      	bgt.n	8002234 <sinf+0x1c>
 8002228:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002298 <sinf+0x80>
 800222c:	2000      	movs	r0, #0
 800222e:	f000 fc41 	bl	8002ab4 <__kernel_sinf>
 8002232:	e004      	b.n	800223e <sinf+0x26>
 8002234:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002238:	db04      	blt.n	8002244 <sinf+0x2c>
 800223a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800223e:	b003      	add	sp, #12
 8002240:	f85d fb04 	ldr.w	pc, [sp], #4
 8002244:	4668      	mov	r0, sp
 8002246:	f000 f829 	bl	800229c <__ieee754_rem_pio2f>
 800224a:	f000 0003 	and.w	r0, r0, #3
 800224e:	2801      	cmp	r0, #1
 8002250:	d008      	beq.n	8002264 <sinf+0x4c>
 8002252:	2802      	cmp	r0, #2
 8002254:	d00d      	beq.n	8002272 <sinf+0x5a>
 8002256:	b9b0      	cbnz	r0, 8002286 <sinf+0x6e>
 8002258:	2001      	movs	r0, #1
 800225a:	eddd 0a01 	vldr	s1, [sp, #4]
 800225e:	ed9d 0a00 	vldr	s0, [sp]
 8002262:	e7e4      	b.n	800222e <sinf+0x16>
 8002264:	eddd 0a01 	vldr	s1, [sp, #4]
 8002268:	ed9d 0a00 	vldr	s0, [sp]
 800226c:	f000 f942 	bl	80024f4 <__kernel_cosf>
 8002270:	e7e5      	b.n	800223e <sinf+0x26>
 8002272:	2001      	movs	r0, #1
 8002274:	eddd 0a01 	vldr	s1, [sp, #4]
 8002278:	ed9d 0a00 	vldr	s0, [sp]
 800227c:	f000 fc1a 	bl	8002ab4 <__kernel_sinf>
 8002280:	eeb1 0a40 	vneg.f32	s0, s0
 8002284:	e7db      	b.n	800223e <sinf+0x26>
 8002286:	eddd 0a01 	vldr	s1, [sp, #4]
 800228a:	ed9d 0a00 	vldr	s0, [sp]
 800228e:	f000 f931 	bl	80024f4 <__kernel_cosf>
 8002292:	e7f5      	b.n	8002280 <sinf+0x68>
 8002294:	3f490fd8 	.word	0x3f490fd8
 8002298:	00000000 	.word	0x00000000

0800229c <__ieee754_rem_pio2f>:
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	ee10 6a10 	vmov	r6, s0
 80022a2:	4b86      	ldr	r3, [pc, #536]	; (80024bc <__ieee754_rem_pio2f+0x220>)
 80022a4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80022a8:	429c      	cmp	r4, r3
 80022aa:	b087      	sub	sp, #28
 80022ac:	4605      	mov	r5, r0
 80022ae:	dc05      	bgt.n	80022bc <__ieee754_rem_pio2f+0x20>
 80022b0:	2300      	movs	r3, #0
 80022b2:	ed85 0a00 	vstr	s0, [r5]
 80022b6:	6043      	str	r3, [r0, #4]
 80022b8:	2000      	movs	r0, #0
 80022ba:	e020      	b.n	80022fe <__ieee754_rem_pio2f+0x62>
 80022bc:	4b80      	ldr	r3, [pc, #512]	; (80024c0 <__ieee754_rem_pio2f+0x224>)
 80022be:	429c      	cmp	r4, r3
 80022c0:	dc38      	bgt.n	8002334 <__ieee754_rem_pio2f+0x98>
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	f024 040f 	bic.w	r4, r4, #15
 80022c8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80024c4 <__ieee754_rem_pio2f+0x228>
 80022cc:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <__ieee754_rem_pio2f+0x22c>)
 80022ce:	dd18      	ble.n	8002302 <__ieee754_rem_pio2f+0x66>
 80022d0:	429c      	cmp	r4, r3
 80022d2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80022d6:	bf09      	itett	eq
 80022d8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80024cc <__ieee754_rem_pio2f+0x230>
 80022dc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80024d0 <__ieee754_rem_pio2f+0x234>
 80022e0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80022e4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80024d4 <__ieee754_rem_pio2f+0x238>
 80022e8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80022ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80022f0:	edc0 6a00 	vstr	s13, [r0]
 80022f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80022fc:	2001      	movs	r0, #1
 80022fe:	b007      	add	sp, #28
 8002300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002302:	429c      	cmp	r4, r3
 8002304:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002308:	bf09      	itett	eq
 800230a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80024cc <__ieee754_rem_pio2f+0x230>
 800230e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80024d0 <__ieee754_rem_pio2f+0x234>
 8002312:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002316:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80024d4 <__ieee754_rem_pio2f+0x238>
 800231a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800231e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002322:	edc0 6a00 	vstr	s13, [r0]
 8002326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800232a:	edc0 7a01 	vstr	s15, [r0, #4]
 800232e:	f04f 30ff 	mov.w	r0, #4294967295
 8002332:	e7e4      	b.n	80022fe <__ieee754_rem_pio2f+0x62>
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <__ieee754_rem_pio2f+0x23c>)
 8002336:	429c      	cmp	r4, r3
 8002338:	dc71      	bgt.n	800241e <__ieee754_rem_pio2f+0x182>
 800233a:	f000 fc03 	bl	8002b44 <fabsf>
 800233e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80024dc <__ieee754_rem_pio2f+0x240>
 8002342:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002346:	eee0 7a07 	vfma.f32	s15, s0, s14
 800234a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002352:	ee17 0a90 	vmov	r0, s15
 8002356:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80024c4 <__ieee754_rem_pio2f+0x228>
 800235a:	eeb1 7a46 	vneg.f32	s14, s12
 800235e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002362:	281f      	cmp	r0, #31
 8002364:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80024d0 <__ieee754_rem_pio2f+0x234>
 8002368:	ee66 7a27 	vmul.f32	s15, s12, s15
 800236c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002370:	ee16 3a90 	vmov	r3, s13
 8002374:	dc1c      	bgt.n	80023b0 <__ieee754_rem_pio2f+0x114>
 8002376:	1e47      	subs	r7, r0, #1
 8002378:	4959      	ldr	r1, [pc, #356]	; (80024e0 <__ieee754_rem_pio2f+0x244>)
 800237a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800237e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8002382:	428a      	cmp	r2, r1
 8002384:	d014      	beq.n	80023b0 <__ieee754_rem_pio2f+0x114>
 8002386:	602b      	str	r3, [r5, #0]
 8002388:	ed95 7a00 	vldr	s14, [r5]
 800238c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002390:	2e00      	cmp	r6, #0
 8002392:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002396:	ed85 0a01 	vstr	s0, [r5, #4]
 800239a:	dab0      	bge.n	80022fe <__ieee754_rem_pio2f+0x62>
 800239c:	eeb1 7a47 	vneg.f32	s14, s14
 80023a0:	eeb1 0a40 	vneg.f32	s0, s0
 80023a4:	ed85 7a00 	vstr	s14, [r5]
 80023a8:	ed85 0a01 	vstr	s0, [r5, #4]
 80023ac:	4240      	negs	r0, r0
 80023ae:	e7a6      	b.n	80022fe <__ieee754_rem_pio2f+0x62>
 80023b0:	15e4      	asrs	r4, r4, #23
 80023b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80023b6:	1aa2      	subs	r2, r4, r2
 80023b8:	2a08      	cmp	r2, #8
 80023ba:	dde4      	ble.n	8002386 <__ieee754_rem_pio2f+0xea>
 80023bc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80024cc <__ieee754_rem_pio2f+0x230>
 80023c0:	eef0 6a40 	vmov.f32	s13, s0
 80023c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80023c8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80023cc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80023d0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80024d4 <__ieee754_rem_pio2f+0x238>
 80023d4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80023d8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
 80023e0:	ee15 3a90 	vmov	r3, s11
 80023e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80023e8:	1aa4      	subs	r4, r4, r2
 80023ea:	2c19      	cmp	r4, #25
 80023ec:	dc04      	bgt.n	80023f8 <__ieee754_rem_pio2f+0x15c>
 80023ee:	edc5 5a00 	vstr	s11, [r5]
 80023f2:	eeb0 0a66 	vmov.f32	s0, s13
 80023f6:	e7c7      	b.n	8002388 <__ieee754_rem_pio2f+0xec>
 80023f8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80024e4 <__ieee754_rem_pio2f+0x248>
 80023fc:	eeb0 0a66 	vmov.f32	s0, s13
 8002400:	eea7 0a25 	vfma.f32	s0, s14, s11
 8002404:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002408:	eee7 7a25 	vfma.f32	s15, s14, s11
 800240c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80024e8 <__ieee754_rem_pio2f+0x24c>
 8002410:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8002414:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002418:	ed85 7a00 	vstr	s14, [r5]
 800241c:	e7b4      	b.n	8002388 <__ieee754_rem_pio2f+0xec>
 800241e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002422:	db06      	blt.n	8002432 <__ieee754_rem_pio2f+0x196>
 8002424:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002428:	edc0 7a01 	vstr	s15, [r0, #4]
 800242c:	edc0 7a00 	vstr	s15, [r0]
 8002430:	e742      	b.n	80022b8 <__ieee754_rem_pio2f+0x1c>
 8002432:	15e2      	asrs	r2, r4, #23
 8002434:	3a86      	subs	r2, #134	; 0x86
 8002436:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002442:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80024ec <__ieee754_rem_pio2f+0x250>
 8002446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800244a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800244e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002456:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800245a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800245e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002462:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002466:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800246a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	edcd 7a05 	vstr	s15, [sp, #20]
 8002476:	d11e      	bne.n	80024b6 <__ieee754_rem_pio2f+0x21a>
 8002478:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2302      	movne	r3, #2
 8002486:	491a      	ldr	r1, [pc, #104]	; (80024f0 <__ieee754_rem_pio2f+0x254>)
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	2102      	movs	r1, #2
 800248c:	9100      	str	r1, [sp, #0]
 800248e:	a803      	add	r0, sp, #12
 8002490:	4629      	mov	r1, r5
 8002492:	f000 f88d 	bl	80025b0 <__kernel_rem_pio2f>
 8002496:	2e00      	cmp	r6, #0
 8002498:	f6bf af31 	bge.w	80022fe <__ieee754_rem_pio2f+0x62>
 800249c:	edd5 7a00 	vldr	s15, [r5]
 80024a0:	eef1 7a67 	vneg.f32	s15, s15
 80024a4:	edc5 7a00 	vstr	s15, [r5]
 80024a8:	edd5 7a01 	vldr	s15, [r5, #4]
 80024ac:	eef1 7a67 	vneg.f32	s15, s15
 80024b0:	edc5 7a01 	vstr	s15, [r5, #4]
 80024b4:	e77a      	b.n	80023ac <__ieee754_rem_pio2f+0x110>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e7e5      	b.n	8002486 <__ieee754_rem_pio2f+0x1ea>
 80024ba:	bf00      	nop
 80024bc:	3f490fd8 	.word	0x3f490fd8
 80024c0:	4016cbe3 	.word	0x4016cbe3
 80024c4:	3fc90f80 	.word	0x3fc90f80
 80024c8:	3fc90fd0 	.word	0x3fc90fd0
 80024cc:	37354400 	.word	0x37354400
 80024d0:	37354443 	.word	0x37354443
 80024d4:	2e85a308 	.word	0x2e85a308
 80024d8:	43490f80 	.word	0x43490f80
 80024dc:	3f22f984 	.word	0x3f22f984
 80024e0:	08002ca4 	.word	0x08002ca4
 80024e4:	2e85a300 	.word	0x2e85a300
 80024e8:	248d3132 	.word	0x248d3132
 80024ec:	43800000 	.word	0x43800000
 80024f0:	08002d24 	.word	0x08002d24

080024f4 <__kernel_cosf>:
 80024f4:	ee10 3a10 	vmov	r3, s0
 80024f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002504:	da05      	bge.n	8002512 <__kernel_cosf+0x1e>
 8002506:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800250a:	ee17 2a90 	vmov	r2, s15
 800250e:	2a00      	cmp	r2, #0
 8002510:	d03b      	beq.n	800258a <__kernel_cosf+0x96>
 8002512:	ee20 6a00 	vmul.f32	s12, s0, s0
 8002516:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800251a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002590 <__kernel_cosf+0x9c>
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <__kernel_cosf+0xa0>)
 8002520:	ee66 7a07 	vmul.f32	s15, s12, s14
 8002524:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002598 <__kernel_cosf+0xa4>
 8002528:	eea6 7a25 	vfma.f32	s14, s12, s11
 800252c:	4293      	cmp	r3, r2
 800252e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800259c <__kernel_cosf+0xa8>
 8002532:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002536:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025a0 <__kernel_cosf+0xac>
 800253a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800253e:	eddf 5a19 	vldr	s11, [pc, #100]	; 80025a4 <__kernel_cosf+0xb0>
 8002542:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002546:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80025a8 <__kernel_cosf+0xb4>
 800254a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800254e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002552:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002556:	eee6 0a07 	vfma.f32	s1, s12, s14
 800255a:	dc04      	bgt.n	8002566 <__kernel_cosf+0x72>
 800255c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8002560:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002564:	4770      	bx	lr
 8002566:	4a11      	ldr	r2, [pc, #68]	; (80025ac <__kernel_cosf+0xb8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	bfda      	itte	le
 800256c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002570:	ee07 3a10 	vmovle	s14, r3
 8002574:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8002578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800257c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8002580:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002584:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002588:	4770      	bx	lr
 800258a:	eeb0 0a66 	vmov.f32	s0, s13
 800258e:	4770      	bx	lr
 8002590:	ad47d74e 	.word	0xad47d74e
 8002594:	3e999999 	.word	0x3e999999
 8002598:	310f74f6 	.word	0x310f74f6
 800259c:	b493f27c 	.word	0xb493f27c
 80025a0:	37d00d01 	.word	0x37d00d01
 80025a4:	bab60b61 	.word	0xbab60b61
 80025a8:	3d2aaaab 	.word	0x3d2aaaab
 80025ac:	3f480000 	.word	0x3f480000

080025b0 <__kernel_rem_pio2f>:
 80025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	ed2d 8b04 	vpush	{d8-d9}
 80025b8:	b0d7      	sub	sp, #348	; 0x15c
 80025ba:	469b      	mov	fp, r3
 80025bc:	460e      	mov	r6, r1
 80025be:	4bbe      	ldr	r3, [pc, #760]	; (80028b8 <__kernel_rem_pio2f+0x308>)
 80025c0:	9964      	ldr	r1, [sp, #400]	; 0x190
 80025c2:	9002      	str	r0, [sp, #8]
 80025c4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80025c8:	9865      	ldr	r0, [sp, #404]	; 0x194
 80025ca:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80028c8 <__kernel_rem_pio2f+0x318>
 80025ce:	1ed1      	subs	r1, r2, #3
 80025d0:	2308      	movs	r3, #8
 80025d2:	fb91 f1f3 	sdiv	r1, r1, r3
 80025d6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80025da:	f10b 3aff 	add.w	sl, fp, #4294967295
 80025de:	1c4c      	adds	r4, r1, #1
 80025e0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80025e4:	eba1 050a 	sub.w	r5, r1, sl
 80025e8:	aa1a      	add	r2, sp, #104	; 0x68
 80025ea:	eb09 070a 	add.w	r7, r9, sl
 80025ee:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80025f2:	4696      	mov	lr, r2
 80025f4:	2300      	movs	r3, #0
 80025f6:	42bb      	cmp	r3, r7
 80025f8:	dd0f      	ble.n	800261a <__kernel_rem_pio2f+0x6a>
 80025fa:	af42      	add	r7, sp, #264	; 0x108
 80025fc:	2200      	movs	r2, #0
 80025fe:	454a      	cmp	r2, r9
 8002600:	dc27      	bgt.n	8002652 <__kernel_rem_pio2f+0xa2>
 8002602:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8002606:	eb0b 0302 	add.w	r3, fp, r2
 800260a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800260e:	9d02      	ldr	r5, [sp, #8]
 8002610:	eddf 7aad 	vldr	s15, [pc, #692]	; 80028c8 <__kernel_rem_pio2f+0x318>
 8002614:	f04f 0c00 	mov.w	ip, #0
 8002618:	e015      	b.n	8002646 <__kernel_rem_pio2f+0x96>
 800261a:	42dd      	cmn	r5, r3
 800261c:	bf5d      	ittte	pl
 800261e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8002622:	ee07 2a90 	vmovpl	s15, r2
 8002626:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800262a:	eef0 7a47 	vmovmi.f32	s15, s14
 800262e:	ecee 7a01 	vstmia	lr!, {s15}
 8002632:	3301      	adds	r3, #1
 8002634:	e7df      	b.n	80025f6 <__kernel_rem_pio2f+0x46>
 8002636:	ecf5 6a01 	vldmia	r5!, {s13}
 800263a:	ed33 7a01 	vldmdb	r3!, {s14}
 800263e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002642:	f10c 0c01 	add.w	ip, ip, #1
 8002646:	45d4      	cmp	ip, sl
 8002648:	ddf5      	ble.n	8002636 <__kernel_rem_pio2f+0x86>
 800264a:	ece7 7a01 	vstmia	r7!, {s15}
 800264e:	3201      	adds	r2, #1
 8002650:	e7d5      	b.n	80025fe <__kernel_rem_pio2f+0x4e>
 8002652:	ab06      	add	r3, sp, #24
 8002654:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8002658:	9304      	str	r3, [sp, #16]
 800265a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80028c4 <__kernel_rem_pio2f+0x314>
 800265e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80028c0 <__kernel_rem_pio2f+0x310>
 8002662:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002666:	9303      	str	r3, [sp, #12]
 8002668:	464d      	mov	r5, r9
 800266a:	ab56      	add	r3, sp, #344	; 0x158
 800266c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8002670:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002674:	3f01      	subs	r7, #1
 8002676:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800267a:	00bf      	lsls	r7, r7, #2
 800267c:	ab56      	add	r3, sp, #344	; 0x158
 800267e:	19da      	adds	r2, r3, r7
 8002680:	3a4c      	subs	r2, #76	; 0x4c
 8002682:	2300      	movs	r3, #0
 8002684:	1ae9      	subs	r1, r5, r3
 8002686:	2900      	cmp	r1, #0
 8002688:	dc4c      	bgt.n	8002724 <__kernel_rem_pio2f+0x174>
 800268a:	4620      	mov	r0, r4
 800268c:	f000 fa62 	bl	8002b54 <scalbnf>
 8002690:	eeb0 8a40 	vmov.f32	s16, s0
 8002694:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8002698:	ee28 0a00 	vmul.f32	s0, s16, s0
 800269c:	f7ff fd7a 	bl	8002194 <floorf>
 80026a0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80026a4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80026ae:	edcd 7a01 	vstr	s15, [sp, #4]
 80026b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80026ba:	dd48      	ble.n	800274e <__kernel_rem_pio2f+0x19e>
 80026bc:	1e69      	subs	r1, r5, #1
 80026be:	ab06      	add	r3, sp, #24
 80026c0:	f1c4 0008 	rsb	r0, r4, #8
 80026c4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80026c8:	9a01      	ldr	r2, [sp, #4]
 80026ca:	fa4c f300 	asr.w	r3, ip, r0
 80026ce:	441a      	add	r2, r3
 80026d0:	4083      	lsls	r3, r0
 80026d2:	9201      	str	r2, [sp, #4]
 80026d4:	ebac 0203 	sub.w	r2, ip, r3
 80026d8:	ab06      	add	r3, sp, #24
 80026da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80026de:	f1c4 0307 	rsb	r3, r4, #7
 80026e2:	fa42 f803 	asr.w	r8, r2, r3
 80026e6:	f1b8 0f00 	cmp.w	r8, #0
 80026ea:	dd41      	ble.n	8002770 <__kernel_rem_pio2f+0x1c0>
 80026ec:	9b01      	ldr	r3, [sp, #4]
 80026ee:	2000      	movs	r0, #0
 80026f0:	3301      	adds	r3, #1
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	4601      	mov	r1, r0
 80026f6:	4285      	cmp	r5, r0
 80026f8:	dc6d      	bgt.n	80027d6 <__kernel_rem_pio2f+0x226>
 80026fa:	2c00      	cmp	r4, #0
 80026fc:	dd04      	ble.n	8002708 <__kernel_rem_pio2f+0x158>
 80026fe:	2c01      	cmp	r4, #1
 8002700:	d07e      	beq.n	8002800 <__kernel_rem_pio2f+0x250>
 8002702:	2c02      	cmp	r4, #2
 8002704:	f000 8086 	beq.w	8002814 <__kernel_rem_pio2f+0x264>
 8002708:	f1b8 0f02 	cmp.w	r8, #2
 800270c:	d130      	bne.n	8002770 <__kernel_rem_pio2f+0x1c0>
 800270e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002712:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002716:	b359      	cbz	r1, 8002770 <__kernel_rem_pio2f+0x1c0>
 8002718:	4620      	mov	r0, r4
 800271a:	f000 fa1b 	bl	8002b54 <scalbnf>
 800271e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002722:	e025      	b.n	8002770 <__kernel_rem_pio2f+0x1c0>
 8002724:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002728:	a806      	add	r0, sp, #24
 800272a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002736:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800273a:	ee10 1a10 	vmov	r1, s0
 800273e:	ed32 0a01 	vldmdb	r2!, {s0}
 8002742:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8002746:	ee37 0a80 	vadd.f32	s0, s15, s0
 800274a:	3301      	adds	r3, #1
 800274c:	e79a      	b.n	8002684 <__kernel_rem_pio2f+0xd4>
 800274e:	d106      	bne.n	800275e <__kernel_rem_pio2f+0x1ae>
 8002750:	1e6b      	subs	r3, r5, #1
 8002752:	aa06      	add	r2, sp, #24
 8002754:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002758:	ea4f 2822 	mov.w	r8, r2, asr #8
 800275c:	e7c3      	b.n	80026e6 <__kernel_rem_pio2f+0x136>
 800275e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002762:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	da31      	bge.n	80027d0 <__kernel_rem_pio2f+0x220>
 800276c:	f04f 0800 	mov.w	r8, #0
 8002770:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	f040 80a8 	bne.w	80028cc <__kernel_rem_pio2f+0x31c>
 800277c:	1e6b      	subs	r3, r5, #1
 800277e:	4618      	mov	r0, r3
 8002780:	2200      	movs	r2, #0
 8002782:	4548      	cmp	r0, r9
 8002784:	da4d      	bge.n	8002822 <__kernel_rem_pio2f+0x272>
 8002786:	2a00      	cmp	r2, #0
 8002788:	f000 8087 	beq.w	800289a <__kernel_rem_pio2f+0x2ea>
 800278c:	aa06      	add	r2, sp, #24
 800278e:	3c08      	subs	r4, #8
 8002790:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002794:	2900      	cmp	r1, #0
 8002796:	f000 808d 	beq.w	80028b4 <__kernel_rem_pio2f+0x304>
 800279a:	4620      	mov	r0, r4
 800279c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	f000 f9d7 	bl	8002b54 <scalbnf>
 80027a6:	9b02      	ldr	r3, [sp, #8]
 80027a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80028c4 <__kernel_rem_pio2f+0x314>
 80027ac:	0099      	lsls	r1, r3, #2
 80027ae:	aa42      	add	r2, sp, #264	; 0x108
 80027b0:	1850      	adds	r0, r2, r1
 80027b2:	1d05      	adds	r5, r0, #4
 80027b4:	461c      	mov	r4, r3
 80027b6:	2c00      	cmp	r4, #0
 80027b8:	f280 80b8 	bge.w	800292c <__kernel_rem_pio2f+0x37c>
 80027bc:	2500      	movs	r5, #0
 80027be:	1b5c      	subs	r4, r3, r5
 80027c0:	2c00      	cmp	r4, #0
 80027c2:	f2c0 80d8 	blt.w	8002976 <__kernel_rem_pio2f+0x3c6>
 80027c6:	4f3d      	ldr	r7, [pc, #244]	; (80028bc <__kernel_rem_pio2f+0x30c>)
 80027c8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80028c8 <__kernel_rem_pio2f+0x318>
 80027cc:	2400      	movs	r4, #0
 80027ce:	e0c6      	b.n	800295e <__kernel_rem_pio2f+0x3ae>
 80027d0:	f04f 0802 	mov.w	r8, #2
 80027d4:	e78a      	b.n	80026ec <__kernel_rem_pio2f+0x13c>
 80027d6:	ab06      	add	r3, sp, #24
 80027d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80027dc:	b949      	cbnz	r1, 80027f2 <__kernel_rem_pio2f+0x242>
 80027de:	b12b      	cbz	r3, 80027ec <__kernel_rem_pio2f+0x23c>
 80027e0:	aa06      	add	r2, sp, #24
 80027e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80027e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80027ea:	2301      	movs	r3, #1
 80027ec:	3001      	adds	r0, #1
 80027ee:	4619      	mov	r1, r3
 80027f0:	e781      	b.n	80026f6 <__kernel_rem_pio2f+0x146>
 80027f2:	aa06      	add	r2, sp, #24
 80027f4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80027f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80027fc:	460b      	mov	r3, r1
 80027fe:	e7f5      	b.n	80027ec <__kernel_rem_pio2f+0x23c>
 8002800:	1e68      	subs	r0, r5, #1
 8002802:	ab06      	add	r3, sp, #24
 8002804:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800280c:	aa06      	add	r2, sp, #24
 800280e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002812:	e779      	b.n	8002708 <__kernel_rem_pio2f+0x158>
 8002814:	1e68      	subs	r0, r5, #1
 8002816:	ab06      	add	r3, sp, #24
 8002818:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800281c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002820:	e7f4      	b.n	800280c <__kernel_rem_pio2f+0x25c>
 8002822:	a906      	add	r1, sp, #24
 8002824:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002828:	3801      	subs	r0, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	e7a9      	b.n	8002782 <__kernel_rem_pio2f+0x1d2>
 800282e:	f10c 0c01 	add.w	ip, ip, #1
 8002832:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002836:	2a00      	cmp	r2, #0
 8002838:	d0f9      	beq.n	800282e <__kernel_rem_pio2f+0x27e>
 800283a:	eb0b 0305 	add.w	r3, fp, r5
 800283e:	aa1a      	add	r2, sp, #104	; 0x68
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	1898      	adds	r0, r3, r2
 8002844:	3004      	adds	r0, #4
 8002846:	1c69      	adds	r1, r5, #1
 8002848:	3704      	adds	r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	4465      	add	r5, ip
 800284e:	9005      	str	r0, [sp, #20]
 8002850:	428d      	cmp	r5, r1
 8002852:	f6ff af0a 	blt.w	800266a <__kernel_rem_pio2f+0xba>
 8002856:	a81a      	add	r0, sp, #104	; 0x68
 8002858:	eb02 0c03 	add.w	ip, r2, r3
 800285c:	4484      	add	ip, r0
 800285e:	9803      	ldr	r0, [sp, #12]
 8002860:	f8dd e008 	ldr.w	lr, [sp, #8]
 8002864:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8002868:	9001      	str	r0, [sp, #4]
 800286a:	ee07 0a90 	vmov	s15, r0
 800286e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002872:	9805      	ldr	r0, [sp, #20]
 8002874:	edcc 7a00 	vstr	s15, [ip]
 8002878:	eddf 7a13 	vldr	s15, [pc, #76]	; 80028c8 <__kernel_rem_pio2f+0x318>
 800287c:	eb00 0802 	add.w	r8, r0, r2
 8002880:	f04f 0c00 	mov.w	ip, #0
 8002884:	45d4      	cmp	ip, sl
 8002886:	dd0c      	ble.n	80028a2 <__kernel_rem_pio2f+0x2f2>
 8002888:	eb02 0c07 	add.w	ip, r2, r7
 800288c:	a842      	add	r0, sp, #264	; 0x108
 800288e:	4484      	add	ip, r0
 8002890:	edcc 7a01 	vstr	s15, [ip, #4]
 8002894:	3101      	adds	r1, #1
 8002896:	3204      	adds	r2, #4
 8002898:	e7da      	b.n	8002850 <__kernel_rem_pio2f+0x2a0>
 800289a:	9b04      	ldr	r3, [sp, #16]
 800289c:	f04f 0c01 	mov.w	ip, #1
 80028a0:	e7c7      	b.n	8002832 <__kernel_rem_pio2f+0x282>
 80028a2:	ecfe 6a01 	vldmia	lr!, {s13}
 80028a6:	ed38 7a01 	vldmdb	r8!, {s14}
 80028aa:	f10c 0c01 	add.w	ip, ip, #1
 80028ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80028b2:	e7e7      	b.n	8002884 <__kernel_rem_pio2f+0x2d4>
 80028b4:	3b01      	subs	r3, #1
 80028b6:	e769      	b.n	800278c <__kernel_rem_pio2f+0x1dc>
 80028b8:	08003068 	.word	0x08003068
 80028bc:	0800303c 	.word	0x0800303c
 80028c0:	43800000 	.word	0x43800000
 80028c4:	3b800000 	.word	0x3b800000
 80028c8:	00000000 	.word	0x00000000
 80028cc:	4260      	negs	r0, r4
 80028ce:	eeb0 0a48 	vmov.f32	s0, s16
 80028d2:	f000 f93f 	bl	8002b54 <scalbnf>
 80028d6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80028c0 <__kernel_rem_pio2f+0x310>
 80028da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	db1a      	blt.n	800291a <__kernel_rem_pio2f+0x36a>
 80028e4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80028c4 <__kernel_rem_pio2f+0x314>
 80028e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80028ec:	aa06      	add	r2, sp, #24
 80028ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f2:	a906      	add	r1, sp, #24
 80028f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f8:	3408      	adds	r4, #8
 80028fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80028fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002902:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002906:	ee10 3a10 	vmov	r3, s0
 800290a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800290e:	1c6b      	adds	r3, r5, #1
 8002910:	ee17 2a90 	vmov	r2, s15
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002918:	e73f      	b.n	800279a <__kernel_rem_pio2f+0x1ea>
 800291a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800291e:	aa06      	add	r2, sp, #24
 8002920:	ee10 3a10 	vmov	r3, s0
 8002924:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002928:	462b      	mov	r3, r5
 800292a:	e736      	b.n	800279a <__kernel_rem_pio2f+0x1ea>
 800292c:	aa06      	add	r2, sp, #24
 800292e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002932:	9202      	str	r2, [sp, #8]
 8002934:	ee07 2a90 	vmov	s15, r2
 8002938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800293c:	3c01      	subs	r4, #1
 800293e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002942:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002946:	ed65 7a01 	vstmdb	r5!, {s15}
 800294a:	e734      	b.n	80027b6 <__kernel_rem_pio2f+0x206>
 800294c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8002950:	ecf7 6a01 	vldmia	r7!, {s13}
 8002954:	ed9c 7a00 	vldr	s14, [ip]
 8002958:	eee6 7a87 	vfma.f32	s15, s13, s14
 800295c:	3401      	adds	r4, #1
 800295e:	454c      	cmp	r4, r9
 8002960:	dc01      	bgt.n	8002966 <__kernel_rem_pio2f+0x3b6>
 8002962:	42a5      	cmp	r5, r4
 8002964:	daf2      	bge.n	800294c <__kernel_rem_pio2f+0x39c>
 8002966:	aa56      	add	r2, sp, #344	; 0x158
 8002968:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800296c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8002970:	3501      	adds	r5, #1
 8002972:	3804      	subs	r0, #4
 8002974:	e723      	b.n	80027be <__kernel_rem_pio2f+0x20e>
 8002976:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002978:	2a03      	cmp	r2, #3
 800297a:	d84d      	bhi.n	8002a18 <__kernel_rem_pio2f+0x468>
 800297c:	e8df f002 	tbb	[pc, r2]
 8002980:	021f1f3e 	.word	0x021f1f3e
 8002984:	aa56      	add	r2, sp, #344	; 0x158
 8002986:	4411      	add	r1, r2
 8002988:	399c      	subs	r1, #156	; 0x9c
 800298a:	4608      	mov	r0, r1
 800298c:	461c      	mov	r4, r3
 800298e:	2c00      	cmp	r4, #0
 8002990:	dc5f      	bgt.n	8002a52 <__kernel_rem_pio2f+0x4a2>
 8002992:	4608      	mov	r0, r1
 8002994:	461c      	mov	r4, r3
 8002996:	2c01      	cmp	r4, #1
 8002998:	dc6b      	bgt.n	8002a72 <__kernel_rem_pio2f+0x4c2>
 800299a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80028c8 <__kernel_rem_pio2f+0x318>
 800299e:	2b01      	cmp	r3, #1
 80029a0:	dc77      	bgt.n	8002a92 <__kernel_rem_pio2f+0x4e2>
 80029a2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80029a6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80029aa:	f1b8 0f00 	cmp.w	r8, #0
 80029ae:	d176      	bne.n	8002a9e <__kernel_rem_pio2f+0x4ee>
 80029b0:	edc6 6a00 	vstr	s13, [r6]
 80029b4:	ed86 7a01 	vstr	s14, [r6, #4]
 80029b8:	edc6 7a02 	vstr	s15, [r6, #8]
 80029bc:	e02c      	b.n	8002a18 <__kernel_rem_pio2f+0x468>
 80029be:	aa56      	add	r2, sp, #344	; 0x158
 80029c0:	4411      	add	r1, r2
 80029c2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80028c8 <__kernel_rem_pio2f+0x318>
 80029c6:	399c      	subs	r1, #156	; 0x9c
 80029c8:	4618      	mov	r0, r3
 80029ca:	2800      	cmp	r0, #0
 80029cc:	da32      	bge.n	8002a34 <__kernel_rem_pio2f+0x484>
 80029ce:	f1b8 0f00 	cmp.w	r8, #0
 80029d2:	d035      	beq.n	8002a40 <__kernel_rem_pio2f+0x490>
 80029d4:	eef1 7a47 	vneg.f32	s15, s14
 80029d8:	edc6 7a00 	vstr	s15, [r6]
 80029dc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80029e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e4:	a82f      	add	r0, sp, #188	; 0xbc
 80029e6:	2101      	movs	r1, #1
 80029e8:	428b      	cmp	r3, r1
 80029ea:	da2c      	bge.n	8002a46 <__kernel_rem_pio2f+0x496>
 80029ec:	f1b8 0f00 	cmp.w	r8, #0
 80029f0:	d001      	beq.n	80029f6 <__kernel_rem_pio2f+0x446>
 80029f2:	eef1 7a67 	vneg.f32	s15, s15
 80029f6:	edc6 7a01 	vstr	s15, [r6, #4]
 80029fa:	e00d      	b.n	8002a18 <__kernel_rem_pio2f+0x468>
 80029fc:	aa56      	add	r2, sp, #344	; 0x158
 80029fe:	4411      	add	r1, r2
 8002a00:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80028c8 <__kernel_rem_pio2f+0x318>
 8002a04:	399c      	subs	r1, #156	; 0x9c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da0e      	bge.n	8002a28 <__kernel_rem_pio2f+0x478>
 8002a0a:	f1b8 0f00 	cmp.w	r8, #0
 8002a0e:	d001      	beq.n	8002a14 <__kernel_rem_pio2f+0x464>
 8002a10:	eef1 7a67 	vneg.f32	s15, s15
 8002a14:	edc6 7a00 	vstr	s15, [r6]
 8002a18:	9b01      	ldr	r3, [sp, #4]
 8002a1a:	f003 0007 	and.w	r0, r3, #7
 8002a1e:	b057      	add	sp, #348	; 0x15c
 8002a20:	ecbd 8b04 	vpop	{d8-d9}
 8002a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a28:	ed31 7a01 	vldmdb	r1!, {s14}
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a32:	e7e8      	b.n	8002a06 <__kernel_rem_pio2f+0x456>
 8002a34:	ed71 7a01 	vldmdb	r1!, {s15}
 8002a38:	3801      	subs	r0, #1
 8002a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a3e:	e7c4      	b.n	80029ca <__kernel_rem_pio2f+0x41a>
 8002a40:	eef0 7a47 	vmov.f32	s15, s14
 8002a44:	e7c8      	b.n	80029d8 <__kernel_rem_pio2f+0x428>
 8002a46:	ecb0 7a01 	vldmia	r0!, {s14}
 8002a4a:	3101      	adds	r1, #1
 8002a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a50:	e7ca      	b.n	80029e8 <__kernel_rem_pio2f+0x438>
 8002a52:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002a56:	ed70 6a01 	vldmdb	r0!, {s13}
 8002a5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002a5e:	3c01      	subs	r4, #1
 8002a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a64:	ed00 7a01 	vstr	s14, [r0, #-4]
 8002a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6c:	edc0 7a00 	vstr	s15, [r0]
 8002a70:	e78d      	b.n	800298e <__kernel_rem_pio2f+0x3de>
 8002a72:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002a76:	ed70 6a01 	vldmdb	r0!, {s13}
 8002a7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002a7e:	3c01      	subs	r4, #1
 8002a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a84:	ed00 7a01 	vstr	s14, [r0, #-4]
 8002a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8c:	edc0 7a00 	vstr	s15, [r0]
 8002a90:	e781      	b.n	8002996 <__kernel_rem_pio2f+0x3e6>
 8002a92:	ed31 7a01 	vldmdb	r1!, {s14}
 8002a96:	3b01      	subs	r3, #1
 8002a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9c:	e77f      	b.n	800299e <__kernel_rem_pio2f+0x3ee>
 8002a9e:	eef1 6a66 	vneg.f32	s13, s13
 8002aa2:	eeb1 7a47 	vneg.f32	s14, s14
 8002aa6:	edc6 6a00 	vstr	s13, [r6]
 8002aaa:	ed86 7a01 	vstr	s14, [r6, #4]
 8002aae:	eef1 7a67 	vneg.f32	s15, s15
 8002ab2:	e781      	b.n	80029b8 <__kernel_rem_pio2f+0x408>

08002ab4 <__kernel_sinf>:
 8002ab4:	ee10 3a10 	vmov	r3, s0
 8002ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002ac0:	da04      	bge.n	8002acc <__kernel_sinf+0x18>
 8002ac2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ac6:	ee17 3a90 	vmov	r3, s15
 8002aca:	b35b      	cbz	r3, 8002b24 <__kernel_sinf+0x70>
 8002acc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002ad0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002b28 <__kernel_sinf+0x74>
 8002ad4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002b2c <__kernel_sinf+0x78>
 8002ad8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002adc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002b30 <__kernel_sinf+0x7c>
 8002ae0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002ae4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002b34 <__kernel_sinf+0x80>
 8002ae8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002aec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002b38 <__kernel_sinf+0x84>
 8002af0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002af4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002af8:	b930      	cbnz	r0, 8002b08 <__kernel_sinf+0x54>
 8002afa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002b3c <__kernel_sinf+0x88>
 8002afe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002b02:	eea6 0a26 	vfma.f32	s0, s12, s13
 8002b06:	4770      	bx	lr
 8002b08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002b0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b10:	eee0 7a86 	vfma.f32	s15, s1, s12
 8002b14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002b18:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002b40 <__kernel_sinf+0x8c>
 8002b1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002b20:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2f2ec9d3 	.word	0x2f2ec9d3
 8002b2c:	b2d72f34 	.word	0xb2d72f34
 8002b30:	3638ef1b 	.word	0x3638ef1b
 8002b34:	b9500d01 	.word	0xb9500d01
 8002b38:	3c088889 	.word	0x3c088889
 8002b3c:	be2aaaab 	.word	0xbe2aaaab
 8002b40:	3e2aaaab 	.word	0x3e2aaaab

08002b44 <fabsf>:
 8002b44:	ee10 3a10 	vmov	r3, s0
 8002b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	ee00 3a10 	vmov	s0, r3
 8002b50:	4770      	bx	lr
	...

08002b54 <scalbnf>:
 8002b54:	b508      	push	{r3, lr}
 8002b56:	ee10 2a10 	vmov	r2, s0
 8002b5a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8002b5e:	ed2d 8b02 	vpush	{d8}
 8002b62:	eef0 0a40 	vmov.f32	s1, s0
 8002b66:	d004      	beq.n	8002b72 <scalbnf+0x1e>
 8002b68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002b6c:	d306      	bcc.n	8002b7c <scalbnf+0x28>
 8002b6e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8002b72:	ecbd 8b02 	vpop	{d8}
 8002b76:	eeb0 0a60 	vmov.f32	s0, s1
 8002b7a:	bd08      	pop	{r3, pc}
 8002b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b80:	d21c      	bcs.n	8002bbc <scalbnf+0x68>
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <scalbnf+0xac>)
 8002b84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002c04 <scalbnf+0xb0>
 8002b88:	4298      	cmp	r0, r3
 8002b8a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8002b8e:	db10      	blt.n	8002bb2 <scalbnf+0x5e>
 8002b90:	ee10 2a90 	vmov	r2, s1
 8002b94:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8002b98:	3b19      	subs	r3, #25
 8002b9a:	4403      	add	r3, r0
 8002b9c:	2bfe      	cmp	r3, #254	; 0xfe
 8002b9e:	dd0f      	ble.n	8002bc0 <scalbnf+0x6c>
 8002ba0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8002c08 <scalbnf+0xb4>
 8002ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8002ba8:	f000 f834 	bl	8002c14 <copysignf>
 8002bac:	ee60 0a08 	vmul.f32	s1, s0, s16
 8002bb0:	e7df      	b.n	8002b72 <scalbnf+0x1e>
 8002bb2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002c0c <scalbnf+0xb8>
 8002bb6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002bba:	e7da      	b.n	8002b72 <scalbnf+0x1e>
 8002bbc:	0ddb      	lsrs	r3, r3, #23
 8002bbe:	e7ec      	b.n	8002b9a <scalbnf+0x46>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	dd06      	ble.n	8002bd2 <scalbnf+0x7e>
 8002bc4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002bc8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8002bcc:	ee00 3a90 	vmov	s1, r3
 8002bd0:	e7cf      	b.n	8002b72 <scalbnf+0x1e>
 8002bd2:	f113 0f16 	cmn.w	r3, #22
 8002bd6:	da06      	bge.n	8002be6 <scalbnf+0x92>
 8002bd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002bdc:	4298      	cmp	r0, r3
 8002bde:	dcdf      	bgt.n	8002ba0 <scalbnf+0x4c>
 8002be0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002c0c <scalbnf+0xb8>
 8002be4:	e7de      	b.n	8002ba4 <scalbnf+0x50>
 8002be6:	3319      	adds	r3, #25
 8002be8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8002bec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8002bf0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002c10 <scalbnf+0xbc>
 8002bf4:	ee07 3a10 	vmov	s14, r3
 8002bf8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8002bfc:	e7b9      	b.n	8002b72 <scalbnf+0x1e>
 8002bfe:	bf00      	nop
 8002c00:	ffff3cb0 	.word	0xffff3cb0
 8002c04:	4c000000 	.word	0x4c000000
 8002c08:	7149f2ca 	.word	0x7149f2ca
 8002c0c:	0da24260 	.word	0x0da24260
 8002c10:	33000000 	.word	0x33000000

08002c14 <copysignf>:
 8002c14:	ee10 3a10 	vmov	r3, s0
 8002c18:	ee10 2a90 	vmov	r2, s1
 8002c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c24:	4313      	orrs	r3, r2
 8002c26:	ee00 3a10 	vmov	s0, r3
 8002c2a:	4770      	bx	lr

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	4e0d      	ldr	r6, [pc, #52]	; (8002c64 <__libc_init_array+0x38>)
 8002c30:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c32:	1ba4      	subs	r4, r4, r6
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	2500      	movs	r5, #0
 8002c38:	42a5      	cmp	r5, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	4e0b      	ldr	r6, [pc, #44]	; (8002c6c <__libc_init_array+0x40>)
 8002c3e:	4c0c      	ldr	r4, [pc, #48]	; (8002c70 <__libc_init_array+0x44>)
 8002c40:	f000 f818 	bl	8002c74 <_init>
 8002c44:	1ba4      	subs	r4, r4, r6
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	2500      	movs	r5, #0
 8002c4a:	42a5      	cmp	r5, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c54:	4798      	blx	r3
 8002c56:	3501      	adds	r5, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c5e:	4798      	blx	r3
 8002c60:	3501      	adds	r5, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08003074 	.word	0x08003074
 8002c68:	08003074 	.word	0x08003074
 8002c6c:	08003074 	.word	0x08003074
 8002c70:	08003078 	.word	0x08003078

08002c74 <_init>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	bf00      	nop
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr

08002c80 <_fini>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr
