
osci_test_signal_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800360c  0800360c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800360c  0800360c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800360c  0800360c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08003618  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08003618  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000941b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ec2  00000000  00000000  0002944f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  0002b318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002bb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ac1  00000000  00000000  0002c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e44  00000000  00000000  00045d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d31e  00000000  00000000  0004cbc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022fc  00000000  00000000  000c9f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800320c 	.word	0x0800320c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800320c 	.word	0x0800320c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3308      	adds	r3, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80005f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80005fc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	fa92 f2a2 	rbit	r2, r2
 8000604:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	fab2 f282 	clz	r2, r2
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	40d3      	lsrs	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4313      	orrs	r3, r2
 8000624:	6023      	str	r3, [r4, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bc90      	pop	{r4, r7}
 800062e:	4770      	bx	lr

08000630 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f043 0201 	orr.w	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f023 0201 	bic.w	r2, r3, #1
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f06f 0201 	mvn.w	r2, #1
 800069a:	611a      	str	r2, [r3, #16]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	f043 0201 	orr.w	r2, r3, #1
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80006d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80006d6:	f001 ffe9 	bl	80026ac <cosf>
 80006da:	eef0 7a40 	vmov.f32	s15, s0
 80006de:	eeb0 0a67 	vmov.f32	s0, s15
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80006f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80006f6:	f002 f819 	bl	800272c <floorf>
 80006fa:	eef0 7a40 	vmov.f32	s15, s0
 80006fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000712:	ed97 0a01 	vldr	s0, [r7, #4]
 8000716:	f002 f84b 	bl	80027b0 <sinf>
 800071a:	eef0 7a40 	vmov.f32	s15, s0
 800071e:	eeb0 0a67 	vmov.f32	s0, s15
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_Z16c_putSignalToDACPv>:
 *      Author: dot
 */

#include "SignalAdjuster.h"

void c_putSignalToDAC(void *v) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	SignalAdjuster *p = (SignalAdjuster*) v;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	60fb      	str	r3, [r7, #12]
	LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, p->getNextSample());
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f000 fbe7 	bl	8000f08 <_ZN14SignalAdjuster13getNextSampleEv>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4904      	ldr	r1, [pc, #16]	; (8000750 <_Z16c_putSignalToDACPv+0x28>)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <_Z16c_putSignalToDACPv+0x2c>)
 8000742:	f7ff ff4d 	bl	80005e0 <LL_DAC_ConvertData12RightAligned>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	02100001 	.word	0x02100001
 8000754:	40007400 	.word	0x40007400

08000758 <_Z9c_executePv>:

void c_execute(void *v) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	SignalAdjuster *p = (SignalAdjuster*) v;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	60fb      	str	r3, [r7, #12]
	char cmd = USART2->RDR;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <_Z9c_executePv+0x28>)
 8000766:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000768:	b29b      	uxth	r3, r3
 800076a:	72fb      	strb	r3, [r7, #11]
	p->execute(cmd);
 800076c:	7afb      	ldrb	r3, [r7, #11]
 800076e:	4619      	mov	r1, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f000 fb2d 	bl	8000dd0 <_ZN14SignalAdjuster7executeEc>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40004400 	.word	0x40004400

08000784 <_ZN14SignalAdjuster17increaseAmplitudeEv>:

void SignalAdjuster::increaseAmplitude() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if (amplitude / amplitudePerLevel < numberOfQuantizationLevels / 2.0f) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	3308      	adds	r3, #8
 8000794:	edd3 6a00 	vldr	s13, [r3]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	3318      	adds	r3, #24
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ae:	3314      	adds	r3, #20
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007ba:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80007be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80007c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ca:	d55c      	bpl.n	8000886 <_ZN14SignalAdjuster17increaseAmplitudeEv+0x102>
		amplitude += amplitudePerLevel*numberOfQuantizationLevels / 16.0f;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d2:	3308      	adds	r3, #8
 80007d4:	ed93 7a00 	vldr	s14, [r3]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	3318      	adds	r3, #24
 80007e0:	edd3 6a00 	vldr	s13, [r3]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	3314      	adds	r3, #20
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	ee07 3a90 	vmov	s15, r3
 80007f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80007fa:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 80007fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080c:	3308      	adds	r3, #8
 800080e:	edc3 7a00 	vstr	s15, [r3]
		if (amplitude >= amplitudePerLevel*numberOfQuantizationLevels / 2) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	3308      	adds	r3, #8
 800081a:	ed93 7a00 	vldr	s14, [r3]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000824:	3318      	adds	r3, #24
 8000826:	edd3 6a00 	vldr	s13, [r3]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000830:	3314      	adds	r3, #20
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	ee07 3a90 	vmov	s15, r3
 8000838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800083c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000840:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000844:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	db32      	blt.n	80008b8 <_ZN14SignalAdjuster17increaseAmplitudeEv+0x134>
			amplitude = amplitudePerLevel*(numberOfQuantizationLevels / 2 - 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000858:	3318      	adds	r3, #24
 800085a:	ed93 7a00 	vldr	s14, [r3]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000864:	3314      	adds	r3, #20
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	3b01      	subs	r3, #1
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087e:	3308      	adds	r3, #8
 8000880:	edc3 7a00 	vstr	s15, [r3]
 8000884:	e018      	b.n	80008b8 <_ZN14SignalAdjuster17increaseAmplitudeEv+0x134>
		}
	} else {
		amplitude = amplitudePerLevel*(numberOfQuantizationLevels / 2 - 1);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800088c:	3318      	adds	r3, #24
 800088e:	ed93 7a00 	vldr	s14, [r3]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000898:	3314      	adds	r3, #20
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	3b01      	subs	r3, #1
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b2:	3308      	adds	r3, #8
 80008b4:	edc3 7a00 	vstr	s15, [r3]
	}

	sample();
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 f917 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_ZN14SignalAdjuster17decreaseAmplitudeEv>:

void SignalAdjuster::decreaseAmplitude() {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	if (amplitude / amplitudePerLevel > 0) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008d4:	3308      	adds	r3, #8
 80008d6:	edd3 6a00 	vldr	s13, [r3]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008e0:	3318      	adds	r3, #24
 80008e2:	ed93 7a00 	vldr	s14, [r3]
 80008e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f2:	dd35      	ble.n	8000960 <_ZN14SignalAdjuster17decreaseAmplitudeEv+0x9a>
		amplitude -= amplitudePerLevel*numberOfQuantizationLevels / 16;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008fa:	3308      	adds	r3, #8
 80008fc:	ed93 7a00 	vldr	s14, [r3]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000906:	3318      	adds	r3, #24
 8000908:	edd3 6a00 	vldr	s13, [r3]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000912:	3314      	adds	r3, #20
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800091e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000922:	eeb3 6a00 	vmov.f32	s12, #48	; 0x41800000  16.0
 8000926:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800092a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000934:	3308      	adds	r3, #8
 8000936:	edc3 7a00 	vstr	s15, [r3]
		if (amplitude < 0) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000940:	3308      	adds	r3, #8
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	d50e      	bpl.n	800096e <_ZN14SignalAdjuster17decreaseAmplitudeEv+0xa8>
			amplitude = 0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000956:	3308      	adds	r3, #8
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e006      	b.n	800096e <_ZN14SignalAdjuster17decreaseAmplitudeEv+0xa8>
		}
	} else {
		amplitude = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000966:	3308      	adds	r3, #8
 8000968:	f04f 0200 	mov.w	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
	}

	sample();
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 f8bc 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN14SignalAdjuster17increaseFrequencyEv>:

void SignalAdjuster::increaseFrequency() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	frequency++;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800098a:	330c      	adds	r3, #12
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800099e:	330c      	adds	r3, #12
 80009a0:	edc3 7a00 	vstr	s15, [r3]

	sample();
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f8a1 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_ZN14SignalAdjuster17decreaseFrequencyEv>:
void SignalAdjuster::decreaseFrequency() {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
	if (frequency > 1) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009c0:	330c      	adds	r3, #12
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	dc00      	bgt.n	80009d6 <_ZN14SignalAdjuster17decreaseFrequencyEv+0x24>
		frequency--;

		sample();
	}
}
 80009d4:	e012      	b.n	80009fc <_ZN14SignalAdjuster17decreaseFrequencyEv+0x4a>
		frequency--;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009dc:	330c      	adds	r3, #12
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f0:	330c      	adds	r3, #12
 80009f2:	edc3 7a00 	vstr	s15, [r3]
		sample();
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 f878 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZN14SignalAdjuster14previousSignalEv>:

void SignalAdjuster::previousSignal() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	switch (signal) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a12:	3304      	adds	r3, #4
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d826      	bhi.n	8000a68 <_ZN14SignalAdjuster14previousSignalEv+0x64>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <_ZN14SignalAdjuster14previousSignalEv+0x1c>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a31 	.word	0x08000a31
 8000a24:	08000a3f 	.word	0x08000a3f
 8000a28:	08000a4d 	.word	0x08000a4d
 8000a2c:	08000a5b 	.word	0x08000a5b
	case SIGNAL_SINE:
		signal = SIGNAL_RANDOM;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a36:	3304      	adds	r3, #4
 8000a38:	2203      	movs	r2, #3
 8000a3a:	601a      	str	r2, [r3, #0]
		break;
 8000a3c:	e014      	b.n	8000a68 <_ZN14SignalAdjuster14previousSignalEv+0x64>
	case SIGNAL_COSINE:
		signal = SIGNAL_SINE;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a44:	3304      	adds	r3, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
		break;
 8000a4a:	e00d      	b.n	8000a68 <_ZN14SignalAdjuster14previousSignalEv+0x64>
	case SIGNAL_TANGENT:
		signal = SIGNAL_COSINE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a52:	3304      	adds	r3, #4
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
		break;
 8000a58:	e006      	b.n	8000a68 <_ZN14SignalAdjuster14previousSignalEv+0x64>
	case SIGNAL_RANDOM:
		signal = SIGNAL_TANGENT;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a60:	3304      	adds	r3, #4
 8000a62:	2202      	movs	r2, #2
 8000a64:	601a      	str	r2, [r3, #0]
		break;
 8000a66:	bf00      	nop
	}

	sample();
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f83f 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop

08000a78 <_ZN14SignalAdjuster10nextSignalEv>:
void SignalAdjuster::nextSignal() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	switch (signal) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d826      	bhi.n	8000adc <_ZN14SignalAdjuster10nextSignalEv+0x64>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <_ZN14SignalAdjuster10nextSignalEv+0x1c>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000ab3 	.word	0x08000ab3
 8000a9c:	08000ac1 	.word	0x08000ac1
 8000aa0:	08000acf 	.word	0x08000acf
	case SIGNAL_SINE:
		signal = SIGNAL_COSINE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aaa:	3304      	adds	r3, #4
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
		break;
 8000ab0:	e014      	b.n	8000adc <_ZN14SignalAdjuster10nextSignalEv+0x64>
	case SIGNAL_COSINE:
		signal = SIGNAL_TANGENT;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2202      	movs	r2, #2
 8000abc:	601a      	str	r2, [r3, #0]
		break;
 8000abe:	e00d      	b.n	8000adc <_ZN14SignalAdjuster10nextSignalEv+0x64>
	case SIGNAL_TANGENT:
		signal = SIGNAL_RANDOM;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	2203      	movs	r2, #3
 8000aca:	601a      	str	r2, [r3, #0]
		break;
 8000acc:	e006      	b.n	8000adc <_ZN14SignalAdjuster10nextSignalEv+0x64>
	case SIGNAL_RANDOM:
		signal = SIGNAL_SINE;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
		break;
 8000ada:	bf00      	nop
	}

	sample();
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f805 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop

08000aec <_ZN14SignalAdjuster6sampleEv>:

void SignalAdjuster::sample() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	ed2d 8b02 	vpush	{d8}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	float signal_increment;
	sampleIndex = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000afe:	331c      	adds	r3, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
	switch (signal) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <_ZN14SignalAdjuster6sampleEv+0x2c>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d036      	beq.n	8000b84 <_ZN14SignalAdjuster6sampleEv+0x98>
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
			signalBuffer[i] = quantize(offset + amplitude*cos(signal_increment * i));
		}
		break;
	default:
		return;
 8000b16:	e071      	b.n	8000bfc <_ZN14SignalAdjuster6sampleEv+0x110>
		signal_increment = 2 * M_PI / (NUM_SAMPLES - 1);
 8000b18:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <_ZN14SignalAdjuster6sampleEv+0x11c>)
 8000b1a:	60fb      	str	r3, [r7, #12]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b26:	d263      	bcs.n	8000bf0 <_ZN14SignalAdjuster6sampleEv+0x104>
			signalBuffer[i] = quantize(offset + amplitude*sin(signal_increment * i));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b2e:	3310      	adds	r3, #16
 8000b30:	ed93 8a00 	vldr	s16, [r3]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	edd3 8a00 	vldr	s17, [r3]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b52:	eeb0 0a67 	vmov.f32	s0, s15
 8000b56:	f7ff fdd7 	bl	8000708 <_ZSt3sinf>
 8000b5a:	eef0 7a40 	vmov.f32	s15, s0
 8000b5e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000b62:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f8a2 	bl	8000cb4 <_ZN14SignalAdjuster8quantizeEf>
 8000b70:	4601      	mov	r1, r0
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	6059      	str	r1, [r3, #4]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e7cd      	b.n	8000b20 <_ZN14SignalAdjuster6sampleEv+0x34>
		signal_increment = 2 * M_PI / (NUM_SAMPLES - 1);
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <_ZN14SignalAdjuster6sampleEv+0x11c>)
 8000b86:	60fb      	str	r3, [r7, #12]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b92:	d22f      	bcs.n	8000bf4 <_ZN14SignalAdjuster6sampleEv+0x108>
			signalBuffer[i] = quantize(offset + amplitude*cos(signal_increment * i));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b9a:	3310      	adds	r3, #16
 8000b9c:	ed93 8a00 	vldr	s16, [r3]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	edd3 8a00 	vldr	s17, [r3]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	f7ff fd81 	bl	80006c8 <_ZSt3cosf>
 8000bc6:	eef0 7a40 	vmov.f32	s15, s0
 8000bca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000bce:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f86c 	bl	8000cb4 <_ZN14SignalAdjuster8quantizeEf>
 8000bdc:	4601      	mov	r1, r0
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	6059      	str	r1, [r3, #4]
		for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	3301      	adds	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	e7cd      	b.n	8000b8c <_ZN14SignalAdjuster6sampleEv+0xa0>
		break;
 8000bf0:	bf00      	nop
 8000bf2:	e000      	b.n	8000bf6 <_ZN14SignalAdjuster6sampleEv+0x10a>
		break;
 8000bf4:	bf00      	nop
	}

	configureTimer();
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f808 	bl	8000c0c <_ZN14SignalAdjuster14configureTimerEv>
}
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	ecbd 8b02 	vpop	{d8}
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	3bc9422b 	.word	0x3bc9422b

08000c0c <_ZN14SignalAdjuster14configureTimerEv>:

void SignalAdjuster::configureTimer() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableCounter(TIM1);
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c16:	f7ff fd1b 	bl	8000650 <LL_TIM_DisableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM1);
 8000c1a:	4822      	ldr	r0, [pc, #136]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c1c:	f7ff fd36 	bl	800068c <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c24:	f7ff fd24 	bl	8000670 <LL_TIM_SetCounter>

	// Asumes TIM1 is used with 32MHZ clock speed

	uint32_t arr = floor(TIM1_CLOCK_SPEED / frequency / (NUM_SAMPLES - 1));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c2e:	330c      	adds	r3, #12
 8000c30:	ed93 7a00 	vldr	s14, [r3]
 8000c34:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000ca8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>
 8000c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000cac <_ZN14SignalAdjuster14configureTimerEv+0xa0>
 8000c40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c44:	eeb0 0a66 	vmov.f32	s0, s13
 8000c48:	f7ff fd4e 	bl	80006e8 <_ZSt5floorf>
 8000c4c:	eef0 7a40 	vmov.f32	s15, s0
 8000c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c54:	ee17 3a90 	vmov	r3, s15
 8000c58:	60fb      	str	r3, [r7, #12]
	if (arr > TIM1_MAX_ARR) {
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c60:	d312      	bcc.n	8000c88 <_ZN14SignalAdjuster14configureTimerEv+0x7c>
		TIM1->PSC = arr / TIM1_MAX_ARR;
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4912      	ldr	r1, [pc, #72]	; (8000cb0 <_ZN14SignalAdjuster14configureTimerEv+0xa4>)
 8000c68:	fba1 1303 	umull	r1, r3, r1, r3
 8000c6c:	0bdb      	lsrs	r3, r3, #15
 8000c6e:	6293      	str	r3, [r2, #40]	; 0x28
		TIM1->ARR = arr % TIM1_MAX_ARR;
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_ZN14SignalAdjuster14configureTimerEv+0xa4>)
 8000c76:	fba3 2301 	umull	r2, r3, r3, r1
 8000c7a:	0bda      	lsrs	r2, r3, #15
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	041b      	lsls	r3, r3, #16
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	1aca      	subs	r2, r1, r3
 8000c84:	62c2      	str	r2, [r0, #44]	; 0x2c
 8000c86:	e002      	b.n	8000c8e <_ZN14SignalAdjuster14configureTimerEv+0x82>
	}else{
		TIM1->ARR = arr;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	LL_TIM_EnableIT_UPDATE(TIM1);
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c90:	f7ff fd0a 	bl	80006a8 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <_ZN14SignalAdjuster14configureTimerEv+0x98>)
 8000c96:	f7ff fccb 	bl	8000630 <LL_TIM_EnableCounter>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40012c00 	.word	0x40012c00
 8000ca8:	4af42400 	.word	0x4af42400
 8000cac:	447fc000 	.word	0x447fc000
 8000cb0:	80008001 	.word	0x80008001

08000cb4 <_ZN14SignalAdjuster8quantizeEf>:

uint32_t SignalAdjuster::quantize(float v) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	ed2d 8b02 	vpush	{d8}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	ed87 0a00 	vstr	s0, [r7]
	return MAX(0,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cca:	3314      	adds	r3, #20
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	ee07 3a90 	vmov	s15, r3
 8000cd4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cde:	3318      	adds	r3, #24
 8000ce0:	edd3 7a00 	vldr	s15, [r3]
 8000ce4:	ed97 7a00 	vldr	s14, [r7]
 8000ce8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000cec:	eeb0 0a66 	vmov.f32	s0, s13
 8000cf0:	f7ff fcfa 	bl	80006e8 <_ZSt5floorf>
 8000cf4:	eef0 7a40 	vmov.f32	s15, s0
 8000cf8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d00:	d501      	bpl.n	8000d06 <_ZN14SignalAdjuster8quantizeEf+0x52>
 8000d02:	2300      	movs	r3, #0
 8000d04:	e017      	b.n	8000d36 <_ZN14SignalAdjuster8quantizeEf+0x82>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d0c:	3318      	adds	r3, #24
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	ed97 7a00 	vldr	s14, [r7]
 8000d16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d1a:	eeb0 0a66 	vmov.f32	s0, s13
 8000d1e:	f7ff fce3 	bl	80006e8 <_ZSt5floorf>
 8000d22:	eef0 7a40 	vmov.f32	s15, s0
 8000d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	bf4c      	ite	mi
 8000d30:	2301      	movmi	r3, #1
 8000d32:	2300      	movpl	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <_ZN14SignalAdjuster8quantizeEf+0x8c>
 8000d3a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8000dcc <_ZN14SignalAdjuster8quantizeEf+0x118>
 8000d3e:	e03d      	b.n	8000dbc <_ZN14SignalAdjuster8quantizeEf+0x108>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d46:	3314      	adds	r3, #20
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d5a:	3318      	adds	r3, #24
 8000d5c:	edd3 7a00 	vldr	s15, [r3]
 8000d60:	ed97 7a00 	vldr	s14, [r7]
 8000d64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d68:	eeb0 0a66 	vmov.f32	s0, s13
 8000d6c:	f7ff fcbc 	bl	80006e8 <_ZSt5floorf>
 8000d70:	eef0 7a40 	vmov.f32	s15, s0
 8000d74:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	d50c      	bpl.n	8000d98 <_ZN14SignalAdjuster8quantizeEf+0xe4>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d84:	3314      	adds	r3, #20
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d96:	e011      	b.n	8000dbc <_ZN14SignalAdjuster8quantizeEf+0x108>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d9e:	3318      	adds	r3, #24
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	ed97 7a00 	vldr	s14, [r7]
 8000da8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dac:	eeb0 0a66 	vmov.f32	s0, s13
 8000db0:	f7ff fc9a 	bl	80006e8 <_ZSt5floorf>
 8000db4:	eef0 7a40 	vmov.f32	s15, s0
 8000db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbc:	ee17 3a90 	vmov	r3, s15
			MIN(numberOfQuantizationLevels - 1, floor(v/amplitudePerLevel)));
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	ecbd 8b02 	vpop	{d8}
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <_ZN14SignalAdjuster7executeEc>:
void SignalAdjuster::execute(char cmd) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
	switch (cmd) {
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	3b69      	subs	r3, #105	; 0x69
 8000de0:	2b0c      	cmp	r3, #12
 8000de2:	d83d      	bhi.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
 8000de4:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <_ZN14SignalAdjuster7executeEc+0x1c>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e21 	.word	0x08000e21
 8000df0:	08000e31 	.word	0x08000e31
 8000df4:	08000e29 	.word	0x08000e29
 8000df8:	08000e39 	.word	0x08000e39
 8000dfc:	08000e61 	.word	0x08000e61
 8000e00:	08000e61 	.word	0x08000e61
 8000e04:	08000e51 	.word	0x08000e51
 8000e08:	08000e61 	.word	0x08000e61
 8000e0c:	08000e61 	.word	0x08000e61
 8000e10:	08000e49 	.word	0x08000e49
 8000e14:	08000e61 	.word	0x08000e61
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	08000e59 	.word	0x08000e59
	case 'i':
		increaseAmplitude();
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fcaf 	bl	8000784 <_ZN14SignalAdjuster17increaseAmplitudeEv>
		break;
 8000e26:	e01b      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 'k':
		decreaseAmplitude();
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fd4c 	bl	80008c6 <_ZN14SignalAdjuster17decreaseAmplitudeEv>
		break;
 8000e2e:	e017      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 'j':
		increaseFrequency();
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fda3 	bl	800097c <_ZN14SignalAdjuster17increaseFrequencyEv>
		break;
 8000e36:	e013      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 'l':
		decreaseFrequency();
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fdba 	bl	80009b2 <_ZN14SignalAdjuster17decreaseFrequencyEv>
		break;
 8000e3e:	e00f      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 't':
		nextSignal();
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fe19 	bl	8000a78 <_ZN14SignalAdjuster10nextSignalEv>
		break;
 8000e46:	e00b      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 'r':
		previousSignal();
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fddb 	bl	8000a04 <_ZN14SignalAdjuster14previousSignalEv>
		break;
 8000e4e:	e007      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 'o':
		increaseOffset();
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 f809 	bl	8000e68 <_ZN14SignalAdjuster14increaseOffsetEv>
		break;
 8000e56:	e003      	b.n	8000e60 <_ZN14SignalAdjuster7executeEc+0x90>
	case 'u':
		decreaseOffset();
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f82d 	bl	8000eb8 <_ZN14SignalAdjuster14decreaseOffsetEv>
		break;
 8000e5e:	bf00      	nop
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_ZN14SignalAdjuster14increaseOffsetEv>:

void SignalAdjuster::increaseOffset(){
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	offset +=0.1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e76:	3310      	adds	r3, #16
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb08 	bl	8000490 <__aeabi_f2d>
 8000e80:	a30b      	add	r3, pc, #44	; (adr r3, 8000eb0 <_ZN14SignalAdjuster14increaseOffsetEv+0x48>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff f9a5 	bl	80001d4 <__adddf3>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460c      	mov	r4, r1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff fb55 	bl	8000540 <__aeabi_d2f>
 8000e96:	4602      	mov	r2, r0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e9e:	3310      	adds	r3, #16
 8000ea0:	601a      	str	r2, [r3, #0]

	sample();
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fe22 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	9999999a 	.word	0x9999999a
 8000eb4:	3fb99999 	.word	0x3fb99999

08000eb8 <_ZN14SignalAdjuster14decreaseOffsetEv>:
void SignalAdjuster::decreaseOffset(){
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	offset -=0.1;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ec6:	3310      	adds	r3, #16
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fae0 	bl	8000490 <__aeabi_f2d>
 8000ed0:	a30b      	add	r3, pc, #44	; (adr r3, 8000f00 <_ZN14SignalAdjuster14decreaseOffsetEv+0x48>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff f97b 	bl	80001d0 <__aeabi_dsub>
 8000eda:	4603      	mov	r3, r0
 8000edc:	460c      	mov	r4, r1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	f7ff fb2d 	bl	8000540 <__aeabi_d2f>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eee:	3310      	adds	r3, #16
 8000ef0:	601a      	str	r2, [r3, #0]

	sample();
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fdfa 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	9999999a 	.word	0x9999999a
 8000f04:	3fb99999 	.word	0x3fb99999

08000f08 <_ZN14SignalAdjuster13getNextSampleEv>:

uint32_t SignalAdjuster::getNextSample() {
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uint32_t ret = signalBuffer[sampleIndex];
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f16:	331c      	adds	r3, #28
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
	++sampleIndex;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f2a:	331c      	adds	r3, #28
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f36:	331c      	adds	r3, #28
 8000f38:	601a      	str	r2, [r3, #0]
	sampleIndex %= NUM_SAMPLES;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f40:	331c      	adds	r3, #28
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f4e:	331c      	adds	r3, #28
 8000f50:	601a      	str	r2, [r3, #0]
	return ret;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_DAC_Enable>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f003 0310 	and.w	r3, r3, #16
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f043 0220 	orr.w	r2, r3, #32
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZN14SignalAdjusterC1Efffmfmm>:
	void sample();
	void configureTimer();
	uint32_t quantize(float v);

public:
	SignalAdjuster(float amplitude=1, float frequency=1, float offset=1,
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	61f8      	str	r0, [r7, #28]
 8000fb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fbc:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fc0:	60f9      	str	r1, [r7, #12]
 8000fc2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
			uint32_t numberOfQuantizationLevels=4096, float amplitudePerLevel=1.0f/2048,
			uint32_t startSampleIndex=0, uint32_t startSignal=0) :
				 signal(startSignal), amplitude(amplitude), frequency(frequency), offset(offset), numberOfQuantizationLevels(
					numberOfQuantizationLevels), amplitudePerLevel(
					amplitudePerLevel), sampleIndex(startSampleIndex) {
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fdc:	3308      	adds	r3, #8
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fe8:	330c      	adds	r3, #12
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ff4:	3310      	adds	r3, #16
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001000:	3314      	adds	r3, #20
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100c:	3318      	adds	r3, #24
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001018:	331c      	adds	r3, #28
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
		tim1_callback = c_putSignalToDAC;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_ZN14SignalAdjusterC1Efffmfmm+0x90>)
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <_ZN14SignalAdjusterC1Efffmfmm+0x94>)
 8001022:	601a      	str	r2, [r3, #0]
		usart2_rxne_callback = c_execute;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_ZN14SignalAdjusterC1Efffmfmm+0x98>)
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <_ZN14SignalAdjusterC1Efffmfmm+0x9c>)
 8001028:	601a      	str	r2, [r3, #0]
		sample();
 800102a:	69f8      	ldr	r0, [r7, #28]
 800102c:	f7ff fd5e 	bl	8000aec <_ZN14SignalAdjuster6sampleEv>
	}
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	4618      	mov	r0, r3
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000028 	.word	0x20000028
 8001040:	08000729 	.word	0x08000729
 8001044:	20000024 	.word	0x20000024
 8001048:	08000759 	.word	0x08000759

0800104c <_Z10usart_initv>:

#include "cppmain.h"
#include "main.h"
#include "SignalAdjuster.h"

void usart_init(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <_Z10usart_initv+0x10>)
 8001052:	f7ff ff9b 	bl	8000f8c <LL_USART_EnableIT_RXNE>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004400 	.word	0x40004400

08001060 <_Z8dac_initv>:

void dac_init(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	LL_DAC_Enable(DAC, LL_DAC_CHANNEL_1);
 8001064:	4902      	ldr	r1, [pc, #8]	; (8001070 <_Z8dac_initv+0x10>)
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <_Z8dac_initv+0x14>)
 8001068:	f7ff ff7a 	bl	8000f60 <LL_DAC_Enable>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	02100001 	.word	0x02100001
 8001074:	40007400 	.word	0x40007400

08001078 <cppmain>:

void cppmain(){
 8001078:	b580      	push	{r7, lr}
 800107a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800107e:	af00      	add	r7, sp, #0
	usart_init();
 8001080:	f7ff ffe4 	bl	800104c <_Z10usart_initv>
	dac_init();
 8001084:	f7ff ffec 	bl	8001060 <_Z8dac_initv>

	SignalAdjuster adj;
 8001088:	4638      	mov	r0, r7
 800108a:	2300      	movs	r3, #0
 800108c:	2200      	movs	r2, #0
 800108e:	eddf 1a08 	vldr	s3, [pc, #32]	; 80010b0 <cppmain+0x38>
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800109a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800109e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010a2:	f7ff ff83 	bl	8000fac <_ZN14SignalAdjusterC1Efffmfmm>
	adj_IT_reference = &adj;
 80010a6:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <cppmain+0x3c>)
 80010a8:	463b      	mov	r3, r7
 80010aa:	6013      	str	r3, [r2, #0]

	while(1){
 80010ac:	e7fe      	b.n	80010ac <cppmain+0x34>
 80010ae:	bf00      	nop
 80010b0:	3a000000 	.word	0x3a000000
 80010b4:	20000020 	.word	0x20000020

080010b8 <LL_DAC_DisableTrigger>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2104      	movs	r1, #4
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	401a      	ands	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000

08001118 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LL_APB1_GRP1_EnableClock+0x2c>)
 800112e:	69da      	ldr	r2, [r3, #28]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000

08001148 <MX_DAC1_Init>:

/* USER CODE END 0 */

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 800116c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001170:	f7ff ffd2 	bl	8001118 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001174:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001178:	f7ff ffb6 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800117c:	2310      	movs	r3, #16
 800117e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f000 feb8 	bl	8001f04 <LL_GPIO_Init>

  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8001194:	2338      	movs	r3, #56	; 0x38
 8001196:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	461a      	mov	r2, r3
 80011a6:	4906      	ldr	r1, [pc, #24]	; (80011c0 <MX_DAC1_Init+0x78>)
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_DAC1_Init+0x7c>)
 80011aa:	f000 fd55 	bl	8001c58 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 80011ae:	4904      	ldr	r1, [pc, #16]	; (80011c0 <MX_DAC1_Init+0x78>)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_DAC1_Init+0x7c>)
 80011b2:	f7ff ff81 	bl	80010b8 <LL_DAC_DisableTrigger>

}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	02100001 	.word	0x02100001
 80011c4:	40007400 	.word	0x40007400

080011c8 <LL_AHB1_GRP1_EnableClock>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000

080011f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001200:	f7ff ffe2 	bl	80011c8 <LL_AHB1_GRP1_EnableClock>

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <LL_RCC_HSI_Enable+0x1c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <LL_RCC_HSI_Enable+0x1c>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <LL_RCC_HSI_IsReady+0x20>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b02      	cmp	r3, #2
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000

08001294 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4904      	ldr	r1, [pc, #16]	; (80012bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <LL_RCC_SetSysClkSource+0x24>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 0203 	bic.w	r2, r3, #3
 80012d0:	4904      	ldr	r1, [pc, #16]	; (80012e4 <LL_RCC_SetSysClkSource+0x24>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000

080012e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <LL_RCC_GetSysClkSource+0x18>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <LL_RCC_SetAHBPrescaler+0x24>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001314:	4904      	ldr	r1, [pc, #16]	; (8001328 <LL_RCC_SetAHBPrescaler+0x24>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40021000 	.word	0x40021000

0800132c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <LL_RCC_SetAPB1Prescaler+0x24>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000

08001354 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <LL_RCC_SetAPB2Prescaler+0x24>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000

0800137c <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <LL_RCC_SetTIMClockSource+0x34>)
 8001386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	0edb      	lsrs	r3, r3, #27
 800138c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800139e:	4904      	ldr	r1, [pc, #16]	; (80013b0 <LL_RCC_SetTIMClockSource+0x34>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_APB1_GRP1_EnableClock>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000

080013e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000

08001414 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <LL_FLASH_SetLatency+0x24>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 0207 	bic.w	r2, r3, #7
 8001424:	4904      	ldr	r1, [pc, #16]	; (8001438 <LL_FLASH_SetLatency+0x24>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40022000 	.word	0x40022000

0800143c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <LL_FLASH_GetLatency+0x18>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000

08001458 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d106      	bne.n	8001474 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001472:	e005      	b.n	8001480 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <LL_SYSTICK_SetClkSource+0x34>)
 800147a:	f023 0304 	bic.w	r3, r3, #4
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e010 	.word	0xe000e010

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff ffa5 	bl	80013e4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800149a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800149e:	f7ff ff89 	bl	80013b4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f7ff feb0 	bl	8001208 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f80c 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ac:	f7ff fea4 	bl	80011f8 <MX_GPIO_Init>
  MX_DAC1_Init();
 80014b0:	f7ff fe4a 	bl	8001148 <MX_DAC1_Init>
  MX_TIM1_Init();
 80014b4:	f000 f9ee 	bl	8001894 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80014b8:	f000 fb22 	bl	8001b00 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cppmain();
 80014bc:	f7ff fddc 	bl	8001078 <cppmain>
 80014c0:	e7fc      	b.n	80014bc <main+0x2c>
	...

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ffa3 	bl	8001414 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80014ce:	f7ff ffb5 	bl	800143c <LL_FLASH_GetLatency>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80014d8:	f000 f82e 	bl	8001538 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80014dc:	f7ff feb8 	bl	8001250 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80014e0:	bf00      	nop
 80014e2:	f7ff fec5 	bl	8001270 <LL_RCC_HSI_IsReady>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d1fa      	bne.n	80014e2 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80014ec:	2010      	movs	r0, #16
 80014ee:	f7ff fed1 	bl	8001294 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff ff06 	bl	8001304 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff ff17 	bl	800132c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff ff28 	bl	8001354 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fedb 	bl	80012c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800150a:	bf00      	nop
 800150c:	f7ff feec 	bl	80012e8 <LL_RCC_GetSysClkSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1fa      	bne.n	800150c <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <SystemClock_Config+0x70>)
 8001518:	f001 f8aa 	bl	8002670 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800151c:	2004      	movs	r0, #4
 800151e:	f7ff ff9b 	bl	8001458 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <SystemClock_Config+0x70>)
 8001524:	f001 f8b2 	bl	800268c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff27 	bl	800137c <LL_RCC_SetTIMClockSource>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	007a1200 	.word	0x007a1200

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_TIM_ClearFlag_UPDATE>:
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f06f 0201 	mvn.w	r2, #1
 8001554:	611a      	str	r2, [r3, #16]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_USART_IsActiveFlag_RXNE>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f003 0320 	and.w	r3, r3, #32
 8001598:	2b20      	cmp	r3, #32
 800159a:	d101      	bne.n	80015a0 <LL_USART_IsActiveFlag_RXNE+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_USART_IsActiveFlag_RXNE+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <HardFault_Handler+0x4>

080015c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <BusFault_Handler+0x4>

080015ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <UsageFault_Handler+0x4>

080015d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)){
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001612:	f7ff ffa6 	bl	8001562 <LL_TIM_IsActiveFlag_UPDATE>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <TIM1_UP_TIM16_IRQHandler+0x22>
		tim1_callback(adj_IT_reference);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <TIM1_UP_TIM16_IRQHandler+0x30>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4610      	mov	r0, r2
 8001626:	4798      	blx	r3
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800162a:	f7ff ff8c 	bl	8001546 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012c00 	.word	0x40012c00
 8001638:	20000028 	.word	0x20000028
 800163c:	20000020 	.word	0x20000020

08001640 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)){
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <USART2_IRQHandler+0x20>)
 8001646:	f7ff ff9f 	bl	8001588 <LL_USART_IsActiveFlag_RXNE>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <USART2_IRQHandler+0x1c>
		usart2_rxne_callback(adj_IT_reference);
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <USART2_IRQHandler+0x24>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <USART2_IRQHandler+0x28>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4610      	mov	r0, r2
 800165a:	4798      	blx	r3
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40004400 	.word	0x40004400
 8001664:	20000024 	.word	0x20000024
 8001668:	20000020 	.word	0x20000020

0800166c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <SystemInit+0x28>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <SystemInit+0x28>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SystemInit+0x28>)
 8001682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001686:	609a      	str	r2, [r3, #8]
#endif
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <LL_APB2_GRP1_EnableClock>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4313      	orrs	r3, r2
 80017be:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4013      	ands	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_TIM_DisableARRPreload>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	601a      	str	r2, [r3, #0]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_TIM_SetClockSource>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_TIM_SetTriggerOutput>:
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_TIM_SetTriggerOutput2>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_TIM_DisableMasterSlaveMode>:
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80018a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018ac:	f7ff ff7e 	bl	80017ac <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018b0:	f7ff fef2 	bl	8001698 <__NVIC_GetPriorityGrouping>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff42 	bl	8001744 <NVIC_EncodePriority>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4619      	mov	r1, r3
 80018c4:	2019      	movs	r0, #25
 80018c6:	f7ff ff13 	bl	80016f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018ca:	2019      	movs	r0, #25
 80018cc:	f7ff fef2 	bl	80016b4 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_TIM1_Init+0x88>)
 80018ea:	f000 fd5d 	bl	80023a8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80018ee:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_TIM1_Init+0x88>)
 80018f0:	f7ff ff74 	bl	80017dc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018f4:	2100      	movs	r1, #0
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <MX_TIM1_Init+0x88>)
 80018f8:	f7ff ff80 	bl	80017fc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80018fc:	2100      	movs	r1, #0
 80018fe:	4807      	ldr	r0, [pc, #28]	; (800191c <MX_TIM1_Init+0x88>)
 8001900:	f7ff ff91 	bl	8001826 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001904:	2100      	movs	r1, #0
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_TIM1_Init+0x88>)
 8001908:	f7ff ffa0 	bl	800184c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <MX_TIM1_Init+0x88>)
 800190e:	f7ff ffb0 	bl	8001872 <LL_TIM_DisableMasterSlaveMode>

}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00

08001920 <__NVIC_GetPriorityGrouping>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <LL_AHB1_GRP1_EnableClock>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000

08001a64 <LL_APB1_GRP1_EnableClock>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_USART_Enable>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_USART_ConfigAsyncMode>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b2e:	f7ff ff99 	bl	8001a64 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b36:	f7ff ff7d 	bl	8001a34 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001b3a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b40:	2302      	movs	r3, #2
 8001b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001b50:	2307      	movs	r3, #7
 8001b52:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f000 f9d2 	bl	8001f04 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b60:	f7ff fede 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff2e 	bl	80019cc <NVIC_EncodePriority>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	2026      	movs	r0, #38	; 0x26
 8001b76:	f7ff feff 	bl	8001978 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b7a:	2026      	movs	r0, #38	; 0x26
 8001b7c:	f7ff fede 	bl	800193c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001b80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b84:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b92:	230c      	movs	r3, #12
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_USART2_UART_Init+0xc4>)
 8001ba6:	f000 fcdd 	bl	8002564 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_USART2_UART_Init+0xc4>)
 8001bac:	f7ff ff98 	bl	8001ae0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_USART2_UART_Init+0xc4>)
 8001bb2:	f7ff ff7f 	bl	8001ab4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_USART2_UART_Init+0xc4>)
 8001bb8:	f7ff ff6c 	bl	8001a94 <LL_USART_Enable>

}
 8001bbc:	bf00      	nop
 8001bbe:	3738      	adds	r7, #56	; 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40004400 	.word	0x40004400

08001bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bce:	e003      	b.n	8001bd8 <LoopCopyDataInit>

08001bd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bd6:	3104      	adds	r1, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001be0:	d3f6      	bcc.n	8001bd0 <CopyDataInit>
	ldr	r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001be4:	e002      	b.n	8001bec <LoopFillZerobss>

08001be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001be6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001be8:	f842 3b04 	str.w	r3, [r2], #4

08001bec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <LoopForever+0x16>)
	cmp	r2, r3
 8001bee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bf0:	d3f9      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff fd3b 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f001 fae5 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfa:	f7ff fc49 	bl	8001490 <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c00:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001c04:	08003614 	.word	0x08003614
	ldr	r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c0c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001c10:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001c14:	2000002c 	.word	0x2000002c

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>

08001c1a <LL_DAC_IsEnabled>:
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	429a      	cmp	r2, r3
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c64:	2300      	movs	r3, #0
 8001c66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff ffd5 	bl	8001c1a <LL_DAC_IsEnabled>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d13a      	bne.n	8001cec <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01e      	beq.n	8001cbc <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	f640 71fa 	movw	r1, #4090	; 0xffa
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4319      	orrs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4319      	orrs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4319      	orrs	r1, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e019      	b.n	8001cf0 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	21fa      	movs	r1, #250	; 0xfa
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	401a      	ands	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4319      	orrs	r1, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e001      	b.n	8001cf0 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b089      	sub	sp, #36	; 0x24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	613b      	str	r3, [r7, #16]
  return result;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2103      	movs	r1, #3
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	401a      	ands	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	61bb      	str	r3, [r7, #24]
  return result;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3724      	adds	r7, #36	; 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	431a      	orrs	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	605a      	str	r2, [r3, #4]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	613b      	str	r3, [r7, #16]
  return result;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2103      	movs	r1, #3
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	61bb      	str	r3, [r7, #24]
  return result;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001dda:	bf00      	nop
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b089      	sub	sp, #36	; 0x24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	613b      	str	r3, [r7, #16]
  return result;
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	61bb      	str	r3, [r7, #24]
  return result;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	431a      	orrs	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	60da      	str	r2, [r3, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3724      	adds	r7, #36	; 0x24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	613b      	str	r3, [r7, #16]
  return result;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b089      	sub	sp, #36	; 0x24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	613b      	str	r3, [r7, #16]
  return result;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	210f      	movs	r1, #15
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001ef8:	bf00      	nop
 8001efa:	3724      	adds	r7, #36	; 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	613b      	str	r3, [r7, #16]
  return result;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f26:	e049      	b.n	8001fbc <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03b      	beq.n	8001fb6 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fed7 	bl	8001cfa <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d003      	beq.n	8001f5c <LL_GPIO_Init+0x58>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d106      	bne.n	8001f6a <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff0f 	bl	8001d88 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff37 	bl	8001de6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d11a      	bne.n	8001fb6 <LL_GPIO_Init+0xb2>
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	60bb      	str	r3, [r7, #8]
  return result;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b07      	cmp	r3, #7
 8001f96:	d807      	bhi.n	8001fa8 <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff4f 	bl	8001e44 <LL_GPIO_SetAFPin_0_7>
 8001fa6:	e006      	b.n	8001fb6 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	461a      	mov	r2, r3
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff76 	bl	8001ea2 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ae      	bne.n	8001f28 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <LL_GPIO_Init+0xd6>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff feb7 	bl	8001d58 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <LL_RCC_HSI_IsReady>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <LL_RCC_HSI_IsReady+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000

08002018 <LL_RCC_LSE_IsReady>:
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <LL_RCC_LSE_IsReady+0x20>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000

0800203c <LL_RCC_GetSysClkSource>:
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <LL_RCC_GetSysClkSource+0x18>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <LL_RCC_GetAHBPrescaler>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <LL_RCC_GetAHBPrescaler+0x18>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_GetAPB1Prescaler>:
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <LL_RCC_GetAPB1Prescaler+0x18>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <LL_RCC_GetAPB2Prescaler>:
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000

080020ac <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <LL_RCC_GetUSARTClockSource+0x28>)
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	2103      	movs	r1, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	4313      	orrs	r3, r2
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000

080020d8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <LL_RCC_PLL_GetMultiplicator+0x18>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000

08002110 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <LL_RCC_PLL_GetPrediv+0x18>)
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f003 030f 	and.w	r3, r3, #15
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002134:	f000 f860 	bl	80021f8 <RCC_GetSystemClockFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f87a 	bl	800223c <RCC_GetHCLKClockFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f888 	bl	8002268 <RCC_GetPCLK1ClockFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f894 	bl	8002290 <RCC_GetPCLK2ClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60da      	str	r2, [r3, #12]
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d12a      	bne.n	80021e0 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff8e 	bl	80020ac <LL_RCC_GetUSARTClockSource>
 8002190:	4603      	mov	r3, r0
 8002192:	2b02      	cmp	r3, #2
 8002194:	d00f      	beq.n	80021b6 <LL_RCC_GetUSARTClockFreq+0x3e>
 8002196:	2b03      	cmp	r3, #3
 8002198:	d005      	beq.n	80021a6 <LL_RCC_GetUSARTClockFreq+0x2e>
 800219a:	2b01      	cmp	r3, #1
 800219c:	d114      	bne.n	80021c8 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800219e:	f000 f82b 	bl	80021f8 <RCC_GetSystemClockFreq>
 80021a2:	60f8      	str	r0, [r7, #12]
        break;
 80021a4:	e021      	b.n	80021ea <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80021a6:	f7ff ff25 	bl	8001ff4 <LL_RCC_HSI_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d019      	beq.n	80021e4 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <LL_RCC_GetUSARTClockFreq+0x7c>)
 80021b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021b4:	e016      	b.n	80021e4 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80021b6:	f7ff ff2f 	bl	8002018 <LL_RCC_LSE_IsReady>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80021c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021c6:	e00f      	b.n	80021e8 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80021c8:	f000 f816 	bl	80021f8 <RCC_GetSystemClockFreq>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f834 	bl	800223c <RCC_GetHCLKClockFreq>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f846 	bl	8002268 <RCC_GetPCLK1ClockFreq>
 80021dc:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80021de:	e004      	b.n	80021ea <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 80021e0:	bf00      	nop
 80021e2:	e002      	b.n	80021ea <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80021e8:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	007a1200 	.word	0x007a1200

080021f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002202:	f7ff ff1b 	bl	800203c <LL_RCC_GetSysClkSource>
 8002206:	4603      	mov	r3, r0
 8002208:	2b04      	cmp	r3, #4
 800220a:	d006      	beq.n	800221a <RCC_GetSystemClockFreq+0x22>
 800220c:	2b08      	cmp	r3, #8
 800220e:	d007      	beq.n	8002220 <RCC_GetSystemClockFreq+0x28>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <RCC_GetSystemClockFreq+0x40>)
 8002216:	607b      	str	r3, [r7, #4]
      break;
 8002218:	e009      	b.n	800222e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <RCC_GetSystemClockFreq+0x40>)
 800221c:	607b      	str	r3, [r7, #4]
      break;
 800221e:	e006      	b.n	800222e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002220:	f000 f84a 	bl	80022b8 <RCC_PLL_GetFreqDomain_SYS>
 8002224:	6078      	str	r0, [r7, #4]
      break;
 8002226:	e002      	b.n	800222e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <RCC_GetSystemClockFreq+0x40>)
 800222a:	607b      	str	r3, [r7, #4]
      break;
 800222c:	bf00      	nop
  }

  return frequency;
 800222e:	687b      	ldr	r3, [r7, #4]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	007a1200 	.word	0x007a1200

0800223c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002244:	f7ff ff08 	bl	8002058 <LL_RCC_GetAHBPrescaler>
 8002248:	4603      	mov	r3, r0
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <RCC_GetHCLKClockFreq+0x28>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	461a      	mov	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	40d3      	lsrs	r3, r2
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	08003224 	.word	0x08003224

08002268 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002270:	f7ff ff00 	bl	8002074 <LL_RCC_GetAPB1Prescaler>
 8002274:	4603      	mov	r3, r0
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <RCC_GetPCLK1ClockFreq+0x24>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	40d3      	lsrs	r3, r2
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	08003234 	.word	0x08003234

08002290 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002298:	f7ff fefa 	bl	8002090 <LL_RCC_GetAPB2Prescaler>
 800229c:	4603      	mov	r3, r0
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	40d3      	lsrs	r3, r2
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08003234 	.word	0x08003234

080022b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80022c6:	f7ff ff07 	bl	80020d8 <LL_RCC_PLL_GetMainSource>
 80022ca:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <RCC_PLL_GetFreqDomain_SYS+0x22>
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d6:	d003      	beq.n	80022e0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80022d8:	e005      	b.n	80022e6 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80022dc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80022de:	e005      	b.n	80022ec <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80022e2:	60fb      	str	r3, [r7, #12]
      break;
 80022e4:	e002      	b.n	80022ec <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80022e8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80022ea:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80022ec:	f7ff ff10 	bl	8002110 <LL_RCC_PLL_GetPrediv>
 80022f0:	4603      	mov	r3, r0
 80022f2:	3301      	adds	r3, #1
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	fbb2 f4f3 	udiv	r4, r2, r3
 80022fa:	f7ff fefb 	bl	80020f4 <LL_RCC_PLL_GetMultiplicator>
 80022fe:	4603      	mov	r3, r0
 8002300:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002304:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002308:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	fa92 f2a2 	rbit	r2, r2
 8002310:	603a      	str	r2, [r7, #0]
  return result;
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	fab2 f282 	clz	r2, r2
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	40d3      	lsrs	r3, r2
 800231c:	3302      	adds	r3, #2
 800231e:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}
 800232a:	bf00      	nop
 800232c:	003d0900 	.word	0x003d0900
 8002330:	007a1200 	.word	0x007a1200

08002334 <LL_TIM_SetPrescaler>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_TIM_SetAutoReload>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_TIM_SetRepetitionCounter>:
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	615a      	str	r2, [r3, #20]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <LL_TIM_Init+0xd0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <LL_TIM_Init+0x28>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c6:	d003      	beq.n	80023d0 <LL_TIM_Init+0x28>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a2c      	ldr	r2, [pc, #176]	; (800247c <LL_TIM_Init+0xd4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d106      	bne.n	80023de <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <LL_TIM_Init+0xd0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <LL_TIM_Init+0x66>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d00f      	beq.n	800240e <LL_TIM_Init+0x66>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <LL_TIM_Init+0xd4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00b      	beq.n	800240e <LL_TIM_Init+0x66>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <LL_TIM_Init+0xd8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <LL_TIM_Init+0x66>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a20      	ldr	r2, [pc, #128]	; (8002484 <LL_TIM_Init+0xdc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <LL_TIM_Init+0x66>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <LL_TIM_Init+0xe0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d106      	bne.n	800241c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4619      	mov	r1, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff91 	bl	8002350 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff7d 	bl	8002334 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LL_TIM_Init+0xd0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00b      	beq.n	800245a <LL_TIM_Init+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <LL_TIM_Init+0xd8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <LL_TIM_Init+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <LL_TIM_Init+0xdc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d003      	beq.n	800245a <LL_TIM_Init+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <LL_TIM_Init+0xe0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d105      	bne.n	8002466 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7c1b      	ldrb	r3, [r3, #16]
 800245e:	4619      	mov	r1, r3
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff83 	bl	800236c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ff8e 	bl	8002388 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40014000 	.word	0x40014000
 8002484:	40014400 	.word	0x40014400
 8002488:	40014800 	.word	0x40014800

0800248c <LL_USART_IsEnabled>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <LL_USART_IsEnabled+0x18>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <LL_USART_IsEnabled+0x1a>
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_USART_SetStopBitsLength>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_USART_SetHWFlowCtrl>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_USART_SetBaudRate>:
{
 80024fe:	b490      	push	{r4, r7}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002512:	d116      	bne.n	8002542 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	005a      	lsls	r2, r3, #1
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	441a      	add	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800252e:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	60dc      	str	r4, [r3, #12]
}
 8002540:	e00a      	b.n	8002558 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	085a      	lsrs	r2, r3, #1
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	441a      	add	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	60da      	str	r2, [r3, #12]
}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bc90      	pop	{r4, r7}
 8002560:	4770      	bx	lr
	...

08002564 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ff88 	bl	800248c <LL_USART_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d14e      	bne.n	8002620 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <LL_USART_Init+0xc8>)
 8002588:	4013      	ands	r3, r2
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	6851      	ldr	r1, [r2, #4]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	4311      	orrs	r1, r2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	6912      	ldr	r2, [r2, #16]
 8002598:	4311      	orrs	r1, r2
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	6992      	ldr	r2, [r2, #24]
 800259e:	430a      	orrs	r2, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff80 	bl	80024b2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	4619      	mov	r1, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff8d 	bl	80024d8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <LL_USART_Init+0xcc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d104      	bne.n	80025d0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff fdd6 	bl	8002178 <LL_RCC_GetUSARTClockFreq>
 80025cc:	61b8      	str	r0, [r7, #24]
 80025ce:	e016      	b.n	80025fe <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <LL_USART_Init+0xd0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d107      	bne.n	80025e8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fda5 	bl	800212c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	e00a      	b.n	80025fe <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a13      	ldr	r2, [pc, #76]	; (8002638 <LL_USART_Init+0xd4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d106      	bne.n	80025fe <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fd99 	bl	800212c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800260c:	2300      	movs	r3, #0
 800260e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69b9      	ldr	r1, [r7, #24]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff6f 	bl	80024fe <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002620:	7ffb      	ldrb	r3, [r7, #31]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	efff69f3 	.word	0xefff69f3
 8002630:	40013800 	.word	0x40013800
 8002634:	40004400 	.word	0x40004400
 8002638:	40004800 	.word	0x40004800

0800263c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	4a07      	ldr	r2, [pc, #28]	; (800266c <LL_InitTick+0x30>)
 8002650:	3b01      	subs	r3, #1
 8002652:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <LL_InitTick+0x30>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <LL_InitTick+0x30>)
 800265c:	2205      	movs	r2, #5
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e010 	.word	0xe000e010

08002670 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002678:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ffdd 	bl	800263c <LL_InitTick>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <LL_SetSystemCoreClock+0x1c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <cosf>:
 80026ac:	ee10 3a10 	vmov	r3, s0
 80026b0:	b507      	push	{r0, r1, r2, lr}
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <cosf+0x78>)
 80026b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b8:	4293      	cmp	r3, r2
 80026ba:	dc04      	bgt.n	80026c6 <cosf+0x1a>
 80026bc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002728 <cosf+0x7c>
 80026c0:	f000 f9e4 	bl	8002a8c <__kernel_cosf>
 80026c4:	e004      	b.n	80026d0 <cosf+0x24>
 80026c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80026ca:	db04      	blt.n	80026d6 <cosf+0x2a>
 80026cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80026d0:	b003      	add	sp, #12
 80026d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80026d6:	4668      	mov	r0, sp
 80026d8:	f000 f8ac 	bl	8002834 <__ieee754_rem_pio2f>
 80026dc:	f000 0003 	and.w	r0, r0, #3
 80026e0:	2801      	cmp	r0, #1
 80026e2:	d007      	beq.n	80026f4 <cosf+0x48>
 80026e4:	2802      	cmp	r0, #2
 80026e6:	d00e      	beq.n	8002706 <cosf+0x5a>
 80026e8:	b9a0      	cbnz	r0, 8002714 <cosf+0x68>
 80026ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80026ee:	ed9d 0a00 	vldr	s0, [sp]
 80026f2:	e7e5      	b.n	80026c0 <cosf+0x14>
 80026f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80026f8:	ed9d 0a00 	vldr	s0, [sp]
 80026fc:	f000 fca6 	bl	800304c <__kernel_sinf>
 8002700:	eeb1 0a40 	vneg.f32	s0, s0
 8002704:	e7e4      	b.n	80026d0 <cosf+0x24>
 8002706:	eddd 0a01 	vldr	s1, [sp, #4]
 800270a:	ed9d 0a00 	vldr	s0, [sp]
 800270e:	f000 f9bd 	bl	8002a8c <__kernel_cosf>
 8002712:	e7f5      	b.n	8002700 <cosf+0x54>
 8002714:	2001      	movs	r0, #1
 8002716:	eddd 0a01 	vldr	s1, [sp, #4]
 800271a:	ed9d 0a00 	vldr	s0, [sp]
 800271e:	f000 fc95 	bl	800304c <__kernel_sinf>
 8002722:	e7d5      	b.n	80026d0 <cosf+0x24>
 8002724:	3f490fd8 	.word	0x3f490fd8
 8002728:	00000000 	.word	0x00000000

0800272c <floorf>:
 800272c:	ee10 3a10 	vmov	r3, s0
 8002730:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002734:	0dca      	lsrs	r2, r1, #23
 8002736:	3a7f      	subs	r2, #127	; 0x7f
 8002738:	2a16      	cmp	r2, #22
 800273a:	dc2a      	bgt.n	8002792 <floorf+0x66>
 800273c:	2a00      	cmp	r2, #0
 800273e:	da11      	bge.n	8002764 <floorf+0x38>
 8002740:	eddf 7a18 	vldr	s15, [pc, #96]	; 80027a4 <floorf+0x78>
 8002744:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002748:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	dd05      	ble.n	800275e <floorf+0x32>
 8002752:	2b00      	cmp	r3, #0
 8002754:	da23      	bge.n	800279e <floorf+0x72>
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <floorf+0x7c>)
 8002758:	2900      	cmp	r1, #0
 800275a:	bf18      	it	ne
 800275c:	4613      	movne	r3, r2
 800275e:	ee00 3a10 	vmov	s0, r3
 8002762:	4770      	bx	lr
 8002764:	4911      	ldr	r1, [pc, #68]	; (80027ac <floorf+0x80>)
 8002766:	4111      	asrs	r1, r2
 8002768:	420b      	tst	r3, r1
 800276a:	d0fa      	beq.n	8002762 <floorf+0x36>
 800276c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80027a4 <floorf+0x78>
 8002770:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002774:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277c:	ddef      	ble.n	800275e <floorf+0x32>
 800277e:	2b00      	cmp	r3, #0
 8002780:	bfbe      	ittt	lt
 8002782:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8002786:	fa40 f202 	asrlt.w	r2, r0, r2
 800278a:	189b      	addlt	r3, r3, r2
 800278c:	ea23 0301 	bic.w	r3, r3, r1
 8002790:	e7e5      	b.n	800275e <floorf+0x32>
 8002792:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002796:	d3e4      	bcc.n	8002762 <floorf+0x36>
 8002798:	ee30 0a00 	vadd.f32	s0, s0, s0
 800279c:	4770      	bx	lr
 800279e:	2300      	movs	r3, #0
 80027a0:	e7dd      	b.n	800275e <floorf+0x32>
 80027a2:	bf00      	nop
 80027a4:	7149f2ca 	.word	0x7149f2ca
 80027a8:	bf800000 	.word	0xbf800000
 80027ac:	007fffff 	.word	0x007fffff

080027b0 <sinf>:
 80027b0:	ee10 3a10 	vmov	r3, s0
 80027b4:	b507      	push	{r0, r1, r2, lr}
 80027b6:	4a1d      	ldr	r2, [pc, #116]	; (800282c <sinf+0x7c>)
 80027b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027bc:	4293      	cmp	r3, r2
 80027be:	dc05      	bgt.n	80027cc <sinf+0x1c>
 80027c0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002830 <sinf+0x80>
 80027c4:	2000      	movs	r0, #0
 80027c6:	f000 fc41 	bl	800304c <__kernel_sinf>
 80027ca:	e004      	b.n	80027d6 <sinf+0x26>
 80027cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80027d0:	db04      	blt.n	80027dc <sinf+0x2c>
 80027d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80027d6:	b003      	add	sp, #12
 80027d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80027dc:	4668      	mov	r0, sp
 80027de:	f000 f829 	bl	8002834 <__ieee754_rem_pio2f>
 80027e2:	f000 0003 	and.w	r0, r0, #3
 80027e6:	2801      	cmp	r0, #1
 80027e8:	d008      	beq.n	80027fc <sinf+0x4c>
 80027ea:	2802      	cmp	r0, #2
 80027ec:	d00d      	beq.n	800280a <sinf+0x5a>
 80027ee:	b9b0      	cbnz	r0, 800281e <sinf+0x6e>
 80027f0:	2001      	movs	r0, #1
 80027f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80027f6:	ed9d 0a00 	vldr	s0, [sp]
 80027fa:	e7e4      	b.n	80027c6 <sinf+0x16>
 80027fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8002800:	ed9d 0a00 	vldr	s0, [sp]
 8002804:	f000 f942 	bl	8002a8c <__kernel_cosf>
 8002808:	e7e5      	b.n	80027d6 <sinf+0x26>
 800280a:	2001      	movs	r0, #1
 800280c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002810:	ed9d 0a00 	vldr	s0, [sp]
 8002814:	f000 fc1a 	bl	800304c <__kernel_sinf>
 8002818:	eeb1 0a40 	vneg.f32	s0, s0
 800281c:	e7db      	b.n	80027d6 <sinf+0x26>
 800281e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002822:	ed9d 0a00 	vldr	s0, [sp]
 8002826:	f000 f931 	bl	8002a8c <__kernel_cosf>
 800282a:	e7f5      	b.n	8002818 <sinf+0x68>
 800282c:	3f490fd8 	.word	0x3f490fd8
 8002830:	00000000 	.word	0x00000000

08002834 <__ieee754_rem_pio2f>:
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	ee10 6a10 	vmov	r6, s0
 800283a:	4b86      	ldr	r3, [pc, #536]	; (8002a54 <__ieee754_rem_pio2f+0x220>)
 800283c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8002840:	429c      	cmp	r4, r3
 8002842:	b087      	sub	sp, #28
 8002844:	4605      	mov	r5, r0
 8002846:	dc05      	bgt.n	8002854 <__ieee754_rem_pio2f+0x20>
 8002848:	2300      	movs	r3, #0
 800284a:	ed85 0a00 	vstr	s0, [r5]
 800284e:	6043      	str	r3, [r0, #4]
 8002850:	2000      	movs	r0, #0
 8002852:	e020      	b.n	8002896 <__ieee754_rem_pio2f+0x62>
 8002854:	4b80      	ldr	r3, [pc, #512]	; (8002a58 <__ieee754_rem_pio2f+0x224>)
 8002856:	429c      	cmp	r4, r3
 8002858:	dc38      	bgt.n	80028cc <__ieee754_rem_pio2f+0x98>
 800285a:	2e00      	cmp	r6, #0
 800285c:	f024 040f 	bic.w	r4, r4, #15
 8002860:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002a5c <__ieee754_rem_pio2f+0x228>
 8002864:	4b7e      	ldr	r3, [pc, #504]	; (8002a60 <__ieee754_rem_pio2f+0x22c>)
 8002866:	dd18      	ble.n	800289a <__ieee754_rem_pio2f+0x66>
 8002868:	429c      	cmp	r4, r3
 800286a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800286e:	bf09      	itett	eq
 8002870:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8002a64 <__ieee754_rem_pio2f+0x230>
 8002874:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8002a68 <__ieee754_rem_pio2f+0x234>
 8002878:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800287c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8002a6c <__ieee754_rem_pio2f+0x238>
 8002880:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002884:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002888:	edc0 6a00 	vstr	s13, [r0]
 800288c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002890:	edc0 7a01 	vstr	s15, [r0, #4]
 8002894:	2001      	movs	r0, #1
 8002896:	b007      	add	sp, #28
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289a:	429c      	cmp	r4, r3
 800289c:	ee70 7a07 	vadd.f32	s15, s0, s14
 80028a0:	bf09      	itett	eq
 80028a2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8002a64 <__ieee754_rem_pio2f+0x230>
 80028a6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8002a68 <__ieee754_rem_pio2f+0x234>
 80028aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80028ae:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8002a6c <__ieee754_rem_pio2f+0x238>
 80028b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80028b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028ba:	edc0 6a00 	vstr	s13, [r0]
 80028be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80028c6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ca:	e7e4      	b.n	8002896 <__ieee754_rem_pio2f+0x62>
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <__ieee754_rem_pio2f+0x23c>)
 80028ce:	429c      	cmp	r4, r3
 80028d0:	dc71      	bgt.n	80029b6 <__ieee754_rem_pio2f+0x182>
 80028d2:	f000 fc03 	bl	80030dc <fabsf>
 80028d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002a74 <__ieee754_rem_pio2f+0x240>
 80028da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80028de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80028e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80028ea:	ee17 0a90 	vmov	r0, s15
 80028ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002a5c <__ieee754_rem_pio2f+0x228>
 80028f2:	eeb1 7a46 	vneg.f32	s14, s12
 80028f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80028fa:	281f      	cmp	r0, #31
 80028fc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8002a68 <__ieee754_rem_pio2f+0x234>
 8002900:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002904:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002908:	ee16 3a90 	vmov	r3, s13
 800290c:	dc1c      	bgt.n	8002948 <__ieee754_rem_pio2f+0x114>
 800290e:	1e47      	subs	r7, r0, #1
 8002910:	4959      	ldr	r1, [pc, #356]	; (8002a78 <__ieee754_rem_pio2f+0x244>)
 8002912:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002916:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800291a:	428a      	cmp	r2, r1
 800291c:	d014      	beq.n	8002948 <__ieee754_rem_pio2f+0x114>
 800291e:	602b      	str	r3, [r5, #0]
 8002920:	ed95 7a00 	vldr	s14, [r5]
 8002924:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002928:	2e00      	cmp	r6, #0
 800292a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800292e:	ed85 0a01 	vstr	s0, [r5, #4]
 8002932:	dab0      	bge.n	8002896 <__ieee754_rem_pio2f+0x62>
 8002934:	eeb1 7a47 	vneg.f32	s14, s14
 8002938:	eeb1 0a40 	vneg.f32	s0, s0
 800293c:	ed85 7a00 	vstr	s14, [r5]
 8002940:	ed85 0a01 	vstr	s0, [r5, #4]
 8002944:	4240      	negs	r0, r0
 8002946:	e7a6      	b.n	8002896 <__ieee754_rem_pio2f+0x62>
 8002948:	15e4      	asrs	r4, r4, #23
 800294a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800294e:	1aa2      	subs	r2, r4, r2
 8002950:	2a08      	cmp	r2, #8
 8002952:	dde4      	ble.n	800291e <__ieee754_rem_pio2f+0xea>
 8002954:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002a64 <__ieee754_rem_pio2f+0x230>
 8002958:	eef0 6a40 	vmov.f32	s13, s0
 800295c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002960:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002964:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002968:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002a6c <__ieee754_rem_pio2f+0x238>
 800296c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8002970:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8002974:	eef0 7a40 	vmov.f32	s15, s0
 8002978:	ee15 3a90 	vmov	r3, s11
 800297c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002980:	1aa4      	subs	r4, r4, r2
 8002982:	2c19      	cmp	r4, #25
 8002984:	dc04      	bgt.n	8002990 <__ieee754_rem_pio2f+0x15c>
 8002986:	edc5 5a00 	vstr	s11, [r5]
 800298a:	eeb0 0a66 	vmov.f32	s0, s13
 800298e:	e7c7      	b.n	8002920 <__ieee754_rem_pio2f+0xec>
 8002990:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002a7c <__ieee754_rem_pio2f+0x248>
 8002994:	eeb0 0a66 	vmov.f32	s0, s13
 8002998:	eea7 0a25 	vfma.f32	s0, s14, s11
 800299c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80029a0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80029a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002a80 <__ieee754_rem_pio2f+0x24c>
 80029a8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80029ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80029b0:	ed85 7a00 	vstr	s14, [r5]
 80029b4:	e7b4      	b.n	8002920 <__ieee754_rem_pio2f+0xec>
 80029b6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80029ba:	db06      	blt.n	80029ca <__ieee754_rem_pio2f+0x196>
 80029bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80029c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80029c4:	edc0 7a00 	vstr	s15, [r0]
 80029c8:	e742      	b.n	8002850 <__ieee754_rem_pio2f+0x1c>
 80029ca:	15e2      	asrs	r2, r4, #23
 80029cc:	3a86      	subs	r2, #134	; 0x86
 80029ce:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80029da:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002a84 <__ieee754_rem_pio2f+0x250>
 80029de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80029ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80029f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80029fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	edcd 7a05 	vstr	s15, [sp, #20]
 8002a0e:	d11e      	bne.n	8002a4e <__ieee754_rem_pio2f+0x21a>
 8002a10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2302      	movne	r3, #2
 8002a1e:	491a      	ldr	r1, [pc, #104]	; (8002a88 <__ieee754_rem_pio2f+0x254>)
 8002a20:	9101      	str	r1, [sp, #4]
 8002a22:	2102      	movs	r1, #2
 8002a24:	9100      	str	r1, [sp, #0]
 8002a26:	a803      	add	r0, sp, #12
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f000 f88d 	bl	8002b48 <__kernel_rem_pio2f>
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	f6bf af31 	bge.w	8002896 <__ieee754_rem_pio2f+0x62>
 8002a34:	edd5 7a00 	vldr	s15, [r5]
 8002a38:	eef1 7a67 	vneg.f32	s15, s15
 8002a3c:	edc5 7a00 	vstr	s15, [r5]
 8002a40:	edd5 7a01 	vldr	s15, [r5, #4]
 8002a44:	eef1 7a67 	vneg.f32	s15, s15
 8002a48:	edc5 7a01 	vstr	s15, [r5, #4]
 8002a4c:	e77a      	b.n	8002944 <__ieee754_rem_pio2f+0x110>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e7e5      	b.n	8002a1e <__ieee754_rem_pio2f+0x1ea>
 8002a52:	bf00      	nop
 8002a54:	3f490fd8 	.word	0x3f490fd8
 8002a58:	4016cbe3 	.word	0x4016cbe3
 8002a5c:	3fc90f80 	.word	0x3fc90f80
 8002a60:	3fc90fd0 	.word	0x3fc90fd0
 8002a64:	37354400 	.word	0x37354400
 8002a68:	37354443 	.word	0x37354443
 8002a6c:	2e85a308 	.word	0x2e85a308
 8002a70:	43490f80 	.word	0x43490f80
 8002a74:	3f22f984 	.word	0x3f22f984
 8002a78:	0800323c 	.word	0x0800323c
 8002a7c:	2e85a300 	.word	0x2e85a300
 8002a80:	248d3132 	.word	0x248d3132
 8002a84:	43800000 	.word	0x43800000
 8002a88:	080032bc 	.word	0x080032bc

08002a8c <__kernel_cosf>:
 8002a8c:	ee10 3a10 	vmov	r3, s0
 8002a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9c:	da05      	bge.n	8002aaa <__kernel_cosf+0x1e>
 8002a9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002aa2:	ee17 2a90 	vmov	r2, s15
 8002aa6:	2a00      	cmp	r2, #0
 8002aa8:	d03b      	beq.n	8002b22 <__kernel_cosf+0x96>
 8002aaa:	ee20 6a00 	vmul.f32	s12, s0, s0
 8002aae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ab2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b28 <__kernel_cosf+0x9c>
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <__kernel_cosf+0xa0>)
 8002ab8:	ee66 7a07 	vmul.f32	s15, s12, s14
 8002abc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b30 <__kernel_cosf+0xa4>
 8002ac0:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8002b34 <__kernel_cosf+0xa8>
 8002aca:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002ace:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002b38 <__kernel_cosf+0xac>
 8002ad2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002ad6:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002b3c <__kernel_cosf+0xb0>
 8002ada:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002ade:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002b40 <__kernel_cosf+0xb4>
 8002ae2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002ae6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002aea:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002aee:	eee6 0a07 	vfma.f32	s1, s12, s14
 8002af2:	dc04      	bgt.n	8002afe <__kernel_cosf+0x72>
 8002af4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8002af8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002afc:	4770      	bx	lr
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <__kernel_cosf+0xb8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bfda      	itte	le
 8002b04:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002b08:	ee07 3a10 	vmovle	s14, r3
 8002b0c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8002b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b14:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8002b18:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002b1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002b20:	4770      	bx	lr
 8002b22:	eeb0 0a66 	vmov.f32	s0, s13
 8002b26:	4770      	bx	lr
 8002b28:	ad47d74e 	.word	0xad47d74e
 8002b2c:	3e999999 	.word	0x3e999999
 8002b30:	310f74f6 	.word	0x310f74f6
 8002b34:	b493f27c 	.word	0xb493f27c
 8002b38:	37d00d01 	.word	0x37d00d01
 8002b3c:	bab60b61 	.word	0xbab60b61
 8002b40:	3d2aaaab 	.word	0x3d2aaaab
 8002b44:	3f480000 	.word	0x3f480000

08002b48 <__kernel_rem_pio2f>:
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	ed2d 8b04 	vpush	{d8-d9}
 8002b50:	b0d7      	sub	sp, #348	; 0x15c
 8002b52:	469b      	mov	fp, r3
 8002b54:	460e      	mov	r6, r1
 8002b56:	4bbe      	ldr	r3, [pc, #760]	; (8002e50 <__kernel_rem_pio2f+0x308>)
 8002b58:	9964      	ldr	r1, [sp, #400]	; 0x190
 8002b5a:	9002      	str	r0, [sp, #8]
 8002b5c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8002b60:	9865      	ldr	r0, [sp, #404]	; 0x194
 8002b62:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002b66:	1ed1      	subs	r1, r2, #3
 8002b68:	2308      	movs	r3, #8
 8002b6a:	fb91 f1f3 	sdiv	r1, r1, r3
 8002b6e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002b72:	f10b 3aff 	add.w	sl, fp, #4294967295
 8002b76:	1c4c      	adds	r4, r1, #1
 8002b78:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8002b7c:	eba1 050a 	sub.w	r5, r1, sl
 8002b80:	aa1a      	add	r2, sp, #104	; 0x68
 8002b82:	eb09 070a 	add.w	r7, r9, sl
 8002b86:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8002b8a:	4696      	mov	lr, r2
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	42bb      	cmp	r3, r7
 8002b90:	dd0f      	ble.n	8002bb2 <__kernel_rem_pio2f+0x6a>
 8002b92:	af42      	add	r7, sp, #264	; 0x108
 8002b94:	2200      	movs	r2, #0
 8002b96:	454a      	cmp	r2, r9
 8002b98:	dc27      	bgt.n	8002bea <__kernel_rem_pio2f+0xa2>
 8002b9a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8002b9e:	eb0b 0302 	add.w	r3, fp, r2
 8002ba2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8002ba6:	9d02      	ldr	r5, [sp, #8]
 8002ba8:	eddf 7aad 	vldr	s15, [pc, #692]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002bac:	f04f 0c00 	mov.w	ip, #0
 8002bb0:	e015      	b.n	8002bde <__kernel_rem_pio2f+0x96>
 8002bb2:	42dd      	cmn	r5, r3
 8002bb4:	bf5d      	ittte	pl
 8002bb6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8002bba:	ee07 2a90 	vmovpl	s15, r2
 8002bbe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8002bc2:	eef0 7a47 	vmovmi.f32	s15, s14
 8002bc6:	ecee 7a01 	vstmia	lr!, {s15}
 8002bca:	3301      	adds	r3, #1
 8002bcc:	e7df      	b.n	8002b8e <__kernel_rem_pio2f+0x46>
 8002bce:	ecf5 6a01 	vldmia	r5!, {s13}
 8002bd2:	ed33 7a01 	vldmdb	r3!, {s14}
 8002bd6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002bda:	f10c 0c01 	add.w	ip, ip, #1
 8002bde:	45d4      	cmp	ip, sl
 8002be0:	ddf5      	ble.n	8002bce <__kernel_rem_pio2f+0x86>
 8002be2:	ece7 7a01 	vstmia	r7!, {s15}
 8002be6:	3201      	adds	r2, #1
 8002be8:	e7d5      	b.n	8002b96 <__kernel_rem_pio2f+0x4e>
 8002bea:	ab06      	add	r3, sp, #24
 8002bec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8002bf0:	9304      	str	r3, [sp, #16]
 8002bf2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8002e5c <__kernel_rem_pio2f+0x314>
 8002bf6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8002e58 <__kernel_rem_pio2f+0x310>
 8002bfa:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002bfe:	9303      	str	r3, [sp, #12]
 8002c00:	464d      	mov	r5, r9
 8002c02:	ab56      	add	r3, sp, #344	; 0x158
 8002c04:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8002c08:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002c0c:	3f01      	subs	r7, #1
 8002c0e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002c12:	00bf      	lsls	r7, r7, #2
 8002c14:	ab56      	add	r3, sp, #344	; 0x158
 8002c16:	19da      	adds	r2, r3, r7
 8002c18:	3a4c      	subs	r2, #76	; 0x4c
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	1ae9      	subs	r1, r5, r3
 8002c1e:	2900      	cmp	r1, #0
 8002c20:	dc4c      	bgt.n	8002cbc <__kernel_rem_pio2f+0x174>
 8002c22:	4620      	mov	r0, r4
 8002c24:	f000 fa62 	bl	80030ec <scalbnf>
 8002c28:	eeb0 8a40 	vmov.f32	s16, s0
 8002c2c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8002c30:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002c34:	f7ff fd7a 	bl	800272c <floorf>
 8002c38:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002c3c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002c40:	2c00      	cmp	r4, #0
 8002c42:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002c46:	edcd 7a01 	vstr	s15, [sp, #4]
 8002c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002c52:	dd48      	ble.n	8002ce6 <__kernel_rem_pio2f+0x19e>
 8002c54:	1e69      	subs	r1, r5, #1
 8002c56:	ab06      	add	r3, sp, #24
 8002c58:	f1c4 0008 	rsb	r0, r4, #8
 8002c5c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8002c60:	9a01      	ldr	r2, [sp, #4]
 8002c62:	fa4c f300 	asr.w	r3, ip, r0
 8002c66:	441a      	add	r2, r3
 8002c68:	4083      	lsls	r3, r0
 8002c6a:	9201      	str	r2, [sp, #4]
 8002c6c:	ebac 0203 	sub.w	r2, ip, r3
 8002c70:	ab06      	add	r3, sp, #24
 8002c72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002c76:	f1c4 0307 	rsb	r3, r4, #7
 8002c7a:	fa42 f803 	asr.w	r8, r2, r3
 8002c7e:	f1b8 0f00 	cmp.w	r8, #0
 8002c82:	dd41      	ble.n	8002d08 <__kernel_rem_pio2f+0x1c0>
 8002c84:	9b01      	ldr	r3, [sp, #4]
 8002c86:	2000      	movs	r0, #0
 8002c88:	3301      	adds	r3, #1
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	4601      	mov	r1, r0
 8002c8e:	4285      	cmp	r5, r0
 8002c90:	dc6d      	bgt.n	8002d6e <__kernel_rem_pio2f+0x226>
 8002c92:	2c00      	cmp	r4, #0
 8002c94:	dd04      	ble.n	8002ca0 <__kernel_rem_pio2f+0x158>
 8002c96:	2c01      	cmp	r4, #1
 8002c98:	d07e      	beq.n	8002d98 <__kernel_rem_pio2f+0x250>
 8002c9a:	2c02      	cmp	r4, #2
 8002c9c:	f000 8086 	beq.w	8002dac <__kernel_rem_pio2f+0x264>
 8002ca0:	f1b8 0f02 	cmp.w	r8, #2
 8002ca4:	d130      	bne.n	8002d08 <__kernel_rem_pio2f+0x1c0>
 8002ca6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002caa:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002cae:	b359      	cbz	r1, 8002d08 <__kernel_rem_pio2f+0x1c0>
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f000 fa1b 	bl	80030ec <scalbnf>
 8002cb6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002cba:	e025      	b.n	8002d08 <__kernel_rem_pio2f+0x1c0>
 8002cbc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002cc0:	a806      	add	r0, sp, #24
 8002cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002cce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002cd2:	ee10 1a10 	vmov	r1, s0
 8002cd6:	ed32 0a01 	vldmdb	r2!, {s0}
 8002cda:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8002cde:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	e79a      	b.n	8002c1c <__kernel_rem_pio2f+0xd4>
 8002ce6:	d106      	bne.n	8002cf6 <__kernel_rem_pio2f+0x1ae>
 8002ce8:	1e6b      	subs	r3, r5, #1
 8002cea:	aa06      	add	r2, sp, #24
 8002cec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cf0:	ea4f 2822 	mov.w	r8, r2, asr #8
 8002cf4:	e7c3      	b.n	8002c7e <__kernel_rem_pio2f+0x136>
 8002cf6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cfa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	da31      	bge.n	8002d68 <__kernel_rem_pio2f+0x220>
 8002d04:	f04f 0800 	mov.w	r8, #0
 8002d08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	f040 80a8 	bne.w	8002e64 <__kernel_rem_pio2f+0x31c>
 8002d14:	1e6b      	subs	r3, r5, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4548      	cmp	r0, r9
 8002d1c:	da4d      	bge.n	8002dba <__kernel_rem_pio2f+0x272>
 8002d1e:	2a00      	cmp	r2, #0
 8002d20:	f000 8087 	beq.w	8002e32 <__kernel_rem_pio2f+0x2ea>
 8002d24:	aa06      	add	r2, sp, #24
 8002d26:	3c08      	subs	r4, #8
 8002d28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	f000 808d 	beq.w	8002e4c <__kernel_rem_pio2f+0x304>
 8002d32:	4620      	mov	r0, r4
 8002d34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	f000 f9d7 	bl	80030ec <scalbnf>
 8002d3e:	9b02      	ldr	r3, [sp, #8]
 8002d40:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002e5c <__kernel_rem_pio2f+0x314>
 8002d44:	0099      	lsls	r1, r3, #2
 8002d46:	aa42      	add	r2, sp, #264	; 0x108
 8002d48:	1850      	adds	r0, r2, r1
 8002d4a:	1d05      	adds	r5, r0, #4
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	2c00      	cmp	r4, #0
 8002d50:	f280 80b8 	bge.w	8002ec4 <__kernel_rem_pio2f+0x37c>
 8002d54:	2500      	movs	r5, #0
 8002d56:	1b5c      	subs	r4, r3, r5
 8002d58:	2c00      	cmp	r4, #0
 8002d5a:	f2c0 80d8 	blt.w	8002f0e <__kernel_rem_pio2f+0x3c6>
 8002d5e:	4f3d      	ldr	r7, [pc, #244]	; (8002e54 <__kernel_rem_pio2f+0x30c>)
 8002d60:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002d64:	2400      	movs	r4, #0
 8002d66:	e0c6      	b.n	8002ef6 <__kernel_rem_pio2f+0x3ae>
 8002d68:	f04f 0802 	mov.w	r8, #2
 8002d6c:	e78a      	b.n	8002c84 <__kernel_rem_pio2f+0x13c>
 8002d6e:	ab06      	add	r3, sp, #24
 8002d70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d74:	b949      	cbnz	r1, 8002d8a <__kernel_rem_pio2f+0x242>
 8002d76:	b12b      	cbz	r3, 8002d84 <__kernel_rem_pio2f+0x23c>
 8002d78:	aa06      	add	r2, sp, #24
 8002d7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d7e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002d82:	2301      	movs	r3, #1
 8002d84:	3001      	adds	r0, #1
 8002d86:	4619      	mov	r1, r3
 8002d88:	e781      	b.n	8002c8e <__kernel_rem_pio2f+0x146>
 8002d8a:	aa06      	add	r2, sp, #24
 8002d8c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002d90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002d94:	460b      	mov	r3, r1
 8002d96:	e7f5      	b.n	8002d84 <__kernel_rem_pio2f+0x23c>
 8002d98:	1e68      	subs	r0, r5, #1
 8002d9a:	ab06      	add	r3, sp, #24
 8002d9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da4:	aa06      	add	r2, sp, #24
 8002da6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002daa:	e779      	b.n	8002ca0 <__kernel_rem_pio2f+0x158>
 8002dac:	1e68      	subs	r0, r5, #1
 8002dae:	ab06      	add	r3, sp, #24
 8002db0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	e7f4      	b.n	8002da4 <__kernel_rem_pio2f+0x25c>
 8002dba:	a906      	add	r1, sp, #24
 8002dbc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002dc0:	3801      	subs	r0, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	e7a9      	b.n	8002d1a <__kernel_rem_pio2f+0x1d2>
 8002dc6:	f10c 0c01 	add.w	ip, ip, #1
 8002dca:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	d0f9      	beq.n	8002dc6 <__kernel_rem_pio2f+0x27e>
 8002dd2:	eb0b 0305 	add.w	r3, fp, r5
 8002dd6:	aa1a      	add	r2, sp, #104	; 0x68
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	1898      	adds	r0, r3, r2
 8002ddc:	3004      	adds	r0, #4
 8002dde:	1c69      	adds	r1, r5, #1
 8002de0:	3704      	adds	r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	4465      	add	r5, ip
 8002de6:	9005      	str	r0, [sp, #20]
 8002de8:	428d      	cmp	r5, r1
 8002dea:	f6ff af0a 	blt.w	8002c02 <__kernel_rem_pio2f+0xba>
 8002dee:	a81a      	add	r0, sp, #104	; 0x68
 8002df0:	eb02 0c03 	add.w	ip, r2, r3
 8002df4:	4484      	add	ip, r0
 8002df6:	9803      	ldr	r0, [sp, #12]
 8002df8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8002dfc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8002e00:	9001      	str	r0, [sp, #4]
 8002e02:	ee07 0a90 	vmov	s15, r0
 8002e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0a:	9805      	ldr	r0, [sp, #20]
 8002e0c:	edcc 7a00 	vstr	s15, [ip]
 8002e10:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002e14:	eb00 0802 	add.w	r8, r0, r2
 8002e18:	f04f 0c00 	mov.w	ip, #0
 8002e1c:	45d4      	cmp	ip, sl
 8002e1e:	dd0c      	ble.n	8002e3a <__kernel_rem_pio2f+0x2f2>
 8002e20:	eb02 0c07 	add.w	ip, r2, r7
 8002e24:	a842      	add	r0, sp, #264	; 0x108
 8002e26:	4484      	add	ip, r0
 8002e28:	edcc 7a01 	vstr	s15, [ip, #4]
 8002e2c:	3101      	adds	r1, #1
 8002e2e:	3204      	adds	r2, #4
 8002e30:	e7da      	b.n	8002de8 <__kernel_rem_pio2f+0x2a0>
 8002e32:	9b04      	ldr	r3, [sp, #16]
 8002e34:	f04f 0c01 	mov.w	ip, #1
 8002e38:	e7c7      	b.n	8002dca <__kernel_rem_pio2f+0x282>
 8002e3a:	ecfe 6a01 	vldmia	lr!, {s13}
 8002e3e:	ed38 7a01 	vldmdb	r8!, {s14}
 8002e42:	f10c 0c01 	add.w	ip, ip, #1
 8002e46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002e4a:	e7e7      	b.n	8002e1c <__kernel_rem_pio2f+0x2d4>
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	e769      	b.n	8002d24 <__kernel_rem_pio2f+0x1dc>
 8002e50:	08003600 	.word	0x08003600
 8002e54:	080035d4 	.word	0x080035d4
 8002e58:	43800000 	.word	0x43800000
 8002e5c:	3b800000 	.word	0x3b800000
 8002e60:	00000000 	.word	0x00000000
 8002e64:	4260      	negs	r0, r4
 8002e66:	eeb0 0a48 	vmov.f32	s0, s16
 8002e6a:	f000 f93f 	bl	80030ec <scalbnf>
 8002e6e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8002e58 <__kernel_rem_pio2f+0x310>
 8002e72:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	db1a      	blt.n	8002eb2 <__kernel_rem_pio2f+0x36a>
 8002e7c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8002e5c <__kernel_rem_pio2f+0x314>
 8002e80:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002e84:	aa06      	add	r2, sp, #24
 8002e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e8a:	a906      	add	r1, sp, #24
 8002e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e90:	3408      	adds	r4, #8
 8002e92:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002e9e:	ee10 3a10 	vmov	r3, s0
 8002ea2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002ea6:	1c6b      	adds	r3, r5, #1
 8002ea8:	ee17 2a90 	vmov	r2, s15
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002eb0:	e73f      	b.n	8002d32 <__kernel_rem_pio2f+0x1ea>
 8002eb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002eb6:	aa06      	add	r2, sp, #24
 8002eb8:	ee10 3a10 	vmov	r3, s0
 8002ebc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	e736      	b.n	8002d32 <__kernel_rem_pio2f+0x1ea>
 8002ec4:	aa06      	add	r2, sp, #24
 8002ec6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002eca:	9202      	str	r2, [sp, #8]
 8002ecc:	ee07 2a90 	vmov	s15, r2
 8002ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed4:	3c01      	subs	r4, #1
 8002ed6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002eda:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002ede:	ed65 7a01 	vstmdb	r5!, {s15}
 8002ee2:	e734      	b.n	8002d4e <__kernel_rem_pio2f+0x206>
 8002ee4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8002ee8:	ecf7 6a01 	vldmia	r7!, {s13}
 8002eec:	ed9c 7a00 	vldr	s14, [ip]
 8002ef0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002ef4:	3401      	adds	r4, #1
 8002ef6:	454c      	cmp	r4, r9
 8002ef8:	dc01      	bgt.n	8002efe <__kernel_rem_pio2f+0x3b6>
 8002efa:	42a5      	cmp	r5, r4
 8002efc:	daf2      	bge.n	8002ee4 <__kernel_rem_pio2f+0x39c>
 8002efe:	aa56      	add	r2, sp, #344	; 0x158
 8002f00:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8002f04:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8002f08:	3501      	adds	r5, #1
 8002f0a:	3804      	subs	r0, #4
 8002f0c:	e723      	b.n	8002d56 <__kernel_rem_pio2f+0x20e>
 8002f0e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002f10:	2a03      	cmp	r2, #3
 8002f12:	d84d      	bhi.n	8002fb0 <__kernel_rem_pio2f+0x468>
 8002f14:	e8df f002 	tbb	[pc, r2]
 8002f18:	021f1f3e 	.word	0x021f1f3e
 8002f1c:	aa56      	add	r2, sp, #344	; 0x158
 8002f1e:	4411      	add	r1, r2
 8002f20:	399c      	subs	r1, #156	; 0x9c
 8002f22:	4608      	mov	r0, r1
 8002f24:	461c      	mov	r4, r3
 8002f26:	2c00      	cmp	r4, #0
 8002f28:	dc5f      	bgt.n	8002fea <__kernel_rem_pio2f+0x4a2>
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	461c      	mov	r4, r3
 8002f2e:	2c01      	cmp	r4, #1
 8002f30:	dc6b      	bgt.n	800300a <__kernel_rem_pio2f+0x4c2>
 8002f32:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	dc77      	bgt.n	800302a <__kernel_rem_pio2f+0x4e2>
 8002f3a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8002f3e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8002f42:	f1b8 0f00 	cmp.w	r8, #0
 8002f46:	d176      	bne.n	8003036 <__kernel_rem_pio2f+0x4ee>
 8002f48:	edc6 6a00 	vstr	s13, [r6]
 8002f4c:	ed86 7a01 	vstr	s14, [r6, #4]
 8002f50:	edc6 7a02 	vstr	s15, [r6, #8]
 8002f54:	e02c      	b.n	8002fb0 <__kernel_rem_pio2f+0x468>
 8002f56:	aa56      	add	r2, sp, #344	; 0x158
 8002f58:	4411      	add	r1, r2
 8002f5a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002f5e:	399c      	subs	r1, #156	; 0x9c
 8002f60:	4618      	mov	r0, r3
 8002f62:	2800      	cmp	r0, #0
 8002f64:	da32      	bge.n	8002fcc <__kernel_rem_pio2f+0x484>
 8002f66:	f1b8 0f00 	cmp.w	r8, #0
 8002f6a:	d035      	beq.n	8002fd8 <__kernel_rem_pio2f+0x490>
 8002f6c:	eef1 7a47 	vneg.f32	s15, s14
 8002f70:	edc6 7a00 	vstr	s15, [r6]
 8002f74:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	a82f      	add	r0, sp, #188	; 0xbc
 8002f7e:	2101      	movs	r1, #1
 8002f80:	428b      	cmp	r3, r1
 8002f82:	da2c      	bge.n	8002fde <__kernel_rem_pio2f+0x496>
 8002f84:	f1b8 0f00 	cmp.w	r8, #0
 8002f88:	d001      	beq.n	8002f8e <__kernel_rem_pio2f+0x446>
 8002f8a:	eef1 7a67 	vneg.f32	s15, s15
 8002f8e:	edc6 7a01 	vstr	s15, [r6, #4]
 8002f92:	e00d      	b.n	8002fb0 <__kernel_rem_pio2f+0x468>
 8002f94:	aa56      	add	r2, sp, #344	; 0x158
 8002f96:	4411      	add	r1, r2
 8002f98:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8002e60 <__kernel_rem_pio2f+0x318>
 8002f9c:	399c      	subs	r1, #156	; 0x9c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da0e      	bge.n	8002fc0 <__kernel_rem_pio2f+0x478>
 8002fa2:	f1b8 0f00 	cmp.w	r8, #0
 8002fa6:	d001      	beq.n	8002fac <__kernel_rem_pio2f+0x464>
 8002fa8:	eef1 7a67 	vneg.f32	s15, s15
 8002fac:	edc6 7a00 	vstr	s15, [r6]
 8002fb0:	9b01      	ldr	r3, [sp, #4]
 8002fb2:	f003 0007 	and.w	r0, r3, #7
 8002fb6:	b057      	add	sp, #348	; 0x15c
 8002fb8:	ecbd 8b04 	vpop	{d8-d9}
 8002fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc0:	ed31 7a01 	vldmdb	r1!, {s14}
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fca:	e7e8      	b.n	8002f9e <__kernel_rem_pio2f+0x456>
 8002fcc:	ed71 7a01 	vldmdb	r1!, {s15}
 8002fd0:	3801      	subs	r0, #1
 8002fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd6:	e7c4      	b.n	8002f62 <__kernel_rem_pio2f+0x41a>
 8002fd8:	eef0 7a47 	vmov.f32	s15, s14
 8002fdc:	e7c8      	b.n	8002f70 <__kernel_rem_pio2f+0x428>
 8002fde:	ecb0 7a01 	vldmia	r0!, {s14}
 8002fe2:	3101      	adds	r1, #1
 8002fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fe8:	e7ca      	b.n	8002f80 <__kernel_rem_pio2f+0x438>
 8002fea:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002fee:	ed70 6a01 	vldmdb	r0!, {s13}
 8002ff2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002ff6:	3c01      	subs	r4, #1
 8002ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ffc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8003000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003004:	edc0 7a00 	vstr	s15, [r0]
 8003008:	e78d      	b.n	8002f26 <__kernel_rem_pio2f+0x3de>
 800300a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800300e:	ed70 6a01 	vldmdb	r0!, {s13}
 8003012:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003016:	3c01      	subs	r4, #1
 8003018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800301c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8003020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003024:	edc0 7a00 	vstr	s15, [r0]
 8003028:	e781      	b.n	8002f2e <__kernel_rem_pio2f+0x3e6>
 800302a:	ed31 7a01 	vldmdb	r1!, {s14}
 800302e:	3b01      	subs	r3, #1
 8003030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003034:	e77f      	b.n	8002f36 <__kernel_rem_pio2f+0x3ee>
 8003036:	eef1 6a66 	vneg.f32	s13, s13
 800303a:	eeb1 7a47 	vneg.f32	s14, s14
 800303e:	edc6 6a00 	vstr	s13, [r6]
 8003042:	ed86 7a01 	vstr	s14, [r6, #4]
 8003046:	eef1 7a67 	vneg.f32	s15, s15
 800304a:	e781      	b.n	8002f50 <__kernel_rem_pio2f+0x408>

0800304c <__kernel_sinf>:
 800304c:	ee10 3a10 	vmov	r3, s0
 8003050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003054:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003058:	da04      	bge.n	8003064 <__kernel_sinf+0x18>
 800305a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800305e:	ee17 3a90 	vmov	r3, s15
 8003062:	b35b      	cbz	r3, 80030bc <__kernel_sinf+0x70>
 8003064:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003068:	eddf 7a15 	vldr	s15, [pc, #84]	; 80030c0 <__kernel_sinf+0x74>
 800306c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80030c4 <__kernel_sinf+0x78>
 8003070:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003074:	eddf 7a14 	vldr	s15, [pc, #80]	; 80030c8 <__kernel_sinf+0x7c>
 8003078:	eee6 7a07 	vfma.f32	s15, s12, s14
 800307c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80030cc <__kernel_sinf+0x80>
 8003080:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003084:	eddf 7a12 	vldr	s15, [pc, #72]	; 80030d0 <__kernel_sinf+0x84>
 8003088:	ee60 6a07 	vmul.f32	s13, s0, s14
 800308c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003090:	b930      	cbnz	r0, 80030a0 <__kernel_sinf+0x54>
 8003092:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80030d4 <__kernel_sinf+0x88>
 8003096:	eea7 6a27 	vfma.f32	s12, s14, s15
 800309a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800309e:	4770      	bx	lr
 80030a0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80030a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80030a8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80030ac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80030b0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80030d8 <__kernel_sinf+0x8c>
 80030b4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80030b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	2f2ec9d3 	.word	0x2f2ec9d3
 80030c4:	b2d72f34 	.word	0xb2d72f34
 80030c8:	3638ef1b 	.word	0x3638ef1b
 80030cc:	b9500d01 	.word	0xb9500d01
 80030d0:	3c088889 	.word	0x3c088889
 80030d4:	be2aaaab 	.word	0xbe2aaaab
 80030d8:	3e2aaaab 	.word	0x3e2aaaab

080030dc <fabsf>:
 80030dc:	ee10 3a10 	vmov	r3, s0
 80030e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030e4:	ee00 3a10 	vmov	s0, r3
 80030e8:	4770      	bx	lr
	...

080030ec <scalbnf>:
 80030ec:	b508      	push	{r3, lr}
 80030ee:	ee10 2a10 	vmov	r2, s0
 80030f2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80030f6:	ed2d 8b02 	vpush	{d8}
 80030fa:	eef0 0a40 	vmov.f32	s1, s0
 80030fe:	d004      	beq.n	800310a <scalbnf+0x1e>
 8003100:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003104:	d306      	bcc.n	8003114 <scalbnf+0x28>
 8003106:	ee70 0a00 	vadd.f32	s1, s0, s0
 800310a:	ecbd 8b02 	vpop	{d8}
 800310e:	eeb0 0a60 	vmov.f32	s0, s1
 8003112:	bd08      	pop	{r3, pc}
 8003114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003118:	d21c      	bcs.n	8003154 <scalbnf+0x68>
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <scalbnf+0xac>)
 800311c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800319c <scalbnf+0xb0>
 8003120:	4298      	cmp	r0, r3
 8003122:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003126:	db10      	blt.n	800314a <scalbnf+0x5e>
 8003128:	ee10 2a90 	vmov	r2, s1
 800312c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003130:	3b19      	subs	r3, #25
 8003132:	4403      	add	r3, r0
 8003134:	2bfe      	cmp	r3, #254	; 0xfe
 8003136:	dd0f      	ble.n	8003158 <scalbnf+0x6c>
 8003138:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80031a0 <scalbnf+0xb4>
 800313c:	eeb0 0a48 	vmov.f32	s0, s16
 8003140:	f000 f834 	bl	80031ac <copysignf>
 8003144:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003148:	e7df      	b.n	800310a <scalbnf+0x1e>
 800314a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80031a4 <scalbnf+0xb8>
 800314e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003152:	e7da      	b.n	800310a <scalbnf+0x1e>
 8003154:	0ddb      	lsrs	r3, r3, #23
 8003156:	e7ec      	b.n	8003132 <scalbnf+0x46>
 8003158:	2b00      	cmp	r3, #0
 800315a:	dd06      	ble.n	800316a <scalbnf+0x7e>
 800315c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003160:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003164:	ee00 3a90 	vmov	s1, r3
 8003168:	e7cf      	b.n	800310a <scalbnf+0x1e>
 800316a:	f113 0f16 	cmn.w	r3, #22
 800316e:	da06      	bge.n	800317e <scalbnf+0x92>
 8003170:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003174:	4298      	cmp	r0, r3
 8003176:	dcdf      	bgt.n	8003138 <scalbnf+0x4c>
 8003178:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80031a4 <scalbnf+0xb8>
 800317c:	e7de      	b.n	800313c <scalbnf+0x50>
 800317e:	3319      	adds	r3, #25
 8003180:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003184:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003188:	eddf 7a07 	vldr	s15, [pc, #28]	; 80031a8 <scalbnf+0xbc>
 800318c:	ee07 3a10 	vmov	s14, r3
 8003190:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003194:	e7b9      	b.n	800310a <scalbnf+0x1e>
 8003196:	bf00      	nop
 8003198:	ffff3cb0 	.word	0xffff3cb0
 800319c:	4c000000 	.word	0x4c000000
 80031a0:	7149f2ca 	.word	0x7149f2ca
 80031a4:	0da24260 	.word	0x0da24260
 80031a8:	33000000 	.word	0x33000000

080031ac <copysignf>:
 80031ac:	ee10 3a10 	vmov	r3, s0
 80031b0:	ee10 2a90 	vmov	r2, s1
 80031b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031bc:	4313      	orrs	r3, r2
 80031be:	ee00 3a10 	vmov	s0, r3
 80031c2:	4770      	bx	lr

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4e0d      	ldr	r6, [pc, #52]	; (80031fc <__libc_init_array+0x38>)
 80031c8:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031ca:	1ba4      	subs	r4, r4, r6
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	2500      	movs	r5, #0
 80031d0:	42a5      	cmp	r5, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	4e0b      	ldr	r6, [pc, #44]	; (8003204 <__libc_init_array+0x40>)
 80031d6:	4c0c      	ldr	r4, [pc, #48]	; (8003208 <__libc_init_array+0x44>)
 80031d8:	f000 f818 	bl	800320c <_init>
 80031dc:	1ba4      	subs	r4, r4, r6
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	2500      	movs	r5, #0
 80031e2:	42a5      	cmp	r5, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ec:	4798      	blx	r3
 80031ee:	3501      	adds	r5, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031f6:	4798      	blx	r3
 80031f8:	3501      	adds	r5, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	0800360c 	.word	0x0800360c
 8003200:	0800360c 	.word	0x0800360c
 8003204:	0800360c 	.word	0x0800360c
 8003208:	08003610 	.word	0x08003610

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr
