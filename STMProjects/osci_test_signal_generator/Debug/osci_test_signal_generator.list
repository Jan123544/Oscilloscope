
osci_test_signal_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fbc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800352c  0800352c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800352c  0800352c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800352c  0800352c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003530  08003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08003538  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08003538  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009278  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f71  00000000  00000000  000292ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002b220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ac1  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d7f  00000000  00000000  00045c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d202  00000000  00000000  0004c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002300  00000000  00000000  000c9c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800312c 	.word	0x0800312c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800312c 	.word	0x0800312c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 8000ab4:	b490      	push	{r4, r7}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000acc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000ad0:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	fa92 f2a2 	rbit	r2, r2
 8000ad8:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000af0:	f023 030f 	bic.w	r3, r3, #15
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	6023      	str	r3, [r4, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc90      	pop	{r4, r7}
 8000b02:	4770      	bx	lr

08000b04 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f043 0201 	orr.w	r2, r3, #1
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 0201 	bic.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f06f 0201 	mvn.w	r2, #1
 8000b6e:	611a      	str	r2, [r3, #16]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f043 0201 	orr.w	r2, r3, #1
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	60da      	str	r2, [r3, #12]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ba6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000baa:	f001 fd4f 	bl	800264c <floorf>
 8000bae:	eef0 7a40 	vmov.f32	s15, s0
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bca:	f001 fd81 	bl	80026d0 <sinf>
 8000bce:	eef0 7a40 	vmov.f32	s15, s0
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_Z16c_putSignalToDACPv>:
 *      Author: dot
 */

#include "SignalAdjuster.h"

void c_putSignalToDAC(void *v) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	SignalAdjuster *p = (SignalAdjuster*) v;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	60fb      	str	r3, [r7, #12]
	LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, p->getNextSample());
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 f97d 	bl	8000ee8 <_ZN14SignalAdjuster13getNextSampleEv>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4904      	ldr	r1, [pc, #16]	; (8000c04 <_Z16c_putSignalToDACPv+0x28>)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <_Z16c_putSignalToDACPv+0x2c>)
 8000bf6:	f7ff ff5d 	bl	8000ab4 <LL_DAC_ConvertData12RightAligned>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	02100001 	.word	0x02100001
 8000c08:	40007400 	.word	0x40007400
 8000c0c:	00000000 	.word	0x00000000

08000c10 <_ZN14SignalAdjuster6sampleEv>:

void SignalAdjuster::sample() {
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	ed2d 8b02 	vpush	{d8}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	float signal_increment = 2 * M_PI / (NUM_SAMPLES - 1);
 8000c1c:	4b86      	ldr	r3, [pc, #536]	; (8000e38 <_ZN14SignalAdjuster6sampleEv+0x228>)
 8000c1e:	60bb      	str	r3, [r7, #8]
	sampleIndex = 0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c30:	f200 80ef 	bhi.w	8000e12 <_ZN14SignalAdjuster6sampleEv+0x202>
		signalBuffer[i] = MIN(MAX((offset + amplitude*sin(signal_increment * i))/3.3*4095, 0), 4095);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	ed93 8a42 	vldr	s16, [r3, #264]	; 0x108
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c52:	eeb0 0a67 	vmov.f32	s0, s15
 8000c56:	f7ff ffb1 	bl	8000bbc <_ZSt3sinf>
 8000c5a:	eef0 7a40 	vmov.f32	s15, s0
 8000c5e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000c62:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000c66:	ee17 0a90 	vmov	r0, s15
 8000c6a:	f7ff fc11 	bl	8000490 <__aeabi_f2d>
 8000c6e:	a36e      	add	r3, pc, #440	; (adr r3, 8000e28 <_ZN14SignalAdjuster6sampleEv+0x218>)
 8000c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c74:	f7ff fd8e 	bl	8000794 <__aeabi_ddiv>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	4621      	mov	r1, r4
 8000c80:	a36b      	add	r3, pc, #428	; (adr r3, 8000e30 <_ZN14SignalAdjuster6sampleEv+0x220>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fc5b 	bl	8000540 <__aeabi_dmul>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	4621      	mov	r1, r4
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	f7ff fee1 	bl	8000a60 <__aeabi_dcmpgt>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d03c      	beq.n	8000d1e <_ZN14SignalAdjuster6sampleEv+0x10e>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	ed93 8a42 	vldr	s16, [r3, #264]	; 0x108
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cba:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc6:	f7ff ff79 	bl	8000bbc <_ZSt3sinf>
 8000cca:	eef0 7a40 	vmov.f32	s15, s0
 8000cce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000cd2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000cd6:	ee17 0a90 	vmov	r0, s15
 8000cda:	f7ff fbd9 	bl	8000490 <__aeabi_f2d>
 8000cde:	a352      	add	r3, pc, #328	; (adr r3, 8000e28 <_ZN14SignalAdjuster6sampleEv+0x218>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fd56 	bl	8000794 <__aeabi_ddiv>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	460c      	mov	r4, r1
 8000cec:	4618      	mov	r0, r3
 8000cee:	4621      	mov	r1, r4
 8000cf0:	a34f      	add	r3, pc, #316	; (adr r3, 8000e30 <_ZN14SignalAdjuster6sampleEv+0x220>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fc23 	bl	8000540 <__aeabi_dmul>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460c      	mov	r4, r1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	4621      	mov	r1, r4
 8000d02:	2301      	movs	r3, #1
 8000d04:	461c      	mov	r4, r3
 8000d06:	a34a      	add	r3, pc, #296	; (adr r3, 8000e30 <_ZN14SignalAdjuster6sampleEv+0x220>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f7ff fe8a 	bl	8000a24 <__aeabi_dcmplt>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <_ZN14SignalAdjuster6sampleEv+0x10a>
 8000d16:	2300      	movs	r3, #0
 8000d18:	461c      	mov	r4, r3
 8000d1a:	b2e3      	uxtb	r3, r4
 8000d1c:	e000      	b.n	8000d20 <_ZN14SignalAdjuster6sampleEv+0x110>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d06c      	beq.n	8000dfe <_ZN14SignalAdjuster6sampleEv+0x1ee>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	ed93 8a42 	vldr	s16, [r3, #264]	; 0x108
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	f7ff ff39 	bl	8000bbc <_ZSt3sinf>
 8000d4a:	eef0 7a40 	vmov.f32	s15, s0
 8000d4e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000d52:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000d56:	ee17 0a90 	vmov	r0, s15
 8000d5a:	f7ff fb99 	bl	8000490 <__aeabi_f2d>
 8000d5e:	a332      	add	r3, pc, #200	; (adr r3, 8000e28 <_ZN14SignalAdjuster6sampleEv+0x218>)
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	f7ff fd16 	bl	8000794 <__aeabi_ddiv>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4621      	mov	r1, r4
 8000d70:	a32f      	add	r3, pc, #188	; (adr r3, 8000e30 <_ZN14SignalAdjuster6sampleEv+0x220>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fbe3 	bl	8000540 <__aeabi_dmul>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460c      	mov	r4, r1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	4621      	mov	r1, r4
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	f7ff fe69 	bl	8000a60 <__aeabi_dcmpgt>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d032      	beq.n	8000dfa <_ZN14SignalAdjuster6sampleEv+0x1ea>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	ed93 8a42 	vldr	s16, [r3, #264]	; 0x108
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	edd3 8a40 	vldr	s17, [r3, #256]	; 0x100
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db2:	eeb0 0a67 	vmov.f32	s0, s15
 8000db6:	f7ff ff01 	bl	8000bbc <_ZSt3sinf>
 8000dba:	eef0 7a40 	vmov.f32	s15, s0
 8000dbe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000dc2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000dc6:	ee17 0a90 	vmov	r0, s15
 8000dca:	f7ff fb61 	bl	8000490 <__aeabi_f2d>
 8000dce:	a316      	add	r3, pc, #88	; (adr r3, 8000e28 <_ZN14SignalAdjuster6sampleEv+0x218>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fcde 	bl	8000794 <__aeabi_ddiv>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	4621      	mov	r1, r4
 8000de0:	a313      	add	r3, pc, #76	; (adr r3, 8000e30 <_ZN14SignalAdjuster6sampleEv+0x220>)
 8000de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de6:	f7ff fbab 	bl	8000540 <__aeabi_dmul>
 8000dea:	4603      	mov	r3, r0
 8000dec:	460c      	mov	r4, r1
 8000dee:	4618      	mov	r0, r3
 8000df0:	4621      	mov	r1, r4
 8000df2:	f7ff fe3f 	bl	8000a74 <__aeabi_d2uiz>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e003      	b.n	8000e02 <_ZN14SignalAdjuster6sampleEv+0x1f2>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e001      	b.n	8000e02 <_ZN14SignalAdjuster6sampleEv+0x1f2>
 8000dfe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68f9      	ldr	r1, [r7, #12]
 8000e06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e70c      	b.n	8000c2c <_ZN14SignalAdjuster6sampleEv+0x1c>
	}

	configureTimer();
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f812 	bl	8000e3c <_ZN14SignalAdjuster14configureTimerEv>
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	ecbd 8b02 	vpop	{d8}
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	f3af 8000 	nop.w
 8000e28:	66666666 	.word	0x66666666
 8000e2c:	400a6666 	.word	0x400a6666
 8000e30:	00000000 	.word	0x00000000
 8000e34:	40affe00 	.word	0x40affe00
 8000e38:	3dcc40de 	.word	0x3dcc40de

08000e3c <_ZN14SignalAdjuster14configureTimerEv>:

void SignalAdjuster::configureTimer() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableCounter(TIM1);
 8000e44:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000e46:	f7ff fe6d 	bl	8000b24 <LL_TIM_DisableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM1);
 8000e4a:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000e4c:	f7ff fe88 	bl	8000b60 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000e54:	f7ff fe76 	bl	8000b44 <LL_TIM_SetCounter>

	// Asumes TIM1 is used with 8MHZ clock speed
	float cyclesPerSample = TIM1_CLOCK_SPEED / frequency / (NUM_SAMPLES - 1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8000e5e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000edc <_ZN14SignalAdjuster14configureTimerEv+0xa0>
 8000e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e66:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000ee0 <_ZN14SignalAdjuster14configureTimerEv+0xa4>
 8000e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t overflows = floor(cyclesPerSample/65535);
 8000e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e76:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ee4 <_ZN14SignalAdjuster14configureTimerEv+0xa8>
 8000e7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e7e:	eeb0 0a66 	vmov.f32	s0, s13
 8000e82:	f7ff fe8b 	bl	8000b9c <_ZSt5floorf>
 8000e86:	eef0 7a40 	vmov.f32	s15, s0
 8000e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8e:	ee17 3a90 	vmov	r3, s15
 8000e92:	817b      	strh	r3, [r7, #10]
	TIM1->PSC = overflows;
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000e96:	897b      	ldrh	r3, [r7, #10]
 8000e98:	6293      	str	r3, [r2, #40]	; 0x28
	TIM1->ARR = cyclesPerSample/(overflows + 1)-1;
 8000e9a:	897b      	ldrh	r3, [r7, #10]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea6:	edd7 6a03 	vldr	s13, [r7, #12]
 8000eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ebc:	ee17 2a90 	vmov	r2, s15
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c

	LL_TIM_EnableIT_UPDATE(TIM1);
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000ec4:	f7ff fe5a 	bl	8000b7c <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM1);
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <_ZN14SignalAdjuster14configureTimerEv+0x9c>)
 8000eca:	f7ff fe1b 	bl	8000b04 <LL_TIM_EnableCounter>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	4af42400 	.word	0x4af42400
 8000ee0:	427c0000 	.word	0x427c0000
 8000ee4:	477fff00 	.word	0x477fff00

08000ee8 <_ZN14SignalAdjuster13getNextSampleEv>:

uint32_t SignalAdjuster::getNextSample() {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	uint32_t ret = signalBuffer[sampleIndex];
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	60fb      	str	r3, [r7, #12]
	++sampleIndex;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	sampleIndex %= NUM_SAMPLES;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	return ret;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_ZN14SignalAdjuster5startEv>:

void SignalAdjuster::start(){
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	sample();
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fe6c 	bl	8000c10 <_ZN14SignalAdjuster6sampleEv>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LL_DAC_Enable>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f043 0220 	orr.w	r2, r3, #32
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_ZN14SignalAdjusterC1Efffmmm>:
	void sample();
	void configureTimer();
	uint32_t quantize(float v);

public:
	SignalAdjuster(float amplitude=1.55, float frequency=100, float offset=1.65,
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	61f8      	str	r0, [r7, #28]
 8000f94:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f98:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f9c:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fa0:	60f9      	str	r1, [r7, #12]
 8000fa2:	60ba      	str	r2, [r7, #8]
 8000fa4:	607b      	str	r3, [r7, #4]
			uint32_t startSampleIndex=0, uint32_t startSignal=0, uint32_t sampleIndex=0) :amplitude(amplitude), frequency(frequency), offset(offset), sampleIndex(sampleIndex) {
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		tim1_callback = c_putSignalToDAC;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <_ZN14SignalAdjusterC1Efffmmm+0x50>)
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_ZN14SignalAdjusterC1Efffmmm+0x54>)
 8000fca:	601a      	str	r2, [r3, #0]
	}
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000028 	.word	0x20000028
 8000fe0:	08000bdd 	.word	0x08000bdd

08000fe4 <_Z10usart_initv>:

#include "cppmain.h"
#include "main.h"
#include "SignalAdjuster.h"

void usart_init(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <_Z10usart_initv+0x10>)
 8000fea:	f7ff ffbf 	bl	8000f6c <LL_USART_EnableIT_RXNE>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <_Z8dac_initv>:

void dac_init(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	LL_DAC_Enable(DAC, LL_DAC_CHANNEL_1);
 8000ffc:	4902      	ldr	r1, [pc, #8]	; (8001008 <_Z8dac_initv+0x10>)
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <_Z8dac_initv+0x14>)
 8001000:	f7ff ff9e 	bl	8000f40 <LL_DAC_Enable>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	02100001 	.word	0x02100001
 800100c:	40007400 	.word	0x40007400

08001010 <cppmain>:
	TIM1->PSC = numOverflows;
	TIM1->ARR = requiredCycles/(numOverflows + 1) - 1;
}


void cppmain(){
 8001010:	b580      	push	{r7, lr}
 8001012:	b0c4      	sub	sp, #272	; 0x110
 8001014:	af00      	add	r7, sp, #0
	usart_init();
 8001016:	f7ff ffe5 	bl	8000fe4 <_Z10usart_initv>
	dac_init();
 800101a:	f7ff ffed 	bl	8000ff8 <_Z8dac_initv>

	SignalAdjuster adj;
 800101e:	4638      	mov	r0, r7
 8001020:	2300      	movs	r3, #0
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8001048 <cppmain+0x38>
 800102a:	eddf 0a08 	vldr	s1, [pc, #32]	; 800104c <cppmain+0x3c>
 800102e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001050 <cppmain+0x40>
 8001032:	f7ff ffab 	bl	8000f8c <_ZN14SignalAdjusterC1Efffmmm>
	adj_IT_reference = &adj;
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <cppmain+0x44>)
 8001038:	463b      	mov	r3, r7
 800103a:	6013      	str	r3, [r2, #0]
	adj.start();
 800103c:	463b      	mov	r3, r7
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff73 	bl	8000f2a <_ZN14SignalAdjuster5startEv>
	//LL_TIM_EnableIT_UPDATE(TIM1);
	//LL_TIM_EnableCounter(TIM1);

	//LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, 4095);

	while(1){
 8001044:	e7fe      	b.n	8001044 <cppmain+0x34>
 8001046:	bf00      	nop
 8001048:	3fd33333 	.word	0x3fd33333
 800104c:	42c80000 	.word	0x42c80000
 8001050:	3fc66666 	.word	0x3fc66666
 8001054:	20000024 	.word	0x20000024

08001058 <LL_DAC_DisableTrigger>:
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2104      	movs	r1, #4
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4313      	orrs	r3, r2
 800109a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000

080010b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ce:	69da      	ldr	r2, [r3, #28]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <MX_DAC1_Init>:

/* USER CODE END 0 */

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80010ee:	f107 0318 	add.w	r3, r7, #24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 800110c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001110:	f7ff ffd2 	bl	80010b8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001114:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001118:	f7ff ffb6 	bl	8001088 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800111c:	2310      	movs	r3, #16
 800111e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 feb8 	bl	8001ea4 <LL_GPIO_Init>

  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8001134:	2338      	movs	r3, #56	; 0x38
 8001136:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	461a      	mov	r2, r3
 8001146:	4906      	ldr	r1, [pc, #24]	; (8001160 <MX_DAC1_Init+0x78>)
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_DAC1_Init+0x7c>)
 800114a:	f000 fd55 	bl	8001bf8 <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 800114e:	4904      	ldr	r1, [pc, #16]	; (8001160 <MX_DAC1_Init+0x78>)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_DAC1_Init+0x7c>)
 8001152:	f7ff ff81 	bl	8001058 <LL_DAC_DisableTrigger>

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	02100001 	.word	0x02100001
 8001164:	40007400 	.word	0x40007400

08001168 <LL_AHB1_GRP1_EnableClock>:
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4013      	ands	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000

08001198 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800119c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011a0:	f7ff ffe2 	bl	8001168 <LL_AHB1_GRP1_EnableClock>

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <LL_RCC_HSI_Enable+0x1c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <LL_RCC_HSI_Enable+0x1c>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <LL_RCC_HSI_IsReady+0x20>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b02      	cmp	r3, #2
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4904      	ldr	r1, [pc, #16]	; (800125c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <LL_RCC_SetSysClkSource+0x24>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 0203 	bic.w	r2, r3, #3
 8001270:	4904      	ldr	r1, [pc, #16]	; (8001284 <LL_RCC_SetSysClkSource+0x24>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000

08001288 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <LL_RCC_GetSysClkSource+0x18>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000

080012cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012dc:	4904      	ldr	r1, [pc, #16]	; (80012f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000

080012f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001304:	4904      	ldr	r1, [pc, #16]	; (8001318 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <LL_RCC_SetTIMClockSource+0x34>)
 8001326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	0edb      	lsrs	r3, r3, #27
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800133e:	4904      	ldr	r1, [pc, #16]	; (8001350 <LL_RCC_SetTIMClockSource+0x34>)
 8001340:	4313      	orrs	r3, r2
 8001342:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000

08001354 <LL_APB1_GRP1_EnableClock>:
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <LL_APB1_GRP1_EnableClock+0x2c>)
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <LL_APB1_GRP1_EnableClock+0x2c>)
 800136a:	69da      	ldr	r2, [r3, #28]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000

08001384 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4313      	orrs	r3, r2
 8001396:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000

080013b4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LL_FLASH_SetLatency+0x24>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 0207 	bic.w	r2, r3, #7
 80013c4:	4904      	ldr	r1, [pc, #16]	; (80013d8 <LL_FLASH_SetLatency+0x24>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40022000 	.word	0x40022000

080013dc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <LL_FLASH_GetLatency+0x18>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000

080013f8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d106      	bne.n	8001414 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <LL_SYSTICK_SetClkSource+0x34>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <LL_SYSTICK_SetClkSource+0x34>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001412:	e005      	b.n	8001420 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <LL_SYSTICK_SetClkSource+0x34>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <LL_SYSTICK_SetClkSource+0x34>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e010 	.word	0xe000e010

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ffa5 	bl	8001384 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800143a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800143e:	f7ff ff89 	bl	8001354 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001442:	2003      	movs	r0, #3
 8001444:	f7ff feb0 	bl	80011a8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f80c 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f7ff fea4 	bl	8001198 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001450:	f7ff fe4a 	bl	80010e8 <MX_DAC1_Init>
  MX_TIM1_Init();
 8001454:	f000 f9ee 	bl	8001834 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001458:	f000 fb22 	bl	8001aa0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cppmain();
 800145c:	f7ff fdd8 	bl	8001010 <cppmain>
 8001460:	e7fc      	b.n	800145c <main+0x2c>
	...

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ffa3 	bl	80013b4 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800146e:	f7ff ffb5 	bl	80013dc <LL_FLASH_GetLatency>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001478:	f000 f82e 	bl	80014d8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800147c:	f7ff feb8 	bl	80011f0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001480:	bf00      	nop
 8001482:	f7ff fec5 	bl	8001210 <LL_RCC_HSI_IsReady>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d1fa      	bne.n	8001482 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800148c:	2010      	movs	r0, #16
 800148e:	f7ff fed1 	bl	8001234 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff ff06 	bl	80012a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff ff17 	bl	80012cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff ff28 	bl	80012f4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fedb 	bl	8001260 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80014aa:	bf00      	nop
 80014ac:	f7ff feec 	bl	8001288 <LL_RCC_GetSysClkSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1fa      	bne.n	80014ac <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <SystemClock_Config+0x70>)
 80014b8:	f001 f8aa 	bl	8002610 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80014bc:	2004      	movs	r0, #4
 80014be:	f7ff ff9b 	bl	80013f8 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <SystemClock_Config+0x70>)
 80014c4:	f001 f8b2 	bl	800262c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff ff27 	bl	800131c <LL_RCC_SetTIMClockSource>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	007a1200 	.word	0x007a1200

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_TIM_ClearFlag_UPDATE>:
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f06f 0201 	mvn.w	r2, #1
 80014f4:	611a      	str	r2, [r3, #16]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_USART_IsActiveFlag_RXNE>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b20      	cmp	r3, #32
 800153a:	d101      	bne.n	8001540 <LL_USART_IsActiveFlag_RXNE+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <HardFault_Handler+0x4>

08001562 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <MemManage_Handler+0x4>

08001568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <BusFault_Handler+0x4>

0800156e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)){
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80015b2:	f7ff ffa6 	bl	8001502 <LL_TIM_IsActiveFlag_UPDATE>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <TIM1_UP_TIM16_IRQHandler+0x22>
		tim1_callback(adj_IT_reference);
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <TIM1_UP_TIM16_IRQHandler+0x30>)
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	4610      	mov	r0, r2
 80015c6:	4798      	blx	r3
		LL_TIM_ClearFlag_UPDATE(TIM1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80015ca:	f7ff ff8c 	bl	80014e6 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	20000028 	.word	0x20000028
 80015dc:	20000024 	.word	0x20000024

080015e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)){
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <USART2_IRQHandler+0x20>)
 80015e6:	f7ff ff9f 	bl	8001528 <LL_USART_IsActiveFlag_RXNE>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <USART2_IRQHandler+0x1c>
		usart2_rxne_callback(adj_IT_reference);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <USART2_IRQHandler+0x24>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <USART2_IRQHandler+0x28>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4610      	mov	r0, r2
 80015fa:	4798      	blx	r3
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40004400 	.word	0x40004400
 8001604:	20000020 	.word	0x20000020
 8001608:	20000024 	.word	0x20000024

0800160c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <SystemInit+0x28>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <SystemInit+0x28>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SystemInit+0x28>)
 8001622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001626:	609a      	str	r2, [r3, #8]
#endif
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <LL_APB2_GRP1_EnableClock>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001756:	699a      	ldr	r2, [r3, #24]
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <LL_APB2_GRP1_EnableClock+0x2c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4313      	orrs	r3, r2
 800175e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000

0800177c <LL_TIM_DisableARRPreload>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_TIM_SetClockSource>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80017ae:	f023 0307 	bic.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_TIM_SetTriggerOutput>:
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	605a      	str	r2, [r3, #4]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_TIM_SetTriggerOutput2>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	605a      	str	r2, [r3, #4]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_TIM_DisableMasterSlaveMode>:
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001848:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800184c:	f7ff ff7e 	bl	800174c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001850:	f7ff fef2 	bl	8001638 <__NVIC_GetPriorityGrouping>
 8001854:	4603      	mov	r3, r0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff42 	bl	80016e4 <NVIC_EncodePriority>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	2019      	movs	r0, #25
 8001866:	f7ff ff13 	bl	8001690 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800186a:	2019      	movs	r0, #25
 800186c:	f7ff fef2 	bl	8001654 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_TIM1_Init+0x88>)
 800188a:	f000 fd5d 	bl	8002348 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <MX_TIM1_Init+0x88>)
 8001890:	f7ff ff74 	bl	800177c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001894:	2100      	movs	r1, #0
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <MX_TIM1_Init+0x88>)
 8001898:	f7ff ff80 	bl	800179c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800189c:	2100      	movs	r1, #0
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <MX_TIM1_Init+0x88>)
 80018a0:	f7ff ff91 	bl	80017c6 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80018a4:	2100      	movs	r1, #0
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_TIM1_Init+0x88>)
 80018a8:	f7ff ffa0 	bl	80017ec <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <MX_TIM1_Init+0x88>)
 80018ae:	f7ff ffb0 	bl	8001812 <LL_TIM_DisableMasterSlaveMode>

}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40012c00 	.word	0x40012c00

080018c0 <__NVIC_GetPriorityGrouping>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <LL_AHB1_GRP1_EnableClock>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000

08001a04 <LL_APB1_GRP1_EnableClock>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_USART_Enable>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_USART_ConfigAsyncMode>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	; 0x38
 8001aa4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001aca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ace:	f7ff ff99 	bl	8001a04 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ad2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ad6:	f7ff ff7d 	bl	80019d4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001ada:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001af0:	2307      	movs	r3, #7
 8001af2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f000 f9d2 	bl	8001ea4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b00:	f7ff fede 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff2e 	bl	800196c <NVIC_EncodePriority>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4619      	mov	r1, r3
 8001b14:	2026      	movs	r0, #38	; 0x26
 8001b16:	f7ff feff 	bl	8001918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001b1a:	2026      	movs	r0, #38	; 0x26
 8001b1c:	f7ff fede 	bl	80018dc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001b20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b24:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b32:	230c      	movs	r3, #12
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4807      	ldr	r0, [pc, #28]	; (8001b64 <MX_USART2_UART_Init+0xc4>)
 8001b46:	f000 fcdd 	bl	8002504 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_USART2_UART_Init+0xc4>)
 8001b4c:	f7ff ff98 	bl	8001a80 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_USART2_UART_Init+0xc4>)
 8001b52:	f7ff ff7f 	bl	8001a54 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <MX_USART2_UART_Init+0xc4>)
 8001b58:	f7ff ff6c 	bl	8001a34 <LL_USART_Enable>

}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40004400 	.word	0x40004400

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
	ldr	r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LoopForever+0x16>)
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b92:	f7ff fd3b 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f001 faa5 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7ff fc49 	bl	8001430 <main>

08001b9e <LoopForever>:

LoopForever:
    b LoopForever
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001ba4:	08003534 	.word	0x08003534
	ldr	r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bac:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001bb0:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001bb4:	2000002c 	.word	0x2000002c

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>

08001bba <LL_DAC_IsEnabled>:
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	429a      	cmp	r2, r3
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001c04:	2300      	movs	r3, #0
 8001c06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7ff ffd5 	bl	8001bba <LL_DAC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13a      	bne.n	8001c8c <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01e      	beq.n	8001c5c <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	f640 71fa 	movw	r1, #4090	; 0xffa
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4319      	orrs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4319      	orrs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e019      	b.n	8001c90 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	21fa      	movs	r1, #250	; 0xfa
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4319      	orrs	r1, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e001      	b.n	8001c90 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b089      	sub	sp, #36	; 0x24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	613b      	str	r3, [r7, #16]
  return result;
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2103      	movs	r1, #3
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	61bb      	str	r3, [r7, #24]
  return result;
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	3724      	adds	r7, #36	; 0x24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	613b      	str	r3, [r7, #16]
  return result;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2103      	movs	r1, #3
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	61bb      	str	r3, [r7, #24]
  return result;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b089      	sub	sp, #36	; 0x24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	613b      	str	r3, [r7, #16]
  return result;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2103      	movs	r1, #3
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	61bb      	str	r3, [r7, #24]
  return result;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	60da      	str	r2, [r3, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	613b      	str	r3, [r7, #16]
  return result;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b089      	sub	sp, #36	; 0x24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	613b      	str	r3, [r7, #16]
  return result;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	61bb      	str	r3, [r7, #24]
  return result;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001e98:	bf00      	nop
 8001e9a:	3724      	adds	r7, #36	; 0x24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	613b      	str	r3, [r7, #16]
  return result;
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ec6:	e049      	b.n	8001f5c <LL_GPIO_Init+0xb8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d03b      	beq.n	8001f56 <LL_GPIO_Init+0xb2>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fed7 	bl	8001c9a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d003      	beq.n	8001efc <LL_GPIO_Init+0x58>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d106      	bne.n	8001f0a <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	461a      	mov	r2, r3
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff0f 	bl	8001d28 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff37 	bl	8001d86 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d11a      	bne.n	8001f56 <LL_GPIO_Init+0xb2>
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	60bb      	str	r3, [r7, #8]
  return result;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b07      	cmp	r3, #7
 8001f36:	d807      	bhi.n	8001f48 <LL_GPIO_Init+0xa4>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff4f 	bl	8001de4 <LL_GPIO_SetAFPin_0_7>
 8001f46:	e006      	b.n	8001f56 <LL_GPIO_Init+0xb2>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff76 	bl	8001e42 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ae      	bne.n	8001ec8 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d003      	beq.n	8001f7a <LL_GPIO_Init+0xd6>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <LL_GPIO_Init+0xe6>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6819      	ldr	r1, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	461a      	mov	r2, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff feb7 	bl	8001cf8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <LL_RCC_HSI_IsReady>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <LL_RCC_HSI_IsReady+0x20>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <LL_RCC_LSE_IsReady>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <LL_RCC_LSE_IsReady+0x20>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000

08001fdc <LL_RCC_GetSysClkSource>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <LL_RCC_GetSysClkSource+0x18>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <LL_RCC_GetAHBPrescaler>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <LL_RCC_GetAHBPrescaler+0x18>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000

08002014 <LL_RCC_GetAPB1Prescaler>:
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <LL_RCC_GetAPB1Prescaler+0x18>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <LL_RCC_GetAPB2Prescaler>:
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <LL_RCC_GetUSARTClockSource+0x28>)
 8002056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002058:	2103      	movs	r1, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	4313      	orrs	r3, r2
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000

08002078 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <LL_RCC_PLL_GetMainSource+0x18>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <LL_RCC_PLL_GetMultiplicator+0x18>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000

080020b0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <LL_RCC_PLL_GetPrediv+0x18>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f003 030f 	and.w	r3, r3, #15
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000

080020cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80020d4:	f000 f860 	bl	8002198 <RCC_GetSystemClockFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f87a 	bl	80021dc <RCC_GetHCLKClockFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f888 	bl	8002208 <RCC_GetPCLK1ClockFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f894 	bl	8002230 <RCC_GetPCLK2ClockFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60da      	str	r2, [r3, #12]
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d12a      	bne.n	8002180 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff8e 	bl	800204c <LL_RCC_GetUSARTClockSource>
 8002130:	4603      	mov	r3, r0
 8002132:	2b02      	cmp	r3, #2
 8002134:	d00f      	beq.n	8002156 <LL_RCC_GetUSARTClockFreq+0x3e>
 8002136:	2b03      	cmp	r3, #3
 8002138:	d005      	beq.n	8002146 <LL_RCC_GetUSARTClockFreq+0x2e>
 800213a:	2b01      	cmp	r3, #1
 800213c:	d114      	bne.n	8002168 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800213e:	f000 f82b 	bl	8002198 <RCC_GetSystemClockFreq>
 8002142:	60f8      	str	r0, [r7, #12]
        break;
 8002144:	e021      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002146:	f7ff ff25 	bl	8001f94 <LL_RCC_HSI_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d019      	beq.n	8002184 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8002152:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002154:	e016      	b.n	8002184 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002156:	f7ff ff2f 	bl	8001fb8 <LL_RCC_LSE_IsReady>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8002160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002164:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002166:	e00f      	b.n	8002188 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002168:	f000 f816 	bl	8002198 <RCC_GetSystemClockFreq>
 800216c:	4603      	mov	r3, r0
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f834 	bl	80021dc <RCC_GetHCLKClockFreq>
 8002174:	4603      	mov	r3, r0
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f846 	bl	8002208 <RCC_GetPCLK1ClockFreq>
 800217c:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800217e:	e004      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8002180:	bf00      	nop
 8002182:	e002      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002184:	bf00      	nop
 8002186:	e000      	b.n	800218a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002188:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	007a1200 	.word	0x007a1200

08002198 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80021a2:	f7ff ff1b 	bl	8001fdc <LL_RCC_GetSysClkSource>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d006      	beq.n	80021ba <RCC_GetSystemClockFreq+0x22>
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d007      	beq.n	80021c0 <RCC_GetSystemClockFreq+0x28>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <RCC_GetSystemClockFreq+0x40>)
 80021b6:	607b      	str	r3, [r7, #4]
      break;
 80021b8:	e009      	b.n	80021ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <RCC_GetSystemClockFreq+0x40>)
 80021bc:	607b      	str	r3, [r7, #4]
      break;
 80021be:	e006      	b.n	80021ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80021c0:	f000 f84a 	bl	8002258 <RCC_PLL_GetFreqDomain_SYS>
 80021c4:	6078      	str	r0, [r7, #4]
      break;
 80021c6:	e002      	b.n	80021ce <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <RCC_GetSystemClockFreq+0x40>)
 80021ca:	607b      	str	r3, [r7, #4]
      break;
 80021cc:	bf00      	nop
  }

  return frequency;
 80021ce:	687b      	ldr	r3, [r7, #4]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	007a1200 	.word	0x007a1200

080021dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80021e4:	f7ff ff08 	bl	8001ff8 <LL_RCC_GetAHBPrescaler>
 80021e8:	4603      	mov	r3, r0
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <RCC_GetHCLKClockFreq+0x28>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	40d3      	lsrs	r3, r2
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	08003144 	.word	0x08003144

08002208 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002210:	f7ff ff00 	bl	8002014 <LL_RCC_GetAPB1Prescaler>
 8002214:	4603      	mov	r3, r0
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <RCC_GetPCLK1ClockFreq+0x24>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	40d3      	lsrs	r3, r2
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	08003154 	.word	0x08003154

08002230 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002238:	f7ff fefa 	bl	8002030 <LL_RCC_GetAPB2Prescaler>
 800223c:	4603      	mov	r3, r0
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <RCC_GetPCLK2ClockFreq+0x24>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	40d3      	lsrs	r3, r2
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	08003154 	.word	0x08003154

08002258 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002266:	f7ff ff07 	bl	8002078 <LL_RCC_PLL_GetMainSource>
 800226a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d003      	beq.n	8002280 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002278:	e005      	b.n	8002286 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800227c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800227e:	e005      	b.n	800228c <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002282:	60fb      	str	r3, [r7, #12]
      break;
 8002284:	e002      	b.n	800228c <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002288:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800228a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800228c:	f7ff ff10 	bl	80020b0 <LL_RCC_PLL_GetPrediv>
 8002290:	4603      	mov	r3, r0
 8002292:	3301      	adds	r3, #1
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	fbb2 f4f3 	udiv	r4, r2, r3
 800229a:	f7ff fefb 	bl	8002094 <LL_RCC_PLL_GetMultiplicator>
 800229e:	4603      	mov	r3, r0
 80022a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	603a      	str	r2, [r7, #0]
  return result;
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	fab2 f282 	clz	r2, r2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	40d3      	lsrs	r3, r2
 80022bc:	3302      	adds	r3, #2
 80022be:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	003d0900 	.word	0x003d0900
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <LL_TIM_SetPrescaler>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_TIM_SetAutoReload>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_TIM_SetRepetitionCounter>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	615a      	str	r2, [r3, #20]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <LL_TIM_Init+0xd0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <LL_TIM_Init+0x28>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002366:	d003      	beq.n	8002370 <LL_TIM_Init+0x28>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a2c      	ldr	r2, [pc, #176]	; (800241c <LL_TIM_Init+0xd4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d106      	bne.n	800237e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a25      	ldr	r2, [pc, #148]	; (8002418 <LL_TIM_Init+0xd0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <LL_TIM_Init+0x66>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d00f      	beq.n	80023ae <LL_TIM_Init+0x66>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a22      	ldr	r2, [pc, #136]	; (800241c <LL_TIM_Init+0xd4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00b      	beq.n	80023ae <LL_TIM_Init+0x66>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <LL_TIM_Init+0xd8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <LL_TIM_Init+0x66>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <LL_TIM_Init+0xdc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <LL_TIM_Init+0x66>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <LL_TIM_Init+0xe0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d106      	bne.n	80023bc <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff91 	bl	80022f0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff7d 	bl	80022d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LL_TIM_Init+0xd0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <LL_TIM_Init+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <LL_TIM_Init+0xd8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <LL_TIM_Init+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <LL_TIM_Init+0xdc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <LL_TIM_Init+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <LL_TIM_Init+0xe0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d105      	bne.n	8002406 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7c1b      	ldrb	r3, [r3, #16]
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff83 	bl	800230c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff8e 	bl	8002328 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400
 8002420:	40014000 	.word	0x40014000
 8002424:	40014400 	.word	0x40014400
 8002428:	40014800 	.word	0x40014800

0800242c <LL_USART_IsEnabled>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <LL_USART_IsEnabled+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_USART_IsEnabled+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_USART_SetStopBitsLength>:
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	605a      	str	r2, [r3, #4]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_USART_SetHWFlowCtrl>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_USART_SetBaudRate>:
{
 800249e:	b490      	push	{r4, r7}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b2:	d116      	bne.n	80024e2 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	005a      	lsls	r2, r3, #1
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	441a      	add	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80024ce:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	60dc      	str	r4, [r3, #12]
}
 80024e0:	e00a      	b.n	80024f8 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	085a      	lsrs	r2, r3, #1
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	441a      	add	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	60da      	str	r2, [r3, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc90      	pop	{r4, r7}
 8002500:	4770      	bx	lr
	...

08002504 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff88 	bl	800242c <LL_USART_IsEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d14e      	bne.n	80025c0 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <LL_USART_Init+0xc8>)
 8002528:	4013      	ands	r3, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6851      	ldr	r1, [r2, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	6912      	ldr	r2, [r2, #16]
 8002538:	4311      	orrs	r1, r2
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6992      	ldr	r2, [r2, #24]
 800253e:	430a      	orrs	r2, r1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff80 	bl	8002452 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff8d 	bl	8002478 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <LL_USART_Init+0xcc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d104      	bne.n	8002570 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff fdd6 	bl	8002118 <LL_RCC_GetUSARTClockFreq>
 800256c:	61b8      	str	r0, [r7, #24]
 800256e:	e016      	b.n	800259e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <LL_USART_Init+0xd0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d107      	bne.n	8002588 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fda5 	bl	80020cc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	e00a      	b.n	800259e <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <LL_USART_Init+0xd4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d106      	bne.n	800259e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fd99 	bl	80020cc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80025ac:	2300      	movs	r3, #0
 80025ae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69b9      	ldr	r1, [r7, #24]
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff6f 	bl	800249e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	efff69f3 	.word	0xefff69f3
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40004800 	.word	0x40004800

080025dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4a07      	ldr	r2, [pc, #28]	; (800260c <LL_InitTick+0x30>)
 80025f0:	3b01      	subs	r3, #1
 80025f2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <LL_InitTick+0x30>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <LL_InitTick+0x30>)
 80025fc:	2205      	movs	r2, #5
 80025fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e010 	.word	0xe000e010

08002610 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002618:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ffdd 	bl	80025dc <LL_InitTick>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <LL_SetSystemCoreClock+0x1c>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000

0800264c <floorf>:
 800264c:	ee10 3a10 	vmov	r3, s0
 8002650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002654:	0dca      	lsrs	r2, r1, #23
 8002656:	3a7f      	subs	r2, #127	; 0x7f
 8002658:	2a16      	cmp	r2, #22
 800265a:	dc2a      	bgt.n	80026b2 <floorf+0x66>
 800265c:	2a00      	cmp	r2, #0
 800265e:	da11      	bge.n	8002684 <floorf+0x38>
 8002660:	eddf 7a18 	vldr	s15, [pc, #96]	; 80026c4 <floorf+0x78>
 8002664:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002668:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	dd05      	ble.n	800267e <floorf+0x32>
 8002672:	2b00      	cmp	r3, #0
 8002674:	da23      	bge.n	80026be <floorf+0x72>
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <floorf+0x7c>)
 8002678:	2900      	cmp	r1, #0
 800267a:	bf18      	it	ne
 800267c:	4613      	movne	r3, r2
 800267e:	ee00 3a10 	vmov	s0, r3
 8002682:	4770      	bx	lr
 8002684:	4911      	ldr	r1, [pc, #68]	; (80026cc <floorf+0x80>)
 8002686:	4111      	asrs	r1, r2
 8002688:	420b      	tst	r3, r1
 800268a:	d0fa      	beq.n	8002682 <floorf+0x36>
 800268c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80026c4 <floorf+0x78>
 8002690:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002694:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	ddef      	ble.n	800267e <floorf+0x32>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bfbe      	ittt	lt
 80026a2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80026a6:	fa40 f202 	asrlt.w	r2, r0, r2
 80026aa:	189b      	addlt	r3, r3, r2
 80026ac:	ea23 0301 	bic.w	r3, r3, r1
 80026b0:	e7e5      	b.n	800267e <floorf+0x32>
 80026b2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80026b6:	d3e4      	bcc.n	8002682 <floorf+0x36>
 80026b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80026bc:	4770      	bx	lr
 80026be:	2300      	movs	r3, #0
 80026c0:	e7dd      	b.n	800267e <floorf+0x32>
 80026c2:	bf00      	nop
 80026c4:	7149f2ca 	.word	0x7149f2ca
 80026c8:	bf800000 	.word	0xbf800000
 80026cc:	007fffff 	.word	0x007fffff

080026d0 <sinf>:
 80026d0:	ee10 3a10 	vmov	r3, s0
 80026d4:	b507      	push	{r0, r1, r2, lr}
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <sinf+0x7c>)
 80026d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026dc:	4293      	cmp	r3, r2
 80026de:	dc05      	bgt.n	80026ec <sinf+0x1c>
 80026e0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002750 <sinf+0x80>
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 fc41 	bl	8002f6c <__kernel_sinf>
 80026ea:	e004      	b.n	80026f6 <sinf+0x26>
 80026ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80026f0:	db04      	blt.n	80026fc <sinf+0x2c>
 80026f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80026f6:	b003      	add	sp, #12
 80026f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80026fc:	4668      	mov	r0, sp
 80026fe:	f000 f829 	bl	8002754 <__ieee754_rem_pio2f>
 8002702:	f000 0003 	and.w	r0, r0, #3
 8002706:	2801      	cmp	r0, #1
 8002708:	d008      	beq.n	800271c <sinf+0x4c>
 800270a:	2802      	cmp	r0, #2
 800270c:	d00d      	beq.n	800272a <sinf+0x5a>
 800270e:	b9b0      	cbnz	r0, 800273e <sinf+0x6e>
 8002710:	2001      	movs	r0, #1
 8002712:	eddd 0a01 	vldr	s1, [sp, #4]
 8002716:	ed9d 0a00 	vldr	s0, [sp]
 800271a:	e7e4      	b.n	80026e6 <sinf+0x16>
 800271c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002720:	ed9d 0a00 	vldr	s0, [sp]
 8002724:	f000 f942 	bl	80029ac <__kernel_cosf>
 8002728:	e7e5      	b.n	80026f6 <sinf+0x26>
 800272a:	2001      	movs	r0, #1
 800272c:	eddd 0a01 	vldr	s1, [sp, #4]
 8002730:	ed9d 0a00 	vldr	s0, [sp]
 8002734:	f000 fc1a 	bl	8002f6c <__kernel_sinf>
 8002738:	eeb1 0a40 	vneg.f32	s0, s0
 800273c:	e7db      	b.n	80026f6 <sinf+0x26>
 800273e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002742:	ed9d 0a00 	vldr	s0, [sp]
 8002746:	f000 f931 	bl	80029ac <__kernel_cosf>
 800274a:	e7f5      	b.n	8002738 <sinf+0x68>
 800274c:	3f490fd8 	.word	0x3f490fd8
 8002750:	00000000 	.word	0x00000000

08002754 <__ieee754_rem_pio2f>:
 8002754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002756:	ee10 6a10 	vmov	r6, s0
 800275a:	4b86      	ldr	r3, [pc, #536]	; (8002974 <__ieee754_rem_pio2f+0x220>)
 800275c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8002760:	429c      	cmp	r4, r3
 8002762:	b087      	sub	sp, #28
 8002764:	4605      	mov	r5, r0
 8002766:	dc05      	bgt.n	8002774 <__ieee754_rem_pio2f+0x20>
 8002768:	2300      	movs	r3, #0
 800276a:	ed85 0a00 	vstr	s0, [r5]
 800276e:	6043      	str	r3, [r0, #4]
 8002770:	2000      	movs	r0, #0
 8002772:	e020      	b.n	80027b6 <__ieee754_rem_pio2f+0x62>
 8002774:	4b80      	ldr	r3, [pc, #512]	; (8002978 <__ieee754_rem_pio2f+0x224>)
 8002776:	429c      	cmp	r4, r3
 8002778:	dc38      	bgt.n	80027ec <__ieee754_rem_pio2f+0x98>
 800277a:	2e00      	cmp	r6, #0
 800277c:	f024 040f 	bic.w	r4, r4, #15
 8002780:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800297c <__ieee754_rem_pio2f+0x228>
 8002784:	4b7e      	ldr	r3, [pc, #504]	; (8002980 <__ieee754_rem_pio2f+0x22c>)
 8002786:	dd18      	ble.n	80027ba <__ieee754_rem_pio2f+0x66>
 8002788:	429c      	cmp	r4, r3
 800278a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800278e:	bf09      	itett	eq
 8002790:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8002984 <__ieee754_rem_pio2f+0x230>
 8002794:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8002988 <__ieee754_rem_pio2f+0x234>
 8002798:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800279c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800298c <__ieee754_rem_pio2f+0x238>
 80027a0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80027a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027a8:	edc0 6a00 	vstr	s13, [r0]
 80027ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b0:	edc0 7a01 	vstr	s15, [r0, #4]
 80027b4:	2001      	movs	r0, #1
 80027b6:	b007      	add	sp, #28
 80027b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ba:	429c      	cmp	r4, r3
 80027bc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80027c0:	bf09      	itett	eq
 80027c2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8002984 <__ieee754_rem_pio2f+0x230>
 80027c6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8002988 <__ieee754_rem_pio2f+0x234>
 80027ca:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80027ce:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800298c <__ieee754_rem_pio2f+0x238>
 80027d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80027d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027da:	edc0 6a00 	vstr	s13, [r0]
 80027de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027e2:	edc0 7a01 	vstr	s15, [r0, #4]
 80027e6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ea:	e7e4      	b.n	80027b6 <__ieee754_rem_pio2f+0x62>
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <__ieee754_rem_pio2f+0x23c>)
 80027ee:	429c      	cmp	r4, r3
 80027f0:	dc71      	bgt.n	80028d6 <__ieee754_rem_pio2f+0x182>
 80027f2:	f000 fc03 	bl	8002ffc <fabsf>
 80027f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002994 <__ieee754_rem_pio2f+0x240>
 80027fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80027fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002806:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800280a:	ee17 0a90 	vmov	r0, s15
 800280e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800297c <__ieee754_rem_pio2f+0x228>
 8002812:	eeb1 7a46 	vneg.f32	s14, s12
 8002816:	eea7 0a27 	vfma.f32	s0, s14, s15
 800281a:	281f      	cmp	r0, #31
 800281c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8002988 <__ieee754_rem_pio2f+0x234>
 8002820:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002824:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002828:	ee16 3a90 	vmov	r3, s13
 800282c:	dc1c      	bgt.n	8002868 <__ieee754_rem_pio2f+0x114>
 800282e:	1e47      	subs	r7, r0, #1
 8002830:	4959      	ldr	r1, [pc, #356]	; (8002998 <__ieee754_rem_pio2f+0x244>)
 8002832:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002836:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800283a:	428a      	cmp	r2, r1
 800283c:	d014      	beq.n	8002868 <__ieee754_rem_pio2f+0x114>
 800283e:	602b      	str	r3, [r5, #0]
 8002840:	ed95 7a00 	vldr	s14, [r5]
 8002844:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002848:	2e00      	cmp	r6, #0
 800284a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800284e:	ed85 0a01 	vstr	s0, [r5, #4]
 8002852:	dab0      	bge.n	80027b6 <__ieee754_rem_pio2f+0x62>
 8002854:	eeb1 7a47 	vneg.f32	s14, s14
 8002858:	eeb1 0a40 	vneg.f32	s0, s0
 800285c:	ed85 7a00 	vstr	s14, [r5]
 8002860:	ed85 0a01 	vstr	s0, [r5, #4]
 8002864:	4240      	negs	r0, r0
 8002866:	e7a6      	b.n	80027b6 <__ieee754_rem_pio2f+0x62>
 8002868:	15e4      	asrs	r4, r4, #23
 800286a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800286e:	1aa2      	subs	r2, r4, r2
 8002870:	2a08      	cmp	r2, #8
 8002872:	dde4      	ble.n	800283e <__ieee754_rem_pio2f+0xea>
 8002874:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002984 <__ieee754_rem_pio2f+0x230>
 8002878:	eef0 6a40 	vmov.f32	s13, s0
 800287c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002880:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002884:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002888:	eddf 7a40 	vldr	s15, [pc, #256]	; 800298c <__ieee754_rem_pio2f+0x238>
 800288c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8002890:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8002894:	eef0 7a40 	vmov.f32	s15, s0
 8002898:	ee15 3a90 	vmov	r3, s11
 800289c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80028a0:	1aa4      	subs	r4, r4, r2
 80028a2:	2c19      	cmp	r4, #25
 80028a4:	dc04      	bgt.n	80028b0 <__ieee754_rem_pio2f+0x15c>
 80028a6:	edc5 5a00 	vstr	s11, [r5]
 80028aa:	eeb0 0a66 	vmov.f32	s0, s13
 80028ae:	e7c7      	b.n	8002840 <__ieee754_rem_pio2f+0xec>
 80028b0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800299c <__ieee754_rem_pio2f+0x248>
 80028b4:	eeb0 0a66 	vmov.f32	s0, s13
 80028b8:	eea7 0a25 	vfma.f32	s0, s14, s11
 80028bc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80028c0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80028c4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80029a0 <__ieee754_rem_pio2f+0x24c>
 80028c8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80028cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80028d0:	ed85 7a00 	vstr	s14, [r5]
 80028d4:	e7b4      	b.n	8002840 <__ieee754_rem_pio2f+0xec>
 80028d6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80028da:	db06      	blt.n	80028ea <__ieee754_rem_pio2f+0x196>
 80028dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80028e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80028e4:	edc0 7a00 	vstr	s15, [r0]
 80028e8:	e742      	b.n	8002770 <__ieee754_rem_pio2f+0x1c>
 80028ea:	15e2      	asrs	r2, r4, #23
 80028ec:	3a86      	subs	r2, #134	; 0x86
 80028ee:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80028fa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80029a4 <__ieee754_rem_pio2f+0x250>
 80028fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002906:	ed8d 7a03 	vstr	s14, [sp, #12]
 800290a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800290e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002912:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800291a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800291e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002922:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292a:	edcd 7a05 	vstr	s15, [sp, #20]
 800292e:	d11e      	bne.n	800296e <__ieee754_rem_pio2f+0x21a>
 8002930:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2302      	movne	r3, #2
 800293e:	491a      	ldr	r1, [pc, #104]	; (80029a8 <__ieee754_rem_pio2f+0x254>)
 8002940:	9101      	str	r1, [sp, #4]
 8002942:	2102      	movs	r1, #2
 8002944:	9100      	str	r1, [sp, #0]
 8002946:	a803      	add	r0, sp, #12
 8002948:	4629      	mov	r1, r5
 800294a:	f000 f88d 	bl	8002a68 <__kernel_rem_pio2f>
 800294e:	2e00      	cmp	r6, #0
 8002950:	f6bf af31 	bge.w	80027b6 <__ieee754_rem_pio2f+0x62>
 8002954:	edd5 7a00 	vldr	s15, [r5]
 8002958:	eef1 7a67 	vneg.f32	s15, s15
 800295c:	edc5 7a00 	vstr	s15, [r5]
 8002960:	edd5 7a01 	vldr	s15, [r5, #4]
 8002964:	eef1 7a67 	vneg.f32	s15, s15
 8002968:	edc5 7a01 	vstr	s15, [r5, #4]
 800296c:	e77a      	b.n	8002864 <__ieee754_rem_pio2f+0x110>
 800296e:	2303      	movs	r3, #3
 8002970:	e7e5      	b.n	800293e <__ieee754_rem_pio2f+0x1ea>
 8002972:	bf00      	nop
 8002974:	3f490fd8 	.word	0x3f490fd8
 8002978:	4016cbe3 	.word	0x4016cbe3
 800297c:	3fc90f80 	.word	0x3fc90f80
 8002980:	3fc90fd0 	.word	0x3fc90fd0
 8002984:	37354400 	.word	0x37354400
 8002988:	37354443 	.word	0x37354443
 800298c:	2e85a308 	.word	0x2e85a308
 8002990:	43490f80 	.word	0x43490f80
 8002994:	3f22f984 	.word	0x3f22f984
 8002998:	0800315c 	.word	0x0800315c
 800299c:	2e85a300 	.word	0x2e85a300
 80029a0:	248d3132 	.word	0x248d3132
 80029a4:	43800000 	.word	0x43800000
 80029a8:	080031dc 	.word	0x080031dc

080029ac <__kernel_cosf>:
 80029ac:	ee10 3a10 	vmov	r3, s0
 80029b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80029b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029bc:	da05      	bge.n	80029ca <__kernel_cosf+0x1e>
 80029be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80029c2:	ee17 2a90 	vmov	r2, s15
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	d03b      	beq.n	8002a42 <__kernel_cosf+0x96>
 80029ca:	ee20 6a00 	vmul.f32	s12, s0, s0
 80029ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a48 <__kernel_cosf+0x9c>
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <__kernel_cosf+0xa0>)
 80029d8:	ee66 7a07 	vmul.f32	s15, s12, s14
 80029dc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a50 <__kernel_cosf+0xa4>
 80029e0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80029e4:	4293      	cmp	r3, r2
 80029e6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8002a54 <__kernel_cosf+0xa8>
 80029ea:	eee7 5a06 	vfma.f32	s11, s14, s12
 80029ee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002a58 <__kernel_cosf+0xac>
 80029f2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80029f6:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002a5c <__kernel_cosf+0xb0>
 80029fa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80029fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002a60 <__kernel_cosf+0xb4>
 8002a02:	eea5 7a86 	vfma.f32	s14, s11, s12
 8002a06:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002a0a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002a0e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8002a12:	dc04      	bgt.n	8002a1e <__kernel_cosf+0x72>
 8002a14:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8002a18:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002a1c:	4770      	bx	lr
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <__kernel_cosf+0xb8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfda      	itte	le
 8002a24:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002a28:	ee07 3a10 	vmovle	s14, r3
 8002a2c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8002a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a34:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8002a38:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002a3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002a40:	4770      	bx	lr
 8002a42:	eeb0 0a66 	vmov.f32	s0, s13
 8002a46:	4770      	bx	lr
 8002a48:	ad47d74e 	.word	0xad47d74e
 8002a4c:	3e999999 	.word	0x3e999999
 8002a50:	310f74f6 	.word	0x310f74f6
 8002a54:	b493f27c 	.word	0xb493f27c
 8002a58:	37d00d01 	.word	0x37d00d01
 8002a5c:	bab60b61 	.word	0xbab60b61
 8002a60:	3d2aaaab 	.word	0x3d2aaaab
 8002a64:	3f480000 	.word	0x3f480000

08002a68 <__kernel_rem_pio2f>:
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6c:	ed2d 8b04 	vpush	{d8-d9}
 8002a70:	b0d7      	sub	sp, #348	; 0x15c
 8002a72:	469b      	mov	fp, r3
 8002a74:	460e      	mov	r6, r1
 8002a76:	4bbe      	ldr	r3, [pc, #760]	; (8002d70 <__kernel_rem_pio2f+0x308>)
 8002a78:	9964      	ldr	r1, [sp, #400]	; 0x190
 8002a7a:	9002      	str	r0, [sp, #8]
 8002a7c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8002a80:	9865      	ldr	r0, [sp, #404]	; 0x194
 8002a82:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002a86:	1ed1      	subs	r1, r2, #3
 8002a88:	2308      	movs	r3, #8
 8002a8a:	fb91 f1f3 	sdiv	r1, r1, r3
 8002a8e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002a92:	f10b 3aff 	add.w	sl, fp, #4294967295
 8002a96:	1c4c      	adds	r4, r1, #1
 8002a98:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8002a9c:	eba1 050a 	sub.w	r5, r1, sl
 8002aa0:	aa1a      	add	r2, sp, #104	; 0x68
 8002aa2:	eb09 070a 	add.w	r7, r9, sl
 8002aa6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8002aaa:	4696      	mov	lr, r2
 8002aac:	2300      	movs	r3, #0
 8002aae:	42bb      	cmp	r3, r7
 8002ab0:	dd0f      	ble.n	8002ad2 <__kernel_rem_pio2f+0x6a>
 8002ab2:	af42      	add	r7, sp, #264	; 0x108
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	454a      	cmp	r2, r9
 8002ab8:	dc27      	bgt.n	8002b0a <__kernel_rem_pio2f+0xa2>
 8002aba:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8002abe:	eb0b 0302 	add.w	r3, fp, r2
 8002ac2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8002ac6:	9d02      	ldr	r5, [sp, #8]
 8002ac8:	eddf 7aad 	vldr	s15, [pc, #692]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002acc:	f04f 0c00 	mov.w	ip, #0
 8002ad0:	e015      	b.n	8002afe <__kernel_rem_pio2f+0x96>
 8002ad2:	42dd      	cmn	r5, r3
 8002ad4:	bf5d      	ittte	pl
 8002ad6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8002ada:	ee07 2a90 	vmovpl	s15, r2
 8002ade:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8002ae2:	eef0 7a47 	vmovmi.f32	s15, s14
 8002ae6:	ecee 7a01 	vstmia	lr!, {s15}
 8002aea:	3301      	adds	r3, #1
 8002aec:	e7df      	b.n	8002aae <__kernel_rem_pio2f+0x46>
 8002aee:	ecf5 6a01 	vldmia	r5!, {s13}
 8002af2:	ed33 7a01 	vldmdb	r3!, {s14}
 8002af6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002afa:	f10c 0c01 	add.w	ip, ip, #1
 8002afe:	45d4      	cmp	ip, sl
 8002b00:	ddf5      	ble.n	8002aee <__kernel_rem_pio2f+0x86>
 8002b02:	ece7 7a01 	vstmia	r7!, {s15}
 8002b06:	3201      	adds	r2, #1
 8002b08:	e7d5      	b.n	8002ab6 <__kernel_rem_pio2f+0x4e>
 8002b0a:	ab06      	add	r3, sp, #24
 8002b0c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8002b10:	9304      	str	r3, [sp, #16]
 8002b12:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8002d7c <__kernel_rem_pio2f+0x314>
 8002b16:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8002d78 <__kernel_rem_pio2f+0x310>
 8002b1a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	464d      	mov	r5, r9
 8002b22:	ab56      	add	r3, sp, #344	; 0x158
 8002b24:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8002b28:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002b2c:	3f01      	subs	r7, #1
 8002b2e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8002b32:	00bf      	lsls	r7, r7, #2
 8002b34:	ab56      	add	r3, sp, #344	; 0x158
 8002b36:	19da      	adds	r2, r3, r7
 8002b38:	3a4c      	subs	r2, #76	; 0x4c
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	1ae9      	subs	r1, r5, r3
 8002b3e:	2900      	cmp	r1, #0
 8002b40:	dc4c      	bgt.n	8002bdc <__kernel_rem_pio2f+0x174>
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 fa62 	bl	800300c <scalbnf>
 8002b48:	eeb0 8a40 	vmov.f32	s16, s0
 8002b4c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8002b50:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002b54:	f7ff fd7a 	bl	800264c <floorf>
 8002b58:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002b5c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002b60:	2c00      	cmp	r4, #0
 8002b62:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002b66:	edcd 7a01 	vstr	s15, [sp, #4]
 8002b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002b72:	dd48      	ble.n	8002c06 <__kernel_rem_pio2f+0x19e>
 8002b74:	1e69      	subs	r1, r5, #1
 8002b76:	ab06      	add	r3, sp, #24
 8002b78:	f1c4 0008 	rsb	r0, r4, #8
 8002b7c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8002b80:	9a01      	ldr	r2, [sp, #4]
 8002b82:	fa4c f300 	asr.w	r3, ip, r0
 8002b86:	441a      	add	r2, r3
 8002b88:	4083      	lsls	r3, r0
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	ebac 0203 	sub.w	r2, ip, r3
 8002b90:	ab06      	add	r3, sp, #24
 8002b92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002b96:	f1c4 0307 	rsb	r3, r4, #7
 8002b9a:	fa42 f803 	asr.w	r8, r2, r3
 8002b9e:	f1b8 0f00 	cmp.w	r8, #0
 8002ba2:	dd41      	ble.n	8002c28 <__kernel_rem_pio2f+0x1c0>
 8002ba4:	9b01      	ldr	r3, [sp, #4]
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	3301      	adds	r3, #1
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	4601      	mov	r1, r0
 8002bae:	4285      	cmp	r5, r0
 8002bb0:	dc6d      	bgt.n	8002c8e <__kernel_rem_pio2f+0x226>
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	dd04      	ble.n	8002bc0 <__kernel_rem_pio2f+0x158>
 8002bb6:	2c01      	cmp	r4, #1
 8002bb8:	d07e      	beq.n	8002cb8 <__kernel_rem_pio2f+0x250>
 8002bba:	2c02      	cmp	r4, #2
 8002bbc:	f000 8086 	beq.w	8002ccc <__kernel_rem_pio2f+0x264>
 8002bc0:	f1b8 0f02 	cmp.w	r8, #2
 8002bc4:	d130      	bne.n	8002c28 <__kernel_rem_pio2f+0x1c0>
 8002bc6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bca:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002bce:	b359      	cbz	r1, 8002c28 <__kernel_rem_pio2f+0x1c0>
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f000 fa1b 	bl	800300c <scalbnf>
 8002bd6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002bda:	e025      	b.n	8002c28 <__kernel_rem_pio2f+0x1c0>
 8002bdc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002be0:	a806      	add	r0, sp, #24
 8002be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bea:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002bee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002bf2:	ee10 1a10 	vmov	r1, s0
 8002bf6:	ed32 0a01 	vldmdb	r2!, {s0}
 8002bfa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8002bfe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002c02:	3301      	adds	r3, #1
 8002c04:	e79a      	b.n	8002b3c <__kernel_rem_pio2f+0xd4>
 8002c06:	d106      	bne.n	8002c16 <__kernel_rem_pio2f+0x1ae>
 8002c08:	1e6b      	subs	r3, r5, #1
 8002c0a:	aa06      	add	r2, sp, #24
 8002c0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c10:	ea4f 2822 	mov.w	r8, r2, asr #8
 8002c14:	e7c3      	b.n	8002b9e <__kernel_rem_pio2f+0x136>
 8002c16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	da31      	bge.n	8002c88 <__kernel_rem_pio2f+0x220>
 8002c24:	f04f 0800 	mov.w	r8, #0
 8002c28:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	f040 80a8 	bne.w	8002d84 <__kernel_rem_pio2f+0x31c>
 8002c34:	1e6b      	subs	r3, r5, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4548      	cmp	r0, r9
 8002c3c:	da4d      	bge.n	8002cda <__kernel_rem_pio2f+0x272>
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	f000 8087 	beq.w	8002d52 <__kernel_rem_pio2f+0x2ea>
 8002c44:	aa06      	add	r2, sp, #24
 8002c46:	3c08      	subs	r4, #8
 8002c48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	f000 808d 	beq.w	8002d6c <__kernel_rem_pio2f+0x304>
 8002c52:	4620      	mov	r0, r4
 8002c54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	f000 f9d7 	bl	800300c <scalbnf>
 8002c5e:	9b02      	ldr	r3, [sp, #8]
 8002c60:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002d7c <__kernel_rem_pio2f+0x314>
 8002c64:	0099      	lsls	r1, r3, #2
 8002c66:	aa42      	add	r2, sp, #264	; 0x108
 8002c68:	1850      	adds	r0, r2, r1
 8002c6a:	1d05      	adds	r5, r0, #4
 8002c6c:	461c      	mov	r4, r3
 8002c6e:	2c00      	cmp	r4, #0
 8002c70:	f280 80b8 	bge.w	8002de4 <__kernel_rem_pio2f+0x37c>
 8002c74:	2500      	movs	r5, #0
 8002c76:	1b5c      	subs	r4, r3, r5
 8002c78:	2c00      	cmp	r4, #0
 8002c7a:	f2c0 80d8 	blt.w	8002e2e <__kernel_rem_pio2f+0x3c6>
 8002c7e:	4f3d      	ldr	r7, [pc, #244]	; (8002d74 <__kernel_rem_pio2f+0x30c>)
 8002c80:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002c84:	2400      	movs	r4, #0
 8002c86:	e0c6      	b.n	8002e16 <__kernel_rem_pio2f+0x3ae>
 8002c88:	f04f 0802 	mov.w	r8, #2
 8002c8c:	e78a      	b.n	8002ba4 <__kernel_rem_pio2f+0x13c>
 8002c8e:	ab06      	add	r3, sp, #24
 8002c90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002c94:	b949      	cbnz	r1, 8002caa <__kernel_rem_pio2f+0x242>
 8002c96:	b12b      	cbz	r3, 8002ca4 <__kernel_rem_pio2f+0x23c>
 8002c98:	aa06      	add	r2, sp, #24
 8002c9a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002c9e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	e781      	b.n	8002bae <__kernel_rem_pio2f+0x146>
 8002caa:	aa06      	add	r2, sp, #24
 8002cac:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002cb0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	e7f5      	b.n	8002ca4 <__kernel_rem_pio2f+0x23c>
 8002cb8:	1e68      	subs	r0, r5, #1
 8002cba:	ab06      	add	r3, sp, #24
 8002cbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cc4:	aa06      	add	r2, sp, #24
 8002cc6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002cca:	e779      	b.n	8002bc0 <__kernel_rem_pio2f+0x158>
 8002ccc:	1e68      	subs	r0, r5, #1
 8002cce:	ab06      	add	r3, sp, #24
 8002cd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd8:	e7f4      	b.n	8002cc4 <__kernel_rem_pio2f+0x25c>
 8002cda:	a906      	add	r1, sp, #24
 8002cdc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002ce0:	3801      	subs	r0, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	e7a9      	b.n	8002c3a <__kernel_rem_pio2f+0x1d2>
 8002ce6:	f10c 0c01 	add.w	ip, ip, #1
 8002cea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	d0f9      	beq.n	8002ce6 <__kernel_rem_pio2f+0x27e>
 8002cf2:	eb0b 0305 	add.w	r3, fp, r5
 8002cf6:	aa1a      	add	r2, sp, #104	; 0x68
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	1898      	adds	r0, r3, r2
 8002cfc:	3004      	adds	r0, #4
 8002cfe:	1c69      	adds	r1, r5, #1
 8002d00:	3704      	adds	r7, #4
 8002d02:	2200      	movs	r2, #0
 8002d04:	4465      	add	r5, ip
 8002d06:	9005      	str	r0, [sp, #20]
 8002d08:	428d      	cmp	r5, r1
 8002d0a:	f6ff af0a 	blt.w	8002b22 <__kernel_rem_pio2f+0xba>
 8002d0e:	a81a      	add	r0, sp, #104	; 0x68
 8002d10:	eb02 0c03 	add.w	ip, r2, r3
 8002d14:	4484      	add	ip, r0
 8002d16:	9803      	ldr	r0, [sp, #12]
 8002d18:	f8dd e008 	ldr.w	lr, [sp, #8]
 8002d1c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8002d20:	9001      	str	r0, [sp, #4]
 8002d22:	ee07 0a90 	vmov	s15, r0
 8002d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2a:	9805      	ldr	r0, [sp, #20]
 8002d2c:	edcc 7a00 	vstr	s15, [ip]
 8002d30:	eddf 7a13 	vldr	s15, [pc, #76]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002d34:	eb00 0802 	add.w	r8, r0, r2
 8002d38:	f04f 0c00 	mov.w	ip, #0
 8002d3c:	45d4      	cmp	ip, sl
 8002d3e:	dd0c      	ble.n	8002d5a <__kernel_rem_pio2f+0x2f2>
 8002d40:	eb02 0c07 	add.w	ip, r2, r7
 8002d44:	a842      	add	r0, sp, #264	; 0x108
 8002d46:	4484      	add	ip, r0
 8002d48:	edcc 7a01 	vstr	s15, [ip, #4]
 8002d4c:	3101      	adds	r1, #1
 8002d4e:	3204      	adds	r2, #4
 8002d50:	e7da      	b.n	8002d08 <__kernel_rem_pio2f+0x2a0>
 8002d52:	9b04      	ldr	r3, [sp, #16]
 8002d54:	f04f 0c01 	mov.w	ip, #1
 8002d58:	e7c7      	b.n	8002cea <__kernel_rem_pio2f+0x282>
 8002d5a:	ecfe 6a01 	vldmia	lr!, {s13}
 8002d5e:	ed38 7a01 	vldmdb	r8!, {s14}
 8002d62:	f10c 0c01 	add.w	ip, ip, #1
 8002d66:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002d6a:	e7e7      	b.n	8002d3c <__kernel_rem_pio2f+0x2d4>
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	e769      	b.n	8002c44 <__kernel_rem_pio2f+0x1dc>
 8002d70:	08003520 	.word	0x08003520
 8002d74:	080034f4 	.word	0x080034f4
 8002d78:	43800000 	.word	0x43800000
 8002d7c:	3b800000 	.word	0x3b800000
 8002d80:	00000000 	.word	0x00000000
 8002d84:	4260      	negs	r0, r4
 8002d86:	eeb0 0a48 	vmov.f32	s0, s16
 8002d8a:	f000 f93f 	bl	800300c <scalbnf>
 8002d8e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8002d78 <__kernel_rem_pio2f+0x310>
 8002d92:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	db1a      	blt.n	8002dd2 <__kernel_rem_pio2f+0x36a>
 8002d9c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8002d7c <__kernel_rem_pio2f+0x314>
 8002da0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8002da4:	aa06      	add	r2, sp, #24
 8002da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002daa:	a906      	add	r1, sp, #24
 8002dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db0:	3408      	adds	r4, #8
 8002db2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002dbe:	ee10 3a10 	vmov	r3, s0
 8002dc2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002dc6:	1c6b      	adds	r3, r5, #1
 8002dc8:	ee17 2a90 	vmov	r2, s15
 8002dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002dd0:	e73f      	b.n	8002c52 <__kernel_rem_pio2f+0x1ea>
 8002dd2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002dd6:	aa06      	add	r2, sp, #24
 8002dd8:	ee10 3a10 	vmov	r3, s0
 8002ddc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8002de0:	462b      	mov	r3, r5
 8002de2:	e736      	b.n	8002c52 <__kernel_rem_pio2f+0x1ea>
 8002de4:	aa06      	add	r2, sp, #24
 8002de6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002dea:	9202      	str	r2, [sp, #8]
 8002dec:	ee07 2a90 	vmov	s15, r2
 8002df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002df4:	3c01      	subs	r4, #1
 8002df6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8002dfa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002dfe:	ed65 7a01 	vstmdb	r5!, {s15}
 8002e02:	e734      	b.n	8002c6e <__kernel_rem_pio2f+0x206>
 8002e04:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8002e08:	ecf7 6a01 	vldmia	r7!, {s13}
 8002e0c:	ed9c 7a00 	vldr	s14, [ip]
 8002e10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002e14:	3401      	adds	r4, #1
 8002e16:	454c      	cmp	r4, r9
 8002e18:	dc01      	bgt.n	8002e1e <__kernel_rem_pio2f+0x3b6>
 8002e1a:	42a5      	cmp	r5, r4
 8002e1c:	daf2      	bge.n	8002e04 <__kernel_rem_pio2f+0x39c>
 8002e1e:	aa56      	add	r2, sp, #344	; 0x158
 8002e20:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8002e24:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8002e28:	3501      	adds	r5, #1
 8002e2a:	3804      	subs	r0, #4
 8002e2c:	e723      	b.n	8002c76 <__kernel_rem_pio2f+0x20e>
 8002e2e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8002e30:	2a03      	cmp	r2, #3
 8002e32:	d84d      	bhi.n	8002ed0 <__kernel_rem_pio2f+0x468>
 8002e34:	e8df f002 	tbb	[pc, r2]
 8002e38:	021f1f3e 	.word	0x021f1f3e
 8002e3c:	aa56      	add	r2, sp, #344	; 0x158
 8002e3e:	4411      	add	r1, r2
 8002e40:	399c      	subs	r1, #156	; 0x9c
 8002e42:	4608      	mov	r0, r1
 8002e44:	461c      	mov	r4, r3
 8002e46:	2c00      	cmp	r4, #0
 8002e48:	dc5f      	bgt.n	8002f0a <__kernel_rem_pio2f+0x4a2>
 8002e4a:	4608      	mov	r0, r1
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	2c01      	cmp	r4, #1
 8002e50:	dc6b      	bgt.n	8002f2a <__kernel_rem_pio2f+0x4c2>
 8002e52:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	dc77      	bgt.n	8002f4a <__kernel_rem_pio2f+0x4e2>
 8002e5a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8002e5e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8002e62:	f1b8 0f00 	cmp.w	r8, #0
 8002e66:	d176      	bne.n	8002f56 <__kernel_rem_pio2f+0x4ee>
 8002e68:	edc6 6a00 	vstr	s13, [r6]
 8002e6c:	ed86 7a01 	vstr	s14, [r6, #4]
 8002e70:	edc6 7a02 	vstr	s15, [r6, #8]
 8002e74:	e02c      	b.n	8002ed0 <__kernel_rem_pio2f+0x468>
 8002e76:	aa56      	add	r2, sp, #344	; 0x158
 8002e78:	4411      	add	r1, r2
 8002e7a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002e7e:	399c      	subs	r1, #156	; 0x9c
 8002e80:	4618      	mov	r0, r3
 8002e82:	2800      	cmp	r0, #0
 8002e84:	da32      	bge.n	8002eec <__kernel_rem_pio2f+0x484>
 8002e86:	f1b8 0f00 	cmp.w	r8, #0
 8002e8a:	d035      	beq.n	8002ef8 <__kernel_rem_pio2f+0x490>
 8002e8c:	eef1 7a47 	vneg.f32	s15, s14
 8002e90:	edc6 7a00 	vstr	s15, [r6]
 8002e94:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8002e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e9c:	a82f      	add	r0, sp, #188	; 0xbc
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	da2c      	bge.n	8002efe <__kernel_rem_pio2f+0x496>
 8002ea4:	f1b8 0f00 	cmp.w	r8, #0
 8002ea8:	d001      	beq.n	8002eae <__kernel_rem_pio2f+0x446>
 8002eaa:	eef1 7a67 	vneg.f32	s15, s15
 8002eae:	edc6 7a01 	vstr	s15, [r6, #4]
 8002eb2:	e00d      	b.n	8002ed0 <__kernel_rem_pio2f+0x468>
 8002eb4:	aa56      	add	r2, sp, #344	; 0x158
 8002eb6:	4411      	add	r1, r2
 8002eb8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8002d80 <__kernel_rem_pio2f+0x318>
 8002ebc:	399c      	subs	r1, #156	; 0x9c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da0e      	bge.n	8002ee0 <__kernel_rem_pio2f+0x478>
 8002ec2:	f1b8 0f00 	cmp.w	r8, #0
 8002ec6:	d001      	beq.n	8002ecc <__kernel_rem_pio2f+0x464>
 8002ec8:	eef1 7a67 	vneg.f32	s15, s15
 8002ecc:	edc6 7a00 	vstr	s15, [r6]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	f003 0007 	and.w	r0, r3, #7
 8002ed6:	b057      	add	sp, #348	; 0x15c
 8002ed8:	ecbd 8b04 	vpop	{d8-d9}
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee0:	ed31 7a01 	vldmdb	r1!, {s14}
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eea:	e7e8      	b.n	8002ebe <__kernel_rem_pio2f+0x456>
 8002eec:	ed71 7a01 	vldmdb	r1!, {s15}
 8002ef0:	3801      	subs	r0, #1
 8002ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef6:	e7c4      	b.n	8002e82 <__kernel_rem_pio2f+0x41a>
 8002ef8:	eef0 7a47 	vmov.f32	s15, s14
 8002efc:	e7c8      	b.n	8002e90 <__kernel_rem_pio2f+0x428>
 8002efe:	ecb0 7a01 	vldmia	r0!, {s14}
 8002f02:	3101      	adds	r1, #1
 8002f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f08:	e7ca      	b.n	8002ea0 <__kernel_rem_pio2f+0x438>
 8002f0a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002f0e:	ed70 6a01 	vldmdb	r0!, {s13}
 8002f12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002f16:	3c01      	subs	r4, #1
 8002f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f1c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8002f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f24:	edc0 7a00 	vstr	s15, [r0]
 8002f28:	e78d      	b.n	8002e46 <__kernel_rem_pio2f+0x3de>
 8002f2a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002f2e:	ed70 6a01 	vldmdb	r0!, {s13}
 8002f32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002f36:	3c01      	subs	r4, #1
 8002f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f3c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8002f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f44:	edc0 7a00 	vstr	s15, [r0]
 8002f48:	e781      	b.n	8002e4e <__kernel_rem_pio2f+0x3e6>
 8002f4a:	ed31 7a01 	vldmdb	r1!, {s14}
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f54:	e77f      	b.n	8002e56 <__kernel_rem_pio2f+0x3ee>
 8002f56:	eef1 6a66 	vneg.f32	s13, s13
 8002f5a:	eeb1 7a47 	vneg.f32	s14, s14
 8002f5e:	edc6 6a00 	vstr	s13, [r6]
 8002f62:	ed86 7a01 	vstr	s14, [r6, #4]
 8002f66:	eef1 7a67 	vneg.f32	s15, s15
 8002f6a:	e781      	b.n	8002e70 <__kernel_rem_pio2f+0x408>

08002f6c <__kernel_sinf>:
 8002f6c:	ee10 3a10 	vmov	r3, s0
 8002f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002f78:	da04      	bge.n	8002f84 <__kernel_sinf+0x18>
 8002f7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f7e:	ee17 3a90 	vmov	r3, s15
 8002f82:	b35b      	cbz	r3, 8002fdc <__kernel_sinf+0x70>
 8002f84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002f88:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002fe0 <__kernel_sinf+0x74>
 8002f8c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002fe4 <__kernel_sinf+0x78>
 8002f90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002f94:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002fe8 <__kernel_sinf+0x7c>
 8002f98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002f9c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002fec <__kernel_sinf+0x80>
 8002fa0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002fa4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002ff0 <__kernel_sinf+0x84>
 8002fa8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002fac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002fb0:	b930      	cbnz	r0, 8002fc0 <__kernel_sinf+0x54>
 8002fb2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002ff4 <__kernel_sinf+0x88>
 8002fb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002fba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8002fbe:	4770      	bx	lr
 8002fc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002fc4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002fc8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8002fcc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002fd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002ff8 <__kernel_sinf+0x8c>
 8002fd4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002fd8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	2f2ec9d3 	.word	0x2f2ec9d3
 8002fe4:	b2d72f34 	.word	0xb2d72f34
 8002fe8:	3638ef1b 	.word	0x3638ef1b
 8002fec:	b9500d01 	.word	0xb9500d01
 8002ff0:	3c088889 	.word	0x3c088889
 8002ff4:	be2aaaab 	.word	0xbe2aaaab
 8002ff8:	3e2aaaab 	.word	0x3e2aaaab

08002ffc <fabsf>:
 8002ffc:	ee10 3a10 	vmov	r3, s0
 8003000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003004:	ee00 3a10 	vmov	s0, r3
 8003008:	4770      	bx	lr
	...

0800300c <scalbnf>:
 800300c:	b508      	push	{r3, lr}
 800300e:	ee10 2a10 	vmov	r2, s0
 8003012:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8003016:	ed2d 8b02 	vpush	{d8}
 800301a:	eef0 0a40 	vmov.f32	s1, s0
 800301e:	d004      	beq.n	800302a <scalbnf+0x1e>
 8003020:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003024:	d306      	bcc.n	8003034 <scalbnf+0x28>
 8003026:	ee70 0a00 	vadd.f32	s1, s0, s0
 800302a:	ecbd 8b02 	vpop	{d8}
 800302e:	eeb0 0a60 	vmov.f32	s0, s1
 8003032:	bd08      	pop	{r3, pc}
 8003034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003038:	d21c      	bcs.n	8003074 <scalbnf+0x68>
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <scalbnf+0xac>)
 800303c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80030bc <scalbnf+0xb0>
 8003040:	4298      	cmp	r0, r3
 8003042:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003046:	db10      	blt.n	800306a <scalbnf+0x5e>
 8003048:	ee10 2a90 	vmov	r2, s1
 800304c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003050:	3b19      	subs	r3, #25
 8003052:	4403      	add	r3, r0
 8003054:	2bfe      	cmp	r3, #254	; 0xfe
 8003056:	dd0f      	ble.n	8003078 <scalbnf+0x6c>
 8003058:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80030c0 <scalbnf+0xb4>
 800305c:	eeb0 0a48 	vmov.f32	s0, s16
 8003060:	f000 f834 	bl	80030cc <copysignf>
 8003064:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003068:	e7df      	b.n	800302a <scalbnf+0x1e>
 800306a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80030c4 <scalbnf+0xb8>
 800306e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003072:	e7da      	b.n	800302a <scalbnf+0x1e>
 8003074:	0ddb      	lsrs	r3, r3, #23
 8003076:	e7ec      	b.n	8003052 <scalbnf+0x46>
 8003078:	2b00      	cmp	r3, #0
 800307a:	dd06      	ble.n	800308a <scalbnf+0x7e>
 800307c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003080:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003084:	ee00 3a90 	vmov	s1, r3
 8003088:	e7cf      	b.n	800302a <scalbnf+0x1e>
 800308a:	f113 0f16 	cmn.w	r3, #22
 800308e:	da06      	bge.n	800309e <scalbnf+0x92>
 8003090:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003094:	4298      	cmp	r0, r3
 8003096:	dcdf      	bgt.n	8003058 <scalbnf+0x4c>
 8003098:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80030c4 <scalbnf+0xb8>
 800309c:	e7de      	b.n	800305c <scalbnf+0x50>
 800309e:	3319      	adds	r3, #25
 80030a0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80030a4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80030a8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80030c8 <scalbnf+0xbc>
 80030ac:	ee07 3a10 	vmov	s14, r3
 80030b0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80030b4:	e7b9      	b.n	800302a <scalbnf+0x1e>
 80030b6:	bf00      	nop
 80030b8:	ffff3cb0 	.word	0xffff3cb0
 80030bc:	4c000000 	.word	0x4c000000
 80030c0:	7149f2ca 	.word	0x7149f2ca
 80030c4:	0da24260 	.word	0x0da24260
 80030c8:	33000000 	.word	0x33000000

080030cc <copysignf>:
 80030cc:	ee10 3a10 	vmov	r3, s0
 80030d0:	ee10 2a90 	vmov	r2, s1
 80030d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030dc:	4313      	orrs	r3, r2
 80030de:	ee00 3a10 	vmov	s0, r3
 80030e2:	4770      	bx	lr

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4e0d      	ldr	r6, [pc, #52]	; (800311c <__libc_init_array+0x38>)
 80030e8:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ea:	1ba4      	subs	r4, r4, r6
 80030ec:	10a4      	asrs	r4, r4, #2
 80030ee:	2500      	movs	r5, #0
 80030f0:	42a5      	cmp	r5, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	4e0b      	ldr	r6, [pc, #44]	; (8003124 <__libc_init_array+0x40>)
 80030f6:	4c0c      	ldr	r4, [pc, #48]	; (8003128 <__libc_init_array+0x44>)
 80030f8:	f000 f818 	bl	800312c <_init>
 80030fc:	1ba4      	subs	r4, r4, r6
 80030fe:	10a4      	asrs	r4, r4, #2
 8003100:	2500      	movs	r5, #0
 8003102:	42a5      	cmp	r5, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800310c:	4798      	blx	r3
 800310e:	3501      	adds	r5, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003116:	4798      	blx	r3
 8003118:	3501      	adds	r5, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	0800352c 	.word	0x0800352c
 8003120:	0800352c 	.word	0x0800352c
 8003124:	0800352c 	.word	0x0800352c
 8003128:	08003530 	.word	0x08003530

0800312c <_init>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	bf00      	nop
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr

08003138 <_fini>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr
